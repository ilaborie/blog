{"version":3,"sources":["webpack:///path---remote-minimal-receiver-604ce16ec527b8bef1e8.js","webpack:///./.cache/json/remote-minimal-receiver.json"],"names":["webpackJsonp","425","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,0BAAAC,OAAA,mBAA6DC,gBAAmBC,GAAA,4GAAAC,KAAA,sxRAA4nQC,aAA80BL,MAAA,uDAAAM,KAAA,uBAA4FC,aAAgBC,KAAA","file":"path---remote-minimal-receiver-604ce16ec527b8bef1e8.js","sourcesContent":["webpackJsonp([107690442534757],{\n\n/***/ 425:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/richardimaoka/blog/src/pages/remote-minimal-receiver/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Overview</h2>\\n<p>You can find the code and instruction to run the example at <a href=\\\"https://github.com/richardimaoka/resources/tree/master/remote-minimal\\\">GitHub</a>.</p>\\n<iframe width=\\\"640\\\" height=\\\"360\\\" src=\\\"https://www.youtube.com/embed/YAuamfYBb1o\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; encrypted-media\\\" allowfullscreen></iframe>\\n<p>This is the last of three articles about akka's remote message passing. The previous articles are here:</p>\\n<ul>\\n<li><a href=\\\"../remote-minimal-setup\\\">Akka remoting minimal example part 1 - setup</a></li>\\n<li><a href=\\\"../remote-minimal-sender\\\">Akka remoting minimal example part 2 - sender side</a></li>\\n</ul>\\n<h3>TcpHandlers</h3>\\n<p>As in the previous article, Netty takes care of the message transport in the network layer.</p>\\n<p><img src=\\\"/blog/netty-96343e72e3f9855be8e66c37ed135e02.jpg\\\" alt=\\\"netty\\\"></p>\\n<p>Onc the receiver side, <code>TcpHandler</code> has the <code>onMessage</code> method, which is called when a message payload (serialized byte array) arrives on the receiver side. </p>\\n<p><img src=\\\"/blog/tcphandler-7a5f4eb307023f066db3ba2a77eaa318.jpg\\\" alt=\\\"tcphandler\\\"></p>\\n<pre><code class=\\\"language-scala\\\">trait TcpHandlers extends ... {\\n\\n  override def onMessage(...): Unit = {\\n    ...\\n    notifyListener(\\n      ..., \\n      InboundPayload(ByteString(bytes))\\n    )\\n  }\\n</code></pre>\\n<p>The above <code>notifyListener</code>  method is as follows:</p>\\n<pre><code class=\\\"language-scala\\\">  def notifyListener(channel: Channel, msg: HandleEvent): Unit = \\n    get(channel) foreach { _ notify msg }\\n</code></pre>\\n<p>and <code>notify</code> performs usual local message passing via the familiar <code>!</code> method, <code>actor ! ev</code>.</p>\\n<pre><code>  final case class ActorHandleEventListener(actor: ActorRef) \\n    extends HandleEventListener {\\n    \\n    override def notify(ev: HandleEvent): Unit =\\n      actor ! ev\\n  }\\n</code></pre>\\n<h3>EndPointReader and de-serialization</h3>\\n<p><img src=\\\"/blog/deserialize-de187b0aca391605b3c8af965f49e7a7.jpg\\\" alt=\\\"deserialize\\\"></p>\\n<p>There are some intermediate actor(s) passes through the payload after the <code>notify</code> method described above (in the case of this example, <code>AkkaProtocolManager</code>).</p>\\n<p>Afterwards, an important <code>EndpointReader</code> actor receives the payload. It has the following <code>receive</code> method.</p>\\n<pre><code class=\\\"language-scala\\\">class EndpointReader(\\n  ...\\n  override def receive: Receive = {\\n    case InboundPayload(p) if p.size &#x3C;= transport.maximumPayloadBytes â‡’\\n      ...     \\n      msgDispatch.dispatch(\\n        msg.recipient,\\n        msg.recipientAddress,\\n        // msg.serializedMessage.message: ByteString \\n        msg.serializedMessage,\\n        msg.senderOption\\n      )\\n  ...\\n}        \\n</code></pre>\\n<p>When <code>EndPointReader</code> receives the payload, it is de-serialized from a serialized byte array (represented as <code>ByteString</code>) to a Scala object, with the following call in <code>DefaultMessageDispatcher</code>.</p>\\n<pre><code>class DefaultMessageDispatcher(\\n    ...\\n    lazy val payload: AnyRef =\\n      MessageSerializer.deserialize(\\n        system, \\n        serializedMessage\\n      )\\n    ...\\n}\\n</code></pre>\\n<p><code>msgDispatch.dispatch</code> in <code>EndPointReader</code> finally passes the deserialized message to the <code>MessageReceiver</code> actor via local message passing.</p>\\n<p><img src=\\\"/blog/receiver-5310b90ed8761a134f9b10a3a878337f.jpg\\\" alt=\\\"receiver\\\"></p>\\n<h2>Instruction to run the example, and output</h2>\\n<p>As this example uses <a href=\\\"https://doc.akka.io/docs/akka/2.5/remoting.html\\\">Akka remoting</a> to send a message,\\nyou need to run two JVMs for the receiver and sender of the application respectively.</p>\\n<p>Firstly, run the receiver side with the <code>receiver</code> argument supplied to <code>Main</code>.</p>\\n<pre><code>> git clone https://github.com/richardimaoka/resources.git\\n> cd resources\\n> cd remote-minimal\\n> sbt\\n> runMain example.Main receiver\\n</code></pre>\\n<p>You'll get output like below, then it waits until the message is sent from the sender.</p>\\n<pre><code>> runMain example.Main receiver\\n[info] Running example.Main receiver\\nProgram args:\\nreceiver\\nrunning startMessageReceiver()\\n[INFO] [02/03/2018 13:36:58.281] [run-main-0] [akka.remote.Remoting] Starting remoting\\n[INFO] [02/03/2018 13:36:58.462] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://receiverSystem@127.0.0.1:2551]\\n[INFO] [02/03/2018 13:36:58.464] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://receiverSystem@127.0.0.1:2551]\\nprovider = remote\\nlistening at port = 2551\\nstarted a receiver actor = Actor[akka://receiverSystem/user/receiver#-603875191]\\n</code></pre>\\n<p>Then in the same directory, run the same <code>Main</code> with <code>sender</code> as the argument</p>\\n<pre><code>> sbt\\n> runMain example.Main sender\\n</code></pre>\\n<p>this is the sender side output:</p>\\n<pre><code>[info] Running example.Main sender\\nProgram args:\\nsender\\nrunning startMessageSender()\\n[INFO] [02/03/2018 13:37:16.215] [run-main-0] [akka.remote.Remoting] Starting remoting\\n[INFO] [02/03/2018 13:37:16.427] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://senderSystem@127.0.0.1:2552]\\n[INFO] [02/03/2018 13:37:16.432] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://senderSystem@127.0.0.1:2552]\\nprovider = remote\\nlistening at port = 2552\\nsending a message to akka.tcp://receiverSystem@127.0.0.1:2551/user/receiver\\n[INFO] [02/03/2018 13:37:19.533] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Shutting down remote daemon.\\n[INFO] [02/03/2018 13:37:19.537] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.\\n[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.actor.default-dispatcher-4] [akka.remote.Remoting] Remoting shut down\\n[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remoting shut down.\\n[success] Total time: 5 s, completed Feb 3, 2018 1:37:19 PM\\n</code></pre>\\n<p>then you see the receiver output as follows:</p>\\n<pre><code>EchoActor: received message = Hello!!\\n</code></pre>\\n<p>and immediately after that, the receiver side shows this error, which can be ignored.</p>\\n<pre><code>[ERROR] [02/03/2018 13:37:19.572] [receiverSystem-akka.remote.default-remote-dispatcher-15] [akka.tcp://receiverSystem@127.0.0.1:2551/system/endpointManager/reliableEndpointWriter-akka.tcp%3A%2F%2FsenderSystem%40127.0.0.1%3A2552-0/endpointWriter] AssociationError [akka.tcp://receiverSystem@127.0.0.1:2551] &#x3C;- [akka.tcp://senderSystem@127.0.0.1:2552]: Error [Shut down address: akka.tcp://senderSystem@127.0.0.1:2552] [\\nakka.remote.ShutDownAssociation: Shut down address: akka.tcp://senderSystem@127.0.0.1:2552\\nCaused by: akka.remote.transport.Transport$InvalidAssociationException: The remote system terminated the association because it is shutting down.\\n]\\n</code></pre>\\n<p>As explained in <a href=\\\"https://groups.google.com/forum/#!topic/akka-user/eerWNwRQ7o0\\\">this thrad in akka-user</a> mailing list, the error happens specifically when you launch a process like this example from sbt, but when you compile your application and run it witout sbt, then the error disappears.</p>\\n<p>Once everything is done, press the enter key on the receiver side's console and you get this:</p>\\n<pre><code>[INFO] [02/03/2018 13:38:05.942] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Shutting down remote daemon.\\n[INFO] [02/03/2018 13:38:05.944] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.\\n[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.actor.default-dispatcher-3] [akka.remote.Remoting] Remoting shut down\\n[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.remote.default-remote-dispatcher-6] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remoting shut down.\\n</code></pre>\\n<h2>References</h2>\\n<ul>\\n<li>Official documentation of Akka remoting at <a href=\\\"https://doc.akka.io/docs/akka/2.5/remoting.html\\\">https://doc.akka.io/docs/akka/2.5/remoting.html</a></li>\\n<li>Official documentation of Akka serialization at <a href=\\\"https://doc.akka.io/docs/akka/2.5/serialization.html\\\">https://doc.akka.io/docs/akka/2.5/serialization.html</a></li>\\n<li>Netty documentation at <a href=\\\"https://netty.io/\\\">https://netty.io/</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Akka remoting minimal example part 3 - receiver side\",\"date\":\"February 09, 2018\"}}},\"pathContext\":{\"slug\":\"/remote-minimal-receiver/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---remote-minimal-receiver-604ce16ec527b8bef1e8.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/richardimaoka/blog/src/pages/remote-minimal-receiver/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Overview</h2>\\n<p>You can find the code and instruction to run the example at <a href=\\\"https://github.com/richardimaoka/resources/tree/master/remote-minimal\\\">GitHub</a>.</p>\\n<iframe width=\\\"640\\\" height=\\\"360\\\" src=\\\"https://www.youtube.com/embed/YAuamfYBb1o\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; encrypted-media\\\" allowfullscreen></iframe>\\n<p>This is the last of three articles about akka's remote message passing. The previous articles are here:</p>\\n<ul>\\n<li><a href=\\\"../remote-minimal-setup\\\">Akka remoting minimal example part 1 - setup</a></li>\\n<li><a href=\\\"../remote-minimal-sender\\\">Akka remoting minimal example part 2 - sender side</a></li>\\n</ul>\\n<h3>TcpHandlers</h3>\\n<p>As in the previous article, Netty takes care of the message transport in the network layer.</p>\\n<p><img src=\\\"/blog/netty-96343e72e3f9855be8e66c37ed135e02.jpg\\\" alt=\\\"netty\\\"></p>\\n<p>Onc the receiver side, <code>TcpHandler</code> has the <code>onMessage</code> method, which is called when a message payload (serialized byte array) arrives on the receiver side. </p>\\n<p><img src=\\\"/blog/tcphandler-7a5f4eb307023f066db3ba2a77eaa318.jpg\\\" alt=\\\"tcphandler\\\"></p>\\n<pre><code class=\\\"language-scala\\\">trait TcpHandlers extends ... {\\n\\n  override def onMessage(...): Unit = {\\n    ...\\n    notifyListener(\\n      ..., \\n      InboundPayload(ByteString(bytes))\\n    )\\n  }\\n</code></pre>\\n<p>The above <code>notifyListener</code>  method is as follows:</p>\\n<pre><code class=\\\"language-scala\\\">  def notifyListener(channel: Channel, msg: HandleEvent): Unit = \\n    get(channel) foreach { _ notify msg }\\n</code></pre>\\n<p>and <code>notify</code> performs usual local message passing via the familiar <code>!</code> method, <code>actor ! ev</code>.</p>\\n<pre><code>  final case class ActorHandleEventListener(actor: ActorRef) \\n    extends HandleEventListener {\\n    \\n    override def notify(ev: HandleEvent): Unit =\\n      actor ! ev\\n  }\\n</code></pre>\\n<h3>EndPointReader and de-serialization</h3>\\n<p><img src=\\\"/blog/deserialize-de187b0aca391605b3c8af965f49e7a7.jpg\\\" alt=\\\"deserialize\\\"></p>\\n<p>There are some intermediate actor(s) passes through the payload after the <code>notify</code> method described above (in the case of this example, <code>AkkaProtocolManager</code>).</p>\\n<p>Afterwards, an important <code>EndpointReader</code> actor receives the payload. It has the following <code>receive</code> method.</p>\\n<pre><code class=\\\"language-scala\\\">class EndpointReader(\\n  ...\\n  override def receive: Receive = {\\n    case InboundPayload(p) if p.size &#x3C;= transport.maximumPayloadBytes â‡’\\n      ...     \\n      msgDispatch.dispatch(\\n        msg.recipient,\\n        msg.recipientAddress,\\n        // msg.serializedMessage.message: ByteString \\n        msg.serializedMessage,\\n        msg.senderOption\\n      )\\n  ...\\n}        \\n</code></pre>\\n<p>When <code>EndPointReader</code> receives the payload, it is de-serialized from a serialized byte array (represented as <code>ByteString</code>) to a Scala object, with the following call in <code>DefaultMessageDispatcher</code>.</p>\\n<pre><code>class DefaultMessageDispatcher(\\n    ...\\n    lazy val payload: AnyRef =\\n      MessageSerializer.deserialize(\\n        system, \\n        serializedMessage\\n      )\\n    ...\\n}\\n</code></pre>\\n<p><code>msgDispatch.dispatch</code> in <code>EndPointReader</code> finally passes the deserialized message to the <code>MessageReceiver</code> actor via local message passing.</p>\\n<p><img src=\\\"/blog/receiver-5310b90ed8761a134f9b10a3a878337f.jpg\\\" alt=\\\"receiver\\\"></p>\\n<h2>Instruction to run the example, and output</h2>\\n<p>As this example uses <a href=\\\"https://doc.akka.io/docs/akka/2.5/remoting.html\\\">Akka remoting</a> to send a message,\\nyou need to run two JVMs for the receiver and sender of the application respectively.</p>\\n<p>Firstly, run the receiver side with the <code>receiver</code> argument supplied to <code>Main</code>.</p>\\n<pre><code>> git clone https://github.com/richardimaoka/resources.git\\n> cd resources\\n> cd remote-minimal\\n> sbt\\n> runMain example.Main receiver\\n</code></pre>\\n<p>You'll get output like below, then it waits until the message is sent from the sender.</p>\\n<pre><code>> runMain example.Main receiver\\n[info] Running example.Main receiver\\nProgram args:\\nreceiver\\nrunning startMessageReceiver()\\n[INFO] [02/03/2018 13:36:58.281] [run-main-0] [akka.remote.Remoting] Starting remoting\\n[INFO] [02/03/2018 13:36:58.462] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://receiverSystem@127.0.0.1:2551]\\n[INFO] [02/03/2018 13:36:58.464] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://receiverSystem@127.0.0.1:2551]\\nprovider = remote\\nlistening at port = 2551\\nstarted a receiver actor = Actor[akka://receiverSystem/user/receiver#-603875191]\\n</code></pre>\\n<p>Then in the same directory, run the same <code>Main</code> with <code>sender</code> as the argument</p>\\n<pre><code>> sbt\\n> runMain example.Main sender\\n</code></pre>\\n<p>this is the sender side output:</p>\\n<pre><code>[info] Running example.Main sender\\nProgram args:\\nsender\\nrunning startMessageSender()\\n[INFO] [02/03/2018 13:37:16.215] [run-main-0] [akka.remote.Remoting] Starting remoting\\n[INFO] [02/03/2018 13:37:16.427] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://senderSystem@127.0.0.1:2552]\\n[INFO] [02/03/2018 13:37:16.432] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://senderSystem@127.0.0.1:2552]\\nprovider = remote\\nlistening at port = 2552\\nsending a message to akka.tcp://receiverSystem@127.0.0.1:2551/user/receiver\\n[INFO] [02/03/2018 13:37:19.533] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Shutting down remote daemon.\\n[INFO] [02/03/2018 13:37:19.537] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.\\n[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.actor.default-dispatcher-4] [akka.remote.Remoting] Remoting shut down\\n[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remoting shut down.\\n[success] Total time: 5 s, completed Feb 3, 2018 1:37:19 PM\\n</code></pre>\\n<p>then you see the receiver output as follows:</p>\\n<pre><code>EchoActor: received message = Hello!!\\n</code></pre>\\n<p>and immediately after that, the receiver side shows this error, which can be ignored.</p>\\n<pre><code>[ERROR] [02/03/2018 13:37:19.572] [receiverSystem-akka.remote.default-remote-dispatcher-15] [akka.tcp://receiverSystem@127.0.0.1:2551/system/endpointManager/reliableEndpointWriter-akka.tcp%3A%2F%2FsenderSystem%40127.0.0.1%3A2552-0/endpointWriter] AssociationError [akka.tcp://receiverSystem@127.0.0.1:2551] &#x3C;- [akka.tcp://senderSystem@127.0.0.1:2552]: Error [Shut down address: akka.tcp://senderSystem@127.0.0.1:2552] [\\nakka.remote.ShutDownAssociation: Shut down address: akka.tcp://senderSystem@127.0.0.1:2552\\nCaused by: akka.remote.transport.Transport$InvalidAssociationException: The remote system terminated the association because it is shutting down.\\n]\\n</code></pre>\\n<p>As explained in <a href=\\\"https://groups.google.com/forum/#!topic/akka-user/eerWNwRQ7o0\\\">this thrad in akka-user</a> mailing list, the error happens specifically when you launch a process like this example from sbt, but when you compile your application and run it witout sbt, then the error disappears.</p>\\n<p>Once everything is done, press the enter key on the receiver side's console and you get this:</p>\\n<pre><code>[INFO] [02/03/2018 13:38:05.942] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Shutting down remote daemon.\\n[INFO] [02/03/2018 13:38:05.944] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.\\n[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.actor.default-dispatcher-3] [akka.remote.Remoting] Remoting shut down\\n[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.remote.default-remote-dispatcher-6] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remoting shut down.\\n</code></pre>\\n<h2>References</h2>\\n<ul>\\n<li>Official documentation of Akka remoting at <a href=\\\"https://doc.akka.io/docs/akka/2.5/remoting.html\\\">https://doc.akka.io/docs/akka/2.5/remoting.html</a></li>\\n<li>Official documentation of Akka serialization at <a href=\\\"https://doc.akka.io/docs/akka/2.5/serialization.html\\\">https://doc.akka.io/docs/akka/2.5/serialization.html</a></li>\\n<li>Netty documentation at <a href=\\\"https://netty.io/\\\">https://netty.io/</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Akka remoting minimal example part 3 - receiver side\",\"date\":\"February 09, 2018\"}}},\"pathContext\":{\"slug\":\"/remote-minimal-receiver/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/remote-minimal-receiver.json\n// module id = 425\n// module chunks = 107690442534757"],"sourceRoot":""}