webpackJsonp([0x91d0d26a1182],{428:function(e,a){e.exports={data:{site:{siteMetadata:{title:"Akka, Concurrency, etc.",author:"Richard Imaoka"}},markdownRemark:{id:"C:/Users/richardimaoka/blog/src/pages/serializer-minimal.md absPath of file >>> MarkdownRemark",html:'<h2>Overview</h2>\n<p>You can find the code and instruction to run the example at <a href="https://github.com/richardimaoka/resources/tree/master/serialize-minimal">GitHub</a>.</p>\n<h3>Akka Serialization</h3>\n<iframe width="480" height="270"" src="https://www.youtube.com/embed/paclLCSv6NA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>\n<p>Akka doc\'s <a href="https://doc.akka.io/docs/akka/2.5/serialization.html">serialization section</a> says:</p>\n<blockquote>\n<p>However, messages that have to escape the JVM to reach an actor running on a different host have to undergo some form of serialization (i.e. the objects have to be converted to and from byte arrays).</p>\n</blockquote>\n<p>This example shows a simplified version, but still the core of what Akka serialization does -\n(i.e.) how <code>Serialization</code> Akka extention class, <code>Serializer</code>,\nand the message you want to serialize/deserialize work together.</p>\n<h3>Serializer configuration</h3>\n<p>First, you need to define your serializer class, extending <code>Serializer</code>.</p>\n<pre><code class="language-scala">import akka.serialization.Serializer\n\ncase class MyMessage(str1: String, str2: String)\n\nclass MySerializer extends Serializer {\n  ...\n}\n</code></pre>\n<p>Then you need configuration which binds your <code>MySerializer</code> to the <code>MyMessage</code> type.\nNote the common <code>mymessage</code> key which defines the binding.</p>\n<pre><code class="language-scala">//application.conf\nakka {\n  actor {\n    serializers {\n      mymessage = "example.MySerializer"\n    }                                     \n    serialization-bindings {              \n      "example.MyMessage" = mymessage     \n    }\n  }\n}\n</code></pre>\n<p>Next, you should define <code>toBinary</code> and <code>fromBinary</code> inside <code>MySerializer</code> to handle\nserialization and deserialization of <code>MyMessage</code> instances.</p>\n<pre><code class="language-scala">  def toBinary(obj: AnyRef): Array[Byte] = {\n    obj match {\n      case msg: MyMessage => \n        (msg.str1 + "|" + msg.str2).getBytes(StandardCharsets.UTF_8)\n    }\n  }\n</code></pre>\n<pre><code class="language-scala">  def fromBinary(bytes: Array[Byte], clazz: Option[Class[_]]): AnyRef = {\n    val repString = new String(bytes, StandardCharsets.UTF_8)\n    // \'|\' is enclosed in single quotes = Char, not \n    val arr: Array[String] = repString.split(\'|\') String\n    new MyMessage(arr(0), arr(1))\n  }\n</code></pre>\n<p>The below piece of code is the simplied version of what Akka does, when serializing a message.</p>\n<pre><code>val system = akka.actor.ActorSystem("example", ConfigFactory.load())\nval original = MyMessage("aaa", "bbb")\nval serialization = SerializationExtension(system)\n\n//serialization by toBinary\nval bytes = serializer.toBinary(original)\n\n//de-serialization by fromBinary\nval restored = serializer.fromBinary(bytes, manifest = None)\n</code></pre>\n<p>When you are (e.g.) sending a message to a remote JVM, this is done under the ground\nand you don\'t explicitly call <code>SerializationExtension(system)</code>, <code>toBinary</code> and <code>fromBinary</code> yourself, but this example is to show what\'s done by Akka in the simple form.</p>\n<h2>Instruction to run the example</h2>\n<pre><code>> git clone https://github.com/richardimaoka/resources.git\n> cd resources\n> cd serialize-minimal\n> sbt\n> runMain example.Main\n</code></pre>\n<h2>Output</h2>\n<p>Some <code>println</code> calls are inserted in the <a href="https://github.com/richardimaoka/resources/tree/master/serialize-minimal">complete example at GitHub</a> to illustrate the behavior</p>\n<pre><code>[info] Running example.Main\nSerializer for class example.MyMessage = example.MySerializer@254b2a65\nMySerializer: toBinary(MyMessage(aaa,bbb)) is called\nMySerializer: fromBinary(979797124989898) is called\noriginal = MyMessage(aaa,bbb), class = class example.MyMessage\nrestored = MyMessage(aaa,bbb), class = class example.MyMessage\n[success] Total time: 1 s, completed Jan 23, 2018 9:48:55 PM\n</code></pre>\n<h2>References</h2>\n<ul>\n<li>Official documentation of Akka serialization at <a href="https://doc.akka.io/docs/akka/2.5/serialization.html">https://doc.akka.io/docs/akka/2.5/serialization.html</a></li>\n</ul>',frontmatter:{title:"Serializer minimal example",date:"January 22, 2018"}}},pathContext:{slug:"/serializer-minimal/"}}}});
//# sourceMappingURL=path---serializer-minimal-3a5ef328caa94a3f322f.js.map