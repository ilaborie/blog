<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Akka, Concurrency, etc.]]></title><description><![CDATA[Memo about Akka, concurrency, and other technical stuff]]></description><link>https://richardimaoka.github.io/blog/</link><generator>RSS for Node</generator><lastBuildDate>Fri, 27 Jul 2018 13:12:01 GMT</lastBuildDate><item><title><![CDATA[Akka HTTP streaming at the HTTP layer]]></title><description><![CDATA[The previous article  Akka HTTP and TCP streaming  introduced how Akka HTTP processes data in a streaming fashion at the TCP layer. Now I am…]]></description><link>https://richardimaoka.github.io/blog//akka-http-http-streaming/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//akka-http-http-streaming/</guid><pubDate>Fri, 27 Jul 2018 03:31:08 GMT</pubDate><content:encoded>&lt;p&gt;The previous article &lt;a href=&quot;./akka-http-tcp-streaming/&quot;&gt;Akka HTTP and TCP streaming&lt;/a&gt; introduced how Akka HTTP processes data in a streaming fashion at the TCP layer. Now I am going to explain the streaming behavior at the HTTP request/response level. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/http-streaming-c69314456167bfaefbf771597c295028.gif&quot; alt=&quot;http-streaming&quot;&gt;&lt;/p&gt;
&lt;p&gt;The above animation illustrates streaming in Akka HTTP at the HTTP layer. Each HTTP request is converted to an HTTP response in the end, and this conversion logic is called the &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; here, which is passed to the &lt;code class=&quot;language-text&quot;&gt;bindAndHandle&lt;/code&gt; method to start up the HTTP server.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http
Http&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bindAndHandle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; has the type of &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, HttpResponse, Any]&lt;/code&gt; as you can see from the signature of the &lt;code class=&quot;language-text&quot;&gt;bindAndHandle&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; bindAndHandle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  handler&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;   Flow&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;HttpRequest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;  interface&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DefaultPortForProtocol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  connectionContext&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ConnectionContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultServerHttpContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  settings&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;          ServerSettings    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ServerSettings&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;system&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  log&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;               LoggingAdapter    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; fm&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Materializer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ServerBinding&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So the &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; in Akka HTTP convertes &lt;code class=&quot;language-text&quot;&gt;HttpRequest&lt;/code&gt; into &lt;code class=&quot;language-text&quot;&gt;HttpResponse&lt;/code&gt; and that’s where you application-level logic resides.&lt;/p&gt;
&lt;h2&gt;High-level and Low-level APIs&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; in type of  &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, HttpResponse, Any]&lt;/code&gt;, can be implemented in two ways in Akka HTTP.&lt;/p&gt;
&lt;p&gt;In this article, I’m going to introduce them very briefly, and discuss them in much more detail in separate articles.&lt;/p&gt;
&lt;p&gt;The first way is to use the &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/introduction.html#routing-dsl-for-http-servers&quot;&gt;high-level API&lt;/a&gt; with &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/routing-dsl/index.html&quot;&gt;Routing DSL&lt;/a&gt;. Interestingly, the &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; written in Routing DSL has the type of &lt;code class=&quot;language-text&quot;&gt;Route&lt;/code&gt; not &lt;code class=&quot;language-text&quot;&gt;Flow&lt;/code&gt;, but there is type-class based implicit resolution going on, to convert the &lt;code class=&quot;language-text&quot;&gt;Route&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, HttpResponse, Any]&lt;/code&gt; behind the scene.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; route&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Route &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;...&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// route: Route is resolved to Flow[HttpRequest, HttpResponse, Any]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// by type-class based implicits&lt;/span&gt;
Http&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bindAndHandle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;route &lt;span class=&quot;token comment&quot;&gt;/*route as handler*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Writing the &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; in Routing DSL in most cases is much easier than writing &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, HttpResponse, Any]&lt;/code&gt; directly. So most of the cases you would go with the high level API. &lt;/p&gt;
&lt;p&gt;However, as the &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/introduction.html#philosophy&quot;&gt;philosophy&lt;/a&gt; of Akka HTTP says, in case it is more suitable to directly implement the &lt;code class=&quot;language-text&quot;&gt;HttpRequest&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;HttpResponse&lt;/code&gt; conversoin logic rather than &lt;code class=&quot;language-text&quot;&gt;Route&lt;/code&gt;, Akka HTTP also offers the &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/introduction.html#low-level-http-server-apis&quot;&gt;low-level API&lt;/a&gt;, and we can directly implement the handler in &lt;code class=&quot;language-text&quot;&gt;HttpRequest =&amp;gt; HttpResponse&lt;/code&gt; as follows.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; handler&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HttpRequest &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; HttpResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; HttpRequest&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;GET&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Uri&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
    HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

Http&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bindAndHandleSync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;HttpRequest =&amp;gt; HttpResponse&lt;/code&gt; can be passed to &lt;code class=&quot;language-text&quot;&gt;bindAndHandleSync&lt;/code&gt; which is internally converted to &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, HttpResponse, Any]&lt;/code&gt;. Note that we used &lt;code class=&quot;language-text&quot;&gt;bindAndhHandleSync&lt;/code&gt; which is different from &lt;code class=&quot;language-text&quot;&gt;bindAndHandle&lt;/code&gt; wa saw earlier.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; bindAndHandleAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  bindAndHandle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    Flow&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;HttpRequest&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parallelism&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;handler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;    interface&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    connectionContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    settings&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;HTTP Pipelining&lt;/h2&gt;
&lt;p&gt;HTTP pipelining means processing the next HTTP request before sending the HTTP response for the current HTTP request. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/http-pipelining-d298d6f3bf0bcd5880b547fb684621d3.gif&quot; alt=&quot;http-pipelining&quot;&gt;&lt;/p&gt;
&lt;p&gt;Compare it with the animation we saw earlier, without pipelining.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/http-streaming-c69314456167bfaefbf771597c295028.gif&quot; alt=&quot;http-streaming&quot;&gt;&lt;/p&gt;
&lt;p&gt;Although it is &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/server-side/low-level-api.html#controlling-server-parallelism&quot;&gt;generally discouraged&lt;/a&gt;, also &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=HTTP_pipelining&amp;#x26;oldid=700966692#Implementation_in_web_browsers&quot;&gt;disabled by most browsers&lt;/a&gt;, HTTP pipelining is still supported in Akka HTTP. It can be achieved by either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changing &lt;code class=&quot;language-text&quot;&gt;akka.http.server.pipelining-limit&lt;/code&gt; config value, or&lt;/li&gt;
&lt;li&gt;Passing the &lt;code class=&quot;language-text&quot;&gt;parallelism&lt;/code&gt; parameter to the &lt;code class=&quot;language-text&quot;&gt;bindAndHandleAsync&lt;/code&gt; method under the &lt;code class=&quot;language-text&quot;&gt;Http&lt;/code&gt; object (default = 1, i.e. pipelining disabled)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; bindAndHandleAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  handler&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;   HttpRequest ⇒ Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  interface&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DefaultPortForProtocol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  connectionContext&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ConnectionContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultServerHttpContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  settings&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;          ServerSettings    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ServerSettings&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;system&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  parallelism&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;               &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;  log&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;               LoggingAdapter    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; fm&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Materializer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ServerBinding&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Again, HTTP pipelining is a discouraged practice, so if you need to enable this feature, be warned about unwanted consequences.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Akka HTTP and TCP streaming]]></title><description><![CDATA[Akka HTTP server is implemented in using streams, all the way from the TCP layer through the HTTP layer, up to your application layer. In…]]></description><link>https://richardimaoka.github.io/blog//akka-http-tcp-streaming/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//akka-http-tcp-streaming/</guid><pubDate>Thu, 26 Jul 2018 03:31:08 GMT</pubDate><content:encoded>&lt;p&gt;Akka HTTP server is implemented in using streams, all the way from the TCP layer through the HTTP layer, up to your application layer. In this short article, I am going to cover how TCP streaming works in Akka HTTP.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/TCP-streaming-0235c7653c929221a95b9b1bc26e766d.gif&quot; alt=&quot;TCP-streaming&quot;&gt;&lt;/p&gt;
&lt;p&gt;The above animation illustrates streaming at the TCP layer. Firstly, each incoming connection, triggers a creation of &lt;code class=&quot;language-text&quot;&gt;Tcp.IncomingConnection&lt;/code&gt; which essentially represents &lt;code class=&quot;language-text&quot;&gt;Flow[ByteString, ByteString]&lt;/code&gt; in Akka Streams. And within each TCP connection, data bytes in &lt;code class=&quot;language-text&quot;&gt;ByteString&lt;/code&gt; are streamed through the connection.&lt;/p&gt;
&lt;p&gt;Then TCP data bytes in &lt;code class=&quot;language-text&quot;&gt;ByteString&lt;/code&gt; are converted to/from higher level data models, &lt;code class=&quot;language-text&quot;&gt;HttpRequest&lt;/code&gt;/&lt;code class=&quot;language-text&quot;&gt;HttpResponse&lt;/code&gt; but that will be discussed in a separate article.&lt;/p&gt;
&lt;h2&gt;Handling many connections with fewer threads&lt;/h2&gt;
&lt;p&gt;By design, Akka HTTP does not need to hold a dedicated thread for each TCP connection. To see this in action, let me do some experiment. I used an HTTP benchmark client &lt;a href=&quot;https://github.com/wg/wrk&quot;&gt;wrk&lt;/a&gt;, which is known as a minimal and lightning fast HTTP benchmark client. I wanted to quickly and easily “hammer” Akka HTTP so chose wrk.&lt;/p&gt;
&lt;p&gt;I executed the following wrk command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ wrk -t6 -c1200  -d30s http://localhost:8080&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;which meant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-t6 : it uses 6 benchmark client threads&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-c1200: 1,200 open connections&lt;/code&gt; and&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;-d30s: runs benchmark for 30 seconds&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I chose 1200 connections because, by default, Akka HTTP accepts up to 1024 open TCP connections, and the limit can be configured by the &lt;code class=&quot;language-text&quot;&gt;akka.http.host-connection-pool.max-connections&lt;/code&gt; config value. 1200 is little more than the default max connections.&lt;/p&gt;
&lt;p&gt;The result is here, where I shortend the vide duration a bit from 30 seconds.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/wrk-test-2fad332d59bfe643cf05334cf6ce91c1.gif&quot; alt=&quot;wrk-test&quot;&gt;&lt;/p&gt;
&lt;p&gt;I forcefully inserted &lt;code class=&quot;language-text&quot;&gt;println&lt;/code&gt; so show the active TCP connections and it says it opened 1016, not 1024. This was due to some connections errors, and indeed errors were included in the below result. Maybe wrk was too fast (indeed, it is super fast!) and caused connection failure.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Running 30s test @ http://localhost:8080

  6 threads and 1200 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    20.42ms   10.49ms 484.06ms   95.94%
    Req/Sec     7.92k     1.57k   11.90k    91.37%

  1400416 requests in 30.04s, 205.67MB read
  Socket errors: connect 185, read 0, write 649, timeout 0

Requests/sec:  46619.78
Transfer/sec:      6.85MB&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Anyway, see the below screenshot of VisualVM. Main-akka.actor.default-dispatcher-XX are threads serving underlying actors for Akka HTTP. There were only about 30 threads, although the HTTP server had more than 1000 connections open at the time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/visual-vm-d53958439b5af189947957ff9b7e5de8.png&quot; alt=&quot;visual-vm.png&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Akka HTTP and Akka Stream integration? Working differently from what I originally thought]]></title><description><![CDATA[As I started writing  articles about Akka HTTP , I just wondered whether Akka HTTP integrates with Akka Stream like this - plug in my own…]]></description><link>https://richardimaoka.github.io/blog//akka-http-stream-integration/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//akka-http-stream-integration/</guid><pubDate>Mon, 23 Jul 2018 03:31:08 GMT</pubDate><content:encoded>&lt;p&gt;As I started writing &lt;a href=&quot;&quot;&gt;articles about Akka HTTP&lt;/a&gt;, I just wondered whether Akka HTTP integrates with Akka Stream like this - plug in my own &lt;code class=&quot;language-text&quot;&gt;Flow&lt;/code&gt; into the stream of Akka HTTP:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/wrong-assumption-c72a2fbada2eb0bd7d95fa611a6ebc0c.jpg&quot; alt=&quot;wrong-assumption&quot;&gt;&lt;/p&gt;
&lt;p&gt;After looking through the official doc, I found no section talking about integration like that, and in the end of long search in google, I encountered this &lt;a href=&quot;https://stackoverflow.com/questions/36294428/akka-http-complete-request-with-flow&quot;&gt;Stack Overflow entry&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;maybe the only way is to wire and materialize a new flow (upon each HttpRequest)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Really&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Really. It turned out that the Stack Overflow answer was correct - &lt;strong&gt;we cannot do what is in the above diagram&lt;/strong&gt;, as far as I checked, and I will explain why, in this article.&lt;/p&gt;
&lt;h2&gt;The requirement:&lt;/h2&gt;
&lt;p&gt;First of all, why did I want the integration in that way? What was the nice thing about it?&lt;/p&gt;
&lt;p&gt;The reason was this; We might have &lt;strong&gt;existing busines logic&lt;/strong&gt; implemented in Akka Stream, leveraging its nice features like throttling, logging, etc. &lt;/p&gt;
&lt;p&gt;Also implementing the business logic in Akka Stream gives you a declarative explanation of the logic.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Akka stream code as explanation of the steps&lt;/span&gt;
source
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;throttling&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;second&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//5 elements per second&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;externalService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;via&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;validateServiceResult&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;via&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformServiceResult&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reporMetricService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;databaseSink&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This is much easier to trace down to the actual processing step, see the relationship between two consecutive steps in the stream, &lt;strong&gt;compared to&lt;/strong&gt; debugging the business logic consisting of &lt;strong&gt;only Akka actors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;With those advantages of Akka Stream, I felt it’s natural to think of integration with Akka HTTP.&lt;/p&gt;
&lt;h3&gt;Why the integration doesn’t work in that way …&lt;/h3&gt;
&lt;p&gt;However, the integration as in the previous diagram does not work. By looking at the signature of the &lt;code class=&quot;language-text&quot;&gt;bindAndHandle&lt;/code&gt; method, which is to bring up an HTTP server instance, it becomes clearer. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; bindAndHandle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  handler&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;   Flow&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;HttpRequest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;  interface&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; port&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DefaultPortForProtocol&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  connectionContext&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ConnectionContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; defaultServerHttpContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  settings&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;          ServerSettings    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ServerSettings&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;system&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  log&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;               LoggingAdapter    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; fm&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Materializer
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ServerBinding&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The important part is the 2nd line, &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, HttpResponse, Any]&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Upon the start of an HTTP server, the &lt;code class=&quot;language-text&quot;&gt;bindAndHandle&lt;/code&gt; method takes this &lt;code class=&quot;language-text&quot;&gt;Flow&lt;/code&gt; as a parameter and this &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, HttpResponse, Any]&lt;/code&gt; is a single processing step which &lt;strong&gt;cannot be divided into two&lt;/strong&gt;, &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, T, _]&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Flow[U, HttpResponse, _]&lt;/code&gt;. So the diagram I pasted earlier was incorerct, and more accurate one is like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/more-precisejpg-170218accea1e43b74a5b37322b25320.jpg&quot; alt=&quot;more-precise&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Coming back to the requirement - did we really need that in the first place?&lt;/h2&gt;
&lt;p&gt;My seemingly simple idea, turned out to be impossible. So, there must be something I was missing - if this is a natural requirement most people would want, then Akka HTTP API must have already allowed this. However, no one seems to have complained about it, although Akka HTTP has been ther for few years and been already stable. This leads me to a conclusion that what I was thinking was not very useful.&lt;/p&gt;
&lt;p&gt;Let’s come back to the requirement then - do we really want to integrate Akka Stream, well more precisely, &lt;strong&gt;existing business logic as&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;Flow&lt;/code&gt; into Akka HTTP’s &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, HttpResponse, Any]&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Probably not&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;We can describe the business logic in plain Scala code, a chain of method executions, rather than Akka Stram.&lt;/p&gt;
&lt;p&gt;The first reason is why this is not needed is that, although I find Akka Stream’s DSL makes it easy to understand the whole chain of processing steps, it is &lt;strong&gt;only easier in comparison to a chain of Akka Actors&lt;/strong&gt;. When using plain Scala code, method invoking chains could be easier, or as easy as Akka Stream to read.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Akka stream code as explanation of the steps&lt;/span&gt;
source
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;throttling&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;second&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//5 elements per second&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;externalService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;via&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;validateServiceResult&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;via&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformServiceResult&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reporMetricService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;persistDatabaseSink&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// vs. plain method invocation chain, (e.g. using for comprehension)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; externalService&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; validateServiceResult&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; transformServiceResult&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; TransformedData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; reportMetricService&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; TransformedData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; persistDatabase&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; TransformedData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;TransformedData&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  data &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; externalService&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;validateServiceResult&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  transformed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; transformServiceResult&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  _ &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; reportMetricService&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  _ &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; persistDatabase&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;transformed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  log&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  transformed
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Another reason is that since &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_pipelining&quot;&gt;HTTP pipelining&lt;/a&gt; is generally &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/server-side/low-level-api.html#controlling-server-parallelism&quot;&gt;discouraged&lt;/a&gt;, &lt;code class=&quot;language-text&quot;&gt;Flow[HttpRequest, HttpResponse, Any]&lt;/code&gt; waits until the HTTP response is consumed, before processing the next HTTP request.
This would make many of flow-control operators like &lt;code class=&quot;language-text&quot;&gt;throttle&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;buffer&lt;/code&gt;, etc not needed. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/tcp-http-c12c2c403a96c9f005298166ef4c58d8.gif&quot; alt=&quot;tcp-http&quot;&gt;&lt;/p&gt;
&lt;p&gt;The third and the last reason I found was, although plugging in &lt;code class=&quot;language-text&quot;&gt;Flow&lt;/code&gt; is not possible, but plugging in &lt;code class=&quot;language-text&quot;&gt;Source&lt;/code&gt; is possible as described &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/routing-dsl/source-streaming-support.html#source-streaming&quot;&gt;here in the official doc&lt;/a&gt;. So there are ways to control the throughput of your stream &lt;strong&gt;in a single HTTP request/response roundtrip&lt;/strong&gt;, as long as we implement &lt;code class=&quot;language-text&quot;&gt;Source&lt;/code&gt; not &lt;code class=&quot;language-text&quot;&gt;Flow&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/source-streaming-0c26a76948eb07df6dcdde6108769bbb.gif&quot; alt=&quot;source-streaming&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here I’ve covered my findings about Akka HTTP and Akka Stream integration. Hope this is useful for people who were thinking about similar integration ideas like mine. Also let me know if anyone finds what I was missing to discuss in the article.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Akka HTTP Quickstart]]></title><description><![CDATA[Overview In this article, I am going to show how to: Run an Akka HTTP server, Convert to JSON from Scala case classes, Use Routing DSL. I…]]></description><link>https://richardimaoka.github.io/blog//akka-http-quickstart/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//akka-http-quickstart/</guid><pubDate>Sun, 15 Jul 2018 03:31:08 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this article, I am going to show how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run an Akka HTTP server,&lt;/li&gt;
&lt;li&gt;Convert to JSON from Scala case classes,&lt;/li&gt;
&lt;li&gt;Use Routing DSL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will set up a simple HTTP server step by step, which in the end works as follows. As you see below, we get different JSON returned dependent on the path.&lt;/p&gt;
&lt;img src=&quot;/blog/high-level-api-792c91bb20b6c2f1c281c0280dff73af.gif&quot; /&gt;
&lt;p&gt;I will go through the steps in a way you can &lt;strong&gt;quickly understand&lt;/strong&gt; the outcome from running the source code, and how it works, &lt;strong&gt;WITHOUT downloading and running the source code yourself.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;However, for those who want to go much deeper, the full code is available here, with instruction to run the examples.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/akka-http-quickstart&quot;&gt;Jump to the Git repository with an intruction to run the code&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Setting up a minimal application&lt;/h2&gt;
&lt;p&gt;In this section, we set up a pretty simple “Hello World” HTTP server. In the end, an Akka HTTP server can be started like below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http
Http&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bindAndHandle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;routes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/hello-world-54af7de2c758beb35a0e588cb6205572.gif&quot; alt=&quot;hello-world&quot;&gt;&lt;/p&gt;
&lt;p&gt;So, the &lt;code class=&quot;language-text&quot;&gt;bindAndHandle&lt;/code&gt; method is the method to fire up everything and start the HTTP server. Let’s see what is required to run this &lt;code class=&quot;language-text&quot;&gt;bindAndHandle&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Firstly, we should update &lt;a href=&quot;https://www.scala-sbt.org/1.x/docs/Library-Dependencies.html&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;libraryDependencies&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;https://github.com/richardimaoka/resources/blob/master/akka-http-quickstart/build.sbt&quot;&gt;build.sbt&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;libraryDependencies ++= Seq(
  &amp;quot;com.typesafe.akka&amp;quot; %% &amp;quot;akka-http&amp;quot;   % &amp;quot;10.1.3&amp;quot;,
  &amp;quot;com.typesafe.akka&amp;quot; %% &amp;quot;akka-stream&amp;quot; % &amp;quot;2.5.12&amp;quot;,
)&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and add a &lt;a href=&quot;https://www.scala-lang.org/documentation/your-first-lines-of-scala.html&quot;&gt;typical main &lt;code class=&quot;language-text&quot;&gt;object&lt;/code&gt;&lt;/a&gt;, as well as its main method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; MainHelloWorld &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; main&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ... application code goes here&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Inside the main method, we should start adding necessary building blocks to run the Akka HTTP server.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActorSystem
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActorMaterializer

&lt;span class=&quot;token comment&quot;&gt;// remember to make them implicit!!&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; system &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorSystem&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;token comment&quot;&gt;// for Akka Actor&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; materializer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorMaterializer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// for Akka Stream&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As a preparation, we instantiate &lt;code class=&quot;language-text&quot;&gt;ActorSystem&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ActorMaterializer&lt;/code&gt;. For people who are not familiar with &lt;code class=&quot;language-text&quot;&gt;ActorSystem&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ActorMaterializer&lt;/code&gt;, you can think of them as the underlying infrastructure for running Akka HTTP.&lt;/p&gt;
&lt;p&gt;Usually there is only one instance for each of them in an entire application. In this context, an “entire application” means an OS (e.g. Linux or Windows) process, or a JVM process.  Also we need to remember making &lt;code class=&quot;language-text&quot;&gt;ActorSystem&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ActorMaterializer&lt;/code&gt; &lt;strong&gt;implicit&lt;/strong&gt;, as other methods take implicit parameters of these types.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The below roughly illustrates the Akka technology stack cosisting of an Akka HTTP application.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/blog/akka-layers-4cee9958d09be096686ab2ca6cff3612.svg&quot; alt=&quot;akka-layers&quot; width=&quot;300px&quot;/&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Akka HTTP is on top of the other two layers&lt;/li&gt;
&lt;li&gt;Akka Stream (&lt;code class=&quot;language-text&quot;&gt;ActorMaterializer&lt;/code&gt;) handles internal processing of Akka HTTP&lt;/li&gt;
&lt;li&gt;Akka Actor (&lt;code class=&quot;language-text&quot;&gt;ActorSystem&lt;/code&gt;) is the base for running Akka Stream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my upcoming articles, we will see how these layers work with each other, and see why and how Akka HTTP is designed as a &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/implications-of-streaming-http-entity.html&quot;&gt;”&lt;strong&gt;streaming-first&lt;/strong&gt;” HTTP server&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The next thing to introduce is &lt;code class=&quot;language-text&quot;&gt;Route&lt;/code&gt;. &lt;code class=&quot;language-text&quot;&gt;Route&lt;/code&gt; in Akka HTTP defines the endpoint structure (or RESTful resource structure, we might say) of the HTTP server with &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/routing-dsl/index.html&quot;&gt;Route DSL&lt;/a&gt;. Again, we only touch the surface of it in this article, and go deeper in later articles.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// importing akka...Directives._ makes `get` and `complete` avaialable in scope&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Directives&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_ 
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Route

&lt;span class=&quot;token keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Route &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// `get` for HTTP GET method&lt;/span&gt;
  complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;routes&lt;/code&gt; in the above code returns &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/code&gt; for HTTP GET methods to any endpoint in the HTTP server. The &lt;code class=&quot;language-text&quot;&gt;complete&lt;/code&gt; method is what is typically used in Akka HTTP when we want to return an HTTP response to the client.&lt;/p&gt;
&lt;p&gt;Finally we can add the following code to bring up the HTTP server, like we saw at the begining of this section.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http
Http&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bindAndHandle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;routes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then run the server.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; sbt
&amp;gt; runMain com.example.MainHelloWorld

[info] Running com.example.Main
Server online at http://localhost:8080/&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And like we saw earlier in this section …&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/hello-world-54af7de2c758beb35a0e588cb6205572.gif&quot; alt=&quot;hello-world&quot;&gt;&lt;/p&gt;
&lt;p&gt;Boom! We said hello to the world!&lt;/p&gt;
&lt;h2&gt;High-level Routing DSL to construct HTTP endpoint structure (RESTful resource structure)&lt;/h2&gt;
&lt;p&gt;We will go a little deeper in how Route DSL works. It is still at a surface level of it, but hopefully this gives you a better idea about how to construct the endpoint structure with the DSL.&lt;/p&gt;
&lt;p&gt;Assuming we want to have the following endpoint structure,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;GET /users/person1
GET /users/person2
GET /users/person3&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;we can construct the route as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// importing akka...Directives._ makes `get`, `complete`, `path` avaialable&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Directives&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_ 
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Route

&lt;span class=&quot;token keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Route &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  pathPrefix&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;person1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;      get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&quot;Joh Don&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//don&apos;t forget `~`&lt;/span&gt;
&lt;/span&gt;    path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;person2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Justin Bieber&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;
    path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;person3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Peyton List&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now, we get three different responses dependent on the path.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/high-level-api-step1-3bd357ca49cce9b94a3269704f244dd3.gif&quot; alt=&quot;high-level-step1&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since we set up these three endpoints for the HTTP &lt;strong&gt;GET&lt;/strong&gt; method only,
doing (e.g.) POST will give us an error. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ curl -X POST -d &amp;#39;{&amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;}&amp;#39; http://localhost:8080/users/person1

// HTTP/1.1 405 Method Not Allowed
HTTP method not allowed, supported methods: GET&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Also, accessing a path which is not defined in the route will also result in an error.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ curl http://localhost:8080/users/nosuchperson

// HTTP/1.1 404 Not Found
The requested resource could not be found.&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In a separate article, we go over details about the Route DSL, and introduce how to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;support POST, PATCH, DELETE and even custom HTTP methods&lt;/li&gt;
&lt;li&gt;authenticate the user&lt;/li&gt;
&lt;li&gt;do more complicated stuff like CORS with plugins&lt;/li&gt;
&lt;li&gt;and lot more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;JSON to/from Scala case class conversion&lt;/h2&gt;
&lt;p&gt;Just returning plain &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt; values to user is nothing interesting.
Akka HTTP is well suited to API servers, and today’s API servers most commonly interchanges JSON with clients.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/high-level-api-792c91bb20b6c2f1c281c0280dff73af.gif&quot; alt=&quot;high-level&quot;&gt;&lt;/p&gt;
&lt;p&gt;In Akka HTTP, JSON support comes in a form of plugins, and &lt;a href=&quot;https://github.com/spray/spray-json&quot;&gt;spray-json&lt;/a&gt;
is one of the easiest JSON plugins to use, and also introduced in the official &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/common/json-support.html&quot;&gt;doc&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Scala case class to JSON - HTTP response&lt;/h3&gt;
&lt;p&gt;In this article, we cover only one path - Scala case class to JSON conversion. The other way around, from JSON to Scala case classes should be covered in a separate article, to limit the length of this quick-start article.&lt;/p&gt;
&lt;p&gt;To use spray-json, we need the following in &lt;code class=&quot;language-text&quot;&gt;libraryDependencies&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;libraryDependencies &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Seq&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;akka-http&quot;&lt;/span&gt;   &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10.1.3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;akka-stream&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2.5.12&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;com.typesafe.akka&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;akka-http-spray-json&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10.1.3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;io.spray&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;spray-json&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.3.4&quot;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And instead of returning a plain &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Joh Don&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;we can pass in a Scala case class to the &lt;code class=&quot;language-text&quot;&gt;complete&lt;/code&gt; method,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// `User` is a Scala case class&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Joh Don&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and it’s magically turned into JSON within the HTTP response body.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// &amp;lt;--------------- converted &amp;lt;----------------&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// JSON                 | //Scala case class&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;                       &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;  User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Joh Don&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;    name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Joh Don&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;            &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;    age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;                       &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So, what’s necessary to make this magic happen? We need some type class-based
implicit resolution done by spray-json in conjunction with Akka HTTP.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Understanding what’s happening &lt;strong&gt;inside&lt;/strong&gt; this &lt;a href=&quot;https://doc.akka.io/docs/akka-http/current/common/marshalling.html&quot;&gt;JSON to/from Scala case class conversion&lt;/a&gt; is really, really a difficult thing. I personally gave it up more than five times in the past, by going through the official documentation, read the source code and ended up just wasting time.&lt;/p&gt;
&lt;p&gt;However, to make the JSON to/from Scala case class conversion happen, fortunately Akka HTTP is desined so that we &lt;strong&gt;don’t need to&lt;/strong&gt; understand what’s happening inside. We just need to know what to &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; and what kind of &lt;code class=&quot;language-text&quot;&gt;implicit&lt;/code&gt; to define.&lt;/p&gt;
&lt;p&gt;If you are still interested in the internal workings, I’ll write other articles to help you. I hope my articles I will write work as supplemental materials to the official doc if you felt that is not very easy to understand, like I did before.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;From here we see how to make the conversion happen. After updating &lt;code class=&quot;language-text&quot;&gt;libraryDependencies&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;build.sbt&lt;/code&gt;, we should introduce the following case class.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This case class models the JSON in the HTTP response body, returned to the client. Then we add &lt;code class=&quot;language-text&quot;&gt;implicit&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;RootJsonFormat[User]&lt;/code&gt; which is typically placed in the companion object of the modeling case class.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//importing DefaultJsonProtocol._ makes `jsonFormat2` available&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DefaultJsonProtocol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_ 
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RootJsonFormat
&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; User &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// this will fit in the implicit resolution,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// enabling JSON/case class conversion&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; userJsonFormat&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; RootJsonFormat&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    jsonFormat2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apply&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;jsonFormat2&lt;/code&gt; is a convenient method which takes the &lt;code class=&quot;language-text&quot;&gt;apply&lt;/code&gt; method of a two-value case class, and return &lt;code class=&quot;language-text&quot;&gt;RootJsonFormat&lt;/code&gt;. By using &lt;code class=&quot;language-text&quot;&gt;jsonFormat2&lt;/code&gt;, we don’t need to implement field-by-field assignment manually like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// if we do not use a plugin like spray-json&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; json &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// this field-by-field translation&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// is NOT needed if we use `jsonFormat2`&lt;/span&gt;
  name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getField&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then on the &lt;code class=&quot;language-text&quot;&gt;Route&lt;/code&gt; side of the code, we need the following import and pass in a &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; instance to the &lt;code class=&quot;language-text&quot;&gt;complete&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marshallers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sprayjson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SprayJsonSupport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//this bring in implicit RootJsonFormat[User]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;User
&lt;/span&gt;
get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Joh Don&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Importing these two will bring all the necessary pieces of implicit resolution, which works like putting pieces into the puzzle, and &lt;code class=&quot;language-text&quot;&gt;User&lt;/code&gt; can now be converted to JSON.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/implicit-resolution-ed2b3779a41e22f8071c2c24413aee7d.jpg&quot; alt=&quot;implicit resolution&quot;&gt;&lt;/p&gt;
&lt;p&gt;We should do the same thing to the three paths we constructed before.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marshallers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sprayjson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SprayJsonSupport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Directives&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_ 
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Route
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;User

&lt;span class=&quot;token keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Route &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;users/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;person1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Joh Don&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;
    path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;person2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Justin Bieber&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;
    path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;person3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Peyton List&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And we can see this in action as follows.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; sbt
&amp;gt; runMain com.example.main.MainHighLevelAPI&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/high-level-api-complete-55cf956ed73ee75d743b703e7792cdb5.gif&quot; alt=&quot;high-level-api-complete&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Nested case class support by spray-json&lt;/h3&gt;
&lt;p&gt;Another convenient feature of spray-json is (although other JSON plugins also have similar fetures) that it supports conversion of nested Scala case classes. Suppose we have the following two case classes defined.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DefaultJsonProtocol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonFormat4
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RootJsonFormat

&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; Address&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  zip&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  street&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  city&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  state&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; Address &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// this will fit in the implicit resolution,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// enabling JSON/case class conversion&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; addressJsonFormat&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; RootJsonFormat&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Address&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    jsonFormat4&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Address&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apply&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DefaultJsonProtocol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jsonFormat3
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RootJsonFormat
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Address&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_ &lt;span class=&quot;token comment&quot;&gt;// implicit val addressJsonFormat&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; EnrichedUser&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;token builtin&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  address&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Address &lt;span class=&quot;token comment&quot;&gt;//nested case class&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; EnrichedUser &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// this will fit in the implicit resolution,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// enabling JSON/case class conversion&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; enrichedUserJsonFormat&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; RootJsonFormat&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;EnrichedUser&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    jsonFormat3&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apply&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And if we &lt;code class=&quot;language-text&quot;&gt;complete&lt;/code&gt; the route like below, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marshallers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sprayjson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SprayJsonSupport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;User

get &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    EnrichedUser&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;Richard Imaoka&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      Address&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        zip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1112222&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        street &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5-6-7 XYZ-street&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        city &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;New York&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;New York&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;we will get the following JSON.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Richard Imaoka&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;zip&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1112222&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;street&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;5-6-7 XYZ-street&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;city&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;New York&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;state&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;New York&quot;&lt;/span&gt;     
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This helps us model the JSON data with reusable and &lt;strong&gt;composable&lt;/strong&gt; Scala case classes, and will be useful when we are constructing a large JSON response.&lt;/p&gt;
&lt;h2&gt;Low-level API, needs understanding of HttpRequest and HttpResponse&lt;/h2&gt;
&lt;p&gt;Most of the cases we will be implementing our endpoint structure using the Route DSL.
However, for certain cases we would need more fine-grained, lower-level control on how to respond to a given HTTP request. With the low-level API, instead of Route DSL, we implement a request handler in&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HttpRequest =&amp;gt; HttpResponse&lt;/code&gt;, or &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HttpRequest =&amp;gt; Future[HttpResponse]&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;using pattern matches like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;HttpRequest&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; requestHandler&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HttpRequest &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; HttpResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; HttpRequest&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;That’s roughly how the low level API looks differently from the high level one, then we get into a bit of more detail about this below. Like the case of high level API, we need to instantiate &lt;code class=&quot;language-text&quot;&gt;ActorSystem&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ActorMaterializer&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActorSystem
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActorMaterializer

&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; system&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorSystem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorSystem&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; materializer&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorMaterializer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorMaterializer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And the detail of the pattern match is as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marshallers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sprayjson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SprayJsonSupport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marshalling&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Marshal
&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HttpMethods&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GET
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// for HttpRequest, HttpResponse, Uri&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_
&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;User
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ExecutionContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; ec&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ExecutionContext &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dispatcher
&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; requestHandler&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HttpRequest &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; HttpRequest&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    GET&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    Uri&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// matches any headers&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// matches any HTTP entity (HTTP body)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    _  &lt;span class=&quot;token comment&quot;&gt;// matches any HTTP protocol&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; m &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Marshal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Richard Imaoka&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    m&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;HttpResponse&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then we can run the HTTP server like before,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http

Http&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bindAndHandleAsync&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;requestHandler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and we get this result.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/low-level-api-ab0f421093d7a334cbaccbe40c4e3b36.png&quot; alt=&quot;low-level-api&quot;&gt;&lt;/p&gt;
&lt;h2&gt;The intention of this article&lt;/h2&gt;
&lt;p&gt;The content of this article might have felt boring to you, as there have already been many other articles covered the same stuff, and this is just like intro of introduction. &lt;/p&gt;
&lt;p&gt;However, I wrote this with a clear intention - I tried to make this article:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to see what happens upon running the code, without actually running it by hand&lt;/li&gt;
&lt;li&gt;Illustrate how it feels on writing Akka HTTP code, rather than explaining all the technical details&lt;/li&gt;
&lt;li&gt;but still not leaving readers in a gap, awkward jump in the context&lt;/li&gt;
&lt;li&gt;Have concise text, not talking endlessly about something readers are not interested&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Our first "regular" OSS Hackathon was held on May 27th, 2018]]></title><description><![CDATA[We started doing OSS Hackathon regularly The last Sunday was a pretty exciting day for me! We started a new community to run OSS Hackathon…]]></description><link>https://richardimaoka.github.io/blog//oss-hackathon-1/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//oss-hackathon-1/</guid><pubDate>Thu, 31 May 2018 16:31:08 GMT</pubDate><content:encoded>&lt;h2&gt;We started doing OSS Hackathon regularly&lt;/h2&gt;
&lt;p&gt;The last Sunday was a pretty exciting day for me!&lt;/p&gt;
&lt;p&gt;We started a new community to run OSS Hackathon events regularly in Tokyo, Japan.
And the last Sunday, May 27th was the first occurrence of the hackathon events.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/20180527231509-ca114cdb1c349edc49756f924c8443cb.jpg&quot; alt=&quot;20180527231509&quot;&gt;
&lt;img src=&quot;/blog/20180527231537-e603fc486dc97f3820c757ff9cd3b596.jpg&quot; alt=&quot;20180527231537&quot;&gt;&lt;/p&gt;
&lt;p&gt;On that day, a small group of eight attendees and three OSS maintainers worked on their favorite OSS projects,
and the attendees tried to contribute to the OSS projects with help from the maintainers. The maintainers who helped the hackathon were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/ko_noike&quot;&gt;@ko_noike&lt;/a&gt;, a &lt;a href=&quot;https://github.com/gitbucket/gitbucket&quot;&gt;GitBucket&lt;/a&gt; maintainer&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/seratch&quot;&gt;@seratch&lt;/a&gt;, the creator of &lt;a href=&quot;https://github.com/scalikejdbc&quot;&gt;ScalikeJDBC&lt;/a&gt; and &lt;a href=&quot;https://github.com/skinny-framework&quot;&gt;SkinnyFramework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/xuwei_k&quot;&gt;@xuwei-k&lt;/a&gt;, maintainer of &lt;a href=&quot;https://github.com/scalaz&quot;&gt;Scalaz&lt;/a&gt;, &lt;a href=&quot;https://github.com/argonaut-io&quot;&gt;argonaut-io&lt;/a&gt;, &lt;a href=&quot;https://github.com/scalikejdbc&quot;&gt;ScalikeJDBC&lt;/a&gt;, @&lt;a href=&quot;https://github.com/unfiltered&quot;&gt;unfiltered&lt;/a&gt;, etc and creator of &lt;a href=&quot;https://github.com/scalaprops&quot;&gt;scalaprops&lt;/a&gt;, &lt;a href=&quot;https://github.com/msgpack4z&quot;&gt;msgpack4z projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;where &lt;a href=&quot;https://twitter.com/seratch&quot;&gt;@seratch&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/xuwei_k&quot;&gt;@xuwei-k&lt;/a&gt; joined remotely via Slack. Special thanks to the maintainers!!&lt;/p&gt;
&lt;h2&gt;The OSS Hackathon community was born out of ScalaMatsuri&lt;/h2&gt;
&lt;p&gt;Actually we held a &lt;a href=&quot;https://jsa.connpass.com/event/79409/&quot;&gt;similar hackathon event in the past as part of ScalaMatsuri 2018&lt;/a&gt;,
and received a great deal of positive feedback was from the attendees and the OSS maintainers.&lt;/p&gt;
&lt;p&gt;After ScalaMatsuri OSS Hackathon, there were several people who showed interest in running such OSS Hackathon events in a monthly or bi-monthly basis,
and we we decided to form up the new community focused on this effort.&lt;/p&gt;
&lt;h2&gt;The outcome of the event&lt;/h2&gt;
&lt;p&gt;During this four-hour long hackathon, three attendees opened pull requests, and few more were close to create pull requests.
I think they would be able to finish the pull requests on a later day.&lt;/p&gt;
&lt;p&gt;Some feedback from the attendees were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Appreciate quick help from the OSS maintainers&lt;/li&gt;
&lt;li&gt;It would have been even better if there was more introduction in advance about basics in how to contribute to OSS, how to pick issues, etc&lt;/li&gt;
&lt;li&gt;Interesting to find that each OSS project has different culture and policies in test requirements, code reviews, etc&lt;/li&gt;
&lt;li&gt;I worked on a seemingly-easy issue but it turned out difficult and tedious!&lt;/li&gt;
&lt;li&gt;Good opportunity to get focused on just for contribution, for four hours long&lt;/li&gt;
&lt;li&gt;Advice on writing pull request description was useful&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the feedback in mind, we’ll keep making this hackathon smoother and easier for attendees to contribute.&lt;/p&gt;
&lt;p&gt;Oh by the way below are lovely pictures taken during the break time in the event.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;たこやきを囲むハッカソン &lt;a href=&quot;https://twitter.com/hashtag/osshackathon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#osshackathon&lt;/a&gt; &lt;a href=&quot;https://t.co/IXNP0T84HF&quot;&gt;pic.twitter.com/IXNP0T84HF&lt;/a&gt;&lt;/p&gt;&amp;mdash; リチャード　伊真岡 (@RichardImaokaJP) &lt;a href=&quot;https://twitter.com/RichardImaokaJP/status/1000640600364924928?ref_src=twsrc%5Etfw&quot;&gt;May 27, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Slack workspace is avaialble - OSS maintainer’s participation is highly welcome !!&lt;/h2&gt;
&lt;p&gt;Not only holding hackathon , we also opened a Slack workspace so that people can ask questions or consult with maintainers anytime,
and even help each other, like what issue to tackle in a certain OSS project, when they get stuck, etc. &lt;a href=&quot;https://join.slack.com/t/osshackathon/shared_invite/enQtMzYwMTIxODQ1Mzk1LWY0Mjk4YWI3MDY4NTQ4NTI3MGQ2M2I3ZTgzY2QzOGRjOTg5YTFlYWU1MGU3MTRmODFkM2IyZGQxNGZlNzlkOTM&quot;&gt;Anyone can join the Slack workspace from this link&lt;/a&gt;,
and especially participation from OSS maintainers are highly appreciated.&lt;/p&gt;
&lt;p&gt;Since the community is started from Tokyo, Japan, currently people communicate in Japanese most of the time.
However, many of us can speak and write English, so please just say hi when you join the workspace,
and we can use English whenever we talk to people who don’t use Japanese.&lt;/p&gt;
&lt;p&gt;To involve more OSS maintainers and attendees, I believe we have to offer benefits to both of them.
For OSS maintainers, the main benefit we can provide is to attract more aspiring contributors and add more activities to their OSS projects.
For attendees, we should give as many opportunities as possible to communicate and work with OSS maintainers so that the bar to OSS contribution is lowered.&lt;/p&gt;
&lt;p&gt;We are still in a very early phase of the community and exploring all the possibilities
to make the community grow, make the collaboration easier with OSS maintainers overseas.
For example, we might hold a hackathon in more friendly hours for Europe, US or any other part of the world where OSS maintainers live.
Also we are seeking the best way for remote communication - for now we use Slack but we might encounter a better tool, or a combination different tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/timeshift-a02e407c7c8e0528f998c417c288702c.jpg&quot; alt=&quot;timeshift&quot;&gt;&lt;/p&gt;
&lt;p&gt;Probably for communication with maintainers overseas, we don’t need to do that synchronously - if that make things easier for the maintainers,
we don’t need the maintainers to be available during the hackathon hours, but the attendees will only communicate with them before and after the hackathon.&lt;/p&gt;
&lt;h2&gt;The next hackathon …&lt;/h2&gt;
&lt;p&gt;We are planning the next hackathon event in Tokyo some time at the end of June, yet to be decided.
For now it’ll most likely be held in a similar format to the first one on May 27th,
but we might change the format to attract maintainers in other countries.&lt;/p&gt;
&lt;p&gt;If any of you are interested in this continuous effort, please join &lt;a href=&quot;https://join.slack.com/t/osshackathon/shared_invite/enQtMzYwMTIxODQ1Mzk1LWY0Mjk4YWI3MDY4NTQ4NTI3MGQ2M2I3ZTgzY2QzOGRjOTg5YTFlYWU1MGU3MTRmODFkM2IyZGQxNGZlNzlkOTM&quot;&gt;our Slack workspace&lt;/a&gt;, or just let me know!!
You can talk to me on &lt;a href=&quot;https://twitter.com/richardimaoka&quot;&gt;Twitter&lt;/a&gt; by replying to me, or via Twitter DM as I can receive it from anyone on Twitter.&lt;/p&gt;
&lt;p&gt;Cheers!
Richard&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Locally Benchmarking Akka HTTP with akka-persistence-cassandra]]></title><description><![CDATA[Overview Although what I tried here does not give realistic or useful results, this is another step forward in my experiment to set up…]]></description><link>https://richardimaoka.github.io/blog//benchmarking-akka-http-cassandra-local/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//benchmarking-akka-http-cassandra-local/</guid><pubDate>Sun, 11 Mar 2018 21:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Although what I tried here does not give realistic or useful results, this is another step forward in my experiment to set up benchmarking environment for Akka and Akka HTTP. I am going to add persistence to Cassandra to the system, to see how the benchmark figures are affected.&lt;/p&gt;
&lt;p&gt;The source code is available &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/akka-http-cassandra&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;In the previous article, &lt;a href=&quot;../hello-world-http-bench/&quot;&gt;Benchmarking Spray and Akka HTTP Hello World servers&lt;/a&gt;, the web server just returned the constant response. Here I am comparing three different types of web servers.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Akka HTTP server with JSON marshalling/unmarshalling&lt;/li&gt;
&lt;li&gt;Akka HTTP server with JSON marshalling/unmarshalling, and in-memory persistence&lt;/li&gt;
&lt;li&gt;Akka HTTP server with JSON marshalling/unmarshalling, and akka-persistence-cassandra&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Like explained in the previous article, the 1st attempt in benchmarking could be affected by incomplete JIT compliation. So I only show results from the 2nd and 3rd attempts here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/result-throughput-3544dab712b097d012ff0e9a0bdcd1c2.png&quot; alt=&quot;result-throughput&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Attempt&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;1. JSON&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2. In-Memory&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3. Cassandra&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2nd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;52,196 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;27,507 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;992 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3rd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;48,293 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;30,746 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1,122 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Comparing the throughput, obviously adding Cassandra and &lt;strong&gt;wait the HTTP response until Cassandra persistence is done&lt;/strong&gt; makes the performance order of magnitude going down, and the CPU usage for 3 were around 40% although that of 1 and 2 topped at 100% like the prevoius article. (i.e.) The bottleneck is shifted to database I/O from CPU resource competition between the web client and server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/task-manager-cassandra-28eacb07076bda4e4e3e719c9ea2bbd4.png&quot; alt=&quot;task-manager-cassandra&quot;&gt;&lt;/p&gt;
&lt;p&gt;The below is the comparison of average latency,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/result-avg-e50ee60c1c8f0bb8139a305139f4fee7.png&quot; alt=&quot;result-avg&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Attempt&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;1. JSON&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2. In-Memory&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3. Cassandra&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2nd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2.17 millisec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2.41 millisec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;101.55 millisec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3rd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2.16 millisec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2.10 millisec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;88.92 millisec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;and the max latency.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/result-max-f3d8c0283cbc8fde4f269ae52a69683d.png&quot; alt=&quot;result-max&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Attempt&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;1. JSON&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;2. In-Memory&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;3. Cassandra&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2nd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;321.87 millisec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;452.84 millisec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;335.73 millisec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3rd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;267.60 millisec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;119.31 millisec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;199.44 millisec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;From here, let’s see how I set up the servers for 1, 2 and 3.&lt;/p&gt;
&lt;h2&gt;1. JSON marshalling/unmarshalling&lt;/h2&gt;
&lt;p&gt;I am not going in detail, but JSON marshalling is converting a Scala case class instance to JSON payload, and unmarshalling is the opposite.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/json-marshalling-f0d34e54e0382932b6cdb0928eba76fe.jpg&quot; alt=&quot;json-marshalling&quot;&gt;&lt;/p&gt;
&lt;p&gt;This HttpServer does simple stuff, to sum up all the &lt;code class=&quot;language-text&quot;&gt;&amp;quot;score&amp;quot;&lt;/code&gt; sent in HTTP responses, and return the current total, average and number of trials (number of HTTP requests) so far.&lt;/p&gt;
&lt;p&gt;Let’s define case classes to marshall to/unmarshall from JSON:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//JSON request {&quot;score&quot;: 10} can be unmarshalled to this&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; ScoringRequest&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  score&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//This case class can be marshalled to JSON response {&quot;averageScore&quot;: ... }&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; ScoreResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  averageScore&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  totalScore&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  numberOfTrials&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Long&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;To enable marshlling and unmarshalling, I used &lt;code class=&quot;language-text&quot;&gt;SprayJsonSupport&lt;/code&gt; as follows: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marshallers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sprayjson&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SprayJsonSupport
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DefaultJsonProtocol

&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; ScoringJsonSupport &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; DefaultJsonProtocol &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; SprayJsonSupport &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; scoringRequestFormat &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jsonFormat1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ScoringRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; scoreResponseFormat &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jsonFormat3&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ScoreResponse&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And the route becomes like this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ScoringJsonSupport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Route &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;scoring&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    post &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      entity&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;as&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ScoringRequest&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; request &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
        updateState&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        complete &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          ScoreResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;averageScore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; totalScore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numberOfTrials&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;For those who are intersted, &lt;a href=&quot;https://github.com/richardimaoka/resources/blob/master/akka-http-cassandra/src/main/scala/example/HttpNoPersistentServer.scala&quot;&gt;the full HttpServer code&lt;/a&gt; is as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;PrintWriter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; StringWriter&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActorSystem
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Directives&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Route&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActorMaterializer
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Timeout

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Await
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_

&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; HttpNoPersistentServer &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; Directives &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; main&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ScoringJsonSupport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_

    &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; system&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorSystem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorSystem&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HttpNoPersistentServer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; materializer&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorMaterializer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorMaterializer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; timeout&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.&lt;/span&gt;seconds

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; averageScore&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; totalScore&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; numberOfTrials&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; updateState&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      totalScore &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; totalScore &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; score
      numberOfTrials &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numberOfTrials &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
      averageScore &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; totalScore &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; numberOfTrials
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Route &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
        path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;scoring&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          post &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            entity&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;as&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ScoringRequest&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; request &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
              updateState&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              complete &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                ScoreResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;averageScore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; totalScore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; numberOfTrials&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      Http&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bindAndHandle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;routes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8095&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token string&quot;&gt;&quot;Server online at http://localhost:8095/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      Await&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;whenTerminated&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Duration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Inf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; t&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Throwable &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; sw &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; StringWriter
        t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;printStackTrace&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; PrintWriter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sw&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getMessage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sw&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wg/wrk/issues/267&quot;&gt;To send a JSON request by wrk&lt;/a&gt;, you need to write a lua script like this: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;wrk.method = &amp;quot;POST&amp;quot;
wrk.body   = &amp;#39;{&amp;quot;score&amp;quot;: 10}&amp;#39;
wrk.headers[&amp;quot;Content-Type&amp;quot;] = &amp;quot;application/json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;I saved it as &lt;code class=&quot;language-text&quot;&gt;wrk-script.lua&lt;/code&gt;, and ran the following command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ wrk -t2 -c100 -d30s  -s wrk-script.lua http://localhost:8095/scoring&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The results were already pasted at the beginning of this article.&lt;/p&gt;
&lt;h2&gt;2. In-Memory persistence&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/in-memory-f620aaeb90877b05fd3d23a9ac44a0a8.jpg&quot; alt=&quot;in-memory&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now I’m adding persistence to the system, but before doing it with Cassandra, I’m using in-memory persistence. The persistent actor code is as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; ScoringActor &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; PersistentActor &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ScoringActor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_

  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; averageScore&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; totalScore&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; numberOfTrials&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; persistenceId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;scoring&quot;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; updateState&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    totalScore &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; totalScore &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; score
    numberOfTrials &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numberOfTrials &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    averageScore &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; totalScore &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; numberOfTrials
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receiveCommand &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; ScoringCommand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; _sender &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sender&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      persist&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ScoringEvent&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        evt &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; updateState&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;evt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          _sender &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; ScoreResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            averageScore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            totalScore&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            numberOfTrials
          &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receiveRecover &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; evt&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ScoringEvent &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
      updateState&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;evt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; ScoringActor &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; ScoringCommand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; ScoringEvent&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;score&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The HttpServer code needs to instantiate the persistent actor (&lt;code class=&quot;language-text&quot;&gt;ScoringActor&lt;/code&gt;) and do &lt;code class=&quot;language-text&quot;&gt;scoringActor ? ScoringCommand(request.score)&lt;/code&gt; to perform persistence.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ScoringJsonSupport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_

&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; system&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorSystem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorSystem&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HttpPersistentServer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; materializer&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorMaterializer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorMaterializer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; scoringActor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actorOf&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Props&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ScoringActor&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;scoring&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; timeout&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.&lt;/span&gt;seconds

&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Route &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;scoring&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    post &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      entity&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;as&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ScoringRequest&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; request &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
        complete &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scoringActor &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; ScoringCommand&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;score&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mapTo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ScoreResponse&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;    &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;here is &lt;code class=&quot;language-text&quot;&gt;application.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;akka {
  loggers = [&amp;quot;akka.event.slf4j.Slf4jLogger&amp;quot;]

  persistence {
    journal {
      plugin = &amp;quot;akka.persistence.journal.inmem&amp;quot;
    }
    snapshot-store {
      plugin = &amp;quot;akka.persistence.snapshot-store.local&amp;quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As in the results we saw earlier, it became slower than 1. JSON marshalling/unmarshalling, because there is communication between the server and the persistent actor. However, the persistent &lt;strong&gt;actor&lt;/strong&gt; itself is still lightweight, compared to the actual persistence to Cassandra which I’ll explain next.&lt;/p&gt;
&lt;h2&gt;3. Persistence to Cassandra&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/cassandra-8529bc064b866354443cb375e34bc1f6.jpg&quot; alt=&quot;cassandra&quot;&gt;&lt;/p&gt;
&lt;p&gt;Finally we do real persistence. application.conf becomes this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;akka {
  loggers = [&amp;quot;akka.event.slf4j.Slf4jLogger&amp;quot;]

  persistence {
    journal {
      plugin = &amp;quot;cassandra-journal&amp;quot;
    }
    snapshot-store {
      plugin = &amp;quot;cassandra-snapshot-store&amp;quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;And you would also need this logback.xml otherwise the log is filled up by a lot of DEBUG level messages from the Cassandra library.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;amp;ltconfiguration&amp;amp;gt
    &amp;amp;ltappender name=&amp;quot;STDOUT&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;amp;gt
        &amp;amp;lt!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&amp;amp;gt
        &amp;amp;ltencoder&amp;amp;gt
            &amp;amp;ltpattern&amp;amp;gt%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;amp;lt/pattern&amp;amp;gt
        &amp;amp;lt/encoder&amp;amp;gt
    &amp;amp;lt/appender&amp;amp;gt

    &amp;amp;ltlogger name=&amp;quot;com.datastax.driver.core.Connection&amp;quot;  level=&amp;quot;WARN&amp;quot; additivity=&amp;quot;false&amp;quot; /&amp;amp;gt
    &amp;amp;ltlogger name=&amp;quot;com.datastax.driver&amp;quot;                  level=&amp;quot;WARN&amp;quot; additivity=&amp;quot;false&amp;quot; /&amp;amp;gt

    &amp;amp;ltroot level=&amp;quot;INFO&amp;quot;&amp;amp;gt
        &amp;amp;ltappender-ref ref=&amp;quot;STDOUT&amp;quot; /&amp;amp;gt
    &amp;amp;lt/root&amp;amp;gt
&amp;amp;lt/configuration&amp;amp;gt&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;No need to change the Scala code.&lt;/p&gt;
&lt;h2&gt;Lessons learned&lt;/h2&gt;
&lt;p&gt;Even before conducting the benchmark, we could have guessed that Cassandra would be the bottleneck of the system, as database I/O is typically the performance bottleneck of a web applicaiton system.&lt;/p&gt;
&lt;p&gt;However, &lt;strong&gt;to know how much the difference is&lt;/strong&gt;, experiment is necessary. So I went through the process on how to distinguish the performance overhead of a single component from all the other , and you can apply the same technique to analyze any component in your system.&lt;/p&gt;
&lt;p&gt;Next step, I want to dockerize this performance experiment environment so that we can run it in the cloud. Also later on I want to Kubernet-ize this and hopefully the deployment and running of the performance test is just a breeze!!&lt;/p&gt;
&lt;p&gt;It’s getting interesting to me :)&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Marshalling and Unmarshalling in Akka HTTP at - &lt;a href=&quot;https://doc.akka.io/docs/akka-http/2.5/common/marshalling.html#marshalling&quot;&gt;https://doc.akka.io/docs/akka-http/2.5/common/marshalling.html#marshalling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Persistent actor at - &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/persistence.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/persistence.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;akka-cassandra at &lt;a href=&quot;https://github.com/akka/akka-persistence-cassandra&quot;&gt;https://github.com/akka/akka-persistence-cassandra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Survey on Swagger with Akka HTTP]]></title><description><![CDATA[Overview TL;DR)  You can use Swagger with Akka HTTP and get some benefit from Swagger, but the workflow is not fully automated with existing…]]></description><link>https://richardimaoka.github.io/blog//swagger-akka-http/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//swagger-akka-http/</guid><pubDate>Sat, 10 Mar 2018 16:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TL;DR)&lt;/strong&gt; You can use Swagger with Akka HTTP and get some benefit from Swagger, but the workflow is not fully automated with existing tools.&lt;/p&gt;
&lt;p&gt;Recently I did some personal survey on how Swagger can be integrated with Akka HTTP. Before the survey, I was expeciting automation just works like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Swagger spec file can generate Akka HTTP server code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;or &lt;code class=&quot;language-text&quot;&gt;@Annotations&lt;/code&gt; in the server code generate the Swagger specification&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;but there are limitations to both 1) and 2), which I will explain later in the article.&lt;/p&gt;
&lt;h2&gt;Top-down and bottom-up approaches&lt;/h2&gt;
&lt;p&gt;Let me firstly introduce so-called top-down and bottom-up approaches in terms of how to use Swagger, which is also explained in the official &lt;a href=&quot;https://swagger.io/getting-started/&quot;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A top-down approach where you would use the Swagger Editor to create your Swagger definition and then use the integrated Swagger Codegen tools to generate server implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A bottom-up approach where you have an existing REST API for which you want to create a Swagger definition&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://editor.swagger.io/&quot;&gt;Swagger Editor&lt;/a&gt; is a browser based tool for editing the swagger specification file in json or yaml. For &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen&quot;&gt;Swagger codegen&lt;/a&gt;, it already officially supports a bunch of languages and frameworks,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/swagger-codegen-support-2007b8af3c0adcf09ab7c7b904f615ed.png&quot; alt=&quot;swagger-codege-support&quot;&gt;&lt;/p&gt;
&lt;p&gt; and also a lot of community plugins available for other frameworks.&lt;/p&gt;
&lt;h3&gt;When to use which approach?&lt;/h3&gt;
&lt;p&gt;The top-down approach is suitable when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you have an automatic tool to generate the server-side code&lt;/li&gt;
&lt;li&gt;or you are developing a brand new API-based service, and the client wants to start development without waiting for the server side implementation ready&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When talking about automatic generation of the server side implementation, tools usually don’t produce fully detailed implementation, but they generates interfaces (in Scala, it would be traits) which you can extend to hook up detailed behaivor implementation in a later phase.&lt;/p&gt;
&lt;p&gt;On the other hand, the bottom-up approach would be suitable when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a Swagger spec-gen tool is avaialble from the server side code&lt;/li&gt;
&lt;li&gt;or you already have the server side implementation, and want to start using Swagger for better API management, and leverage the Swagger toolset&lt;/li&gt;
&lt;li&gt;even for a brand new API service, if you can quickly write up a server mock to generate the Swagger spec file, or manually write down Swagger spec until the server impelentation is ready, bottom-up is useful&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In both cases, the automated server-code or spec-file generation tool is very important, to make sure there is only one source of truth and the other generated side is compliant with the original. If the automated tool is not avaialble, no matter whether it is for the top-down or bottom-up approach, you need a lot more effort to make sure the server implementation is compliant with the API. &lt;/p&gt;
&lt;p&gt;Probably you can leverage the swagger specification file to generate automated test cases, which helps you to make sure the specification and the server implementatin are in sync, but it is still much better to have an auto-gen tool for either the spec file or the server implementation.&lt;/p&gt;
&lt;h2&gt;The current status of Akka HTTP and Swagger integration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/swagger-akka-http/swagger-akka-http&quot;&gt;swagger-akka-http&lt;/a&gt; already exists and this is for the bottom-up approach, which will generate the specification from &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;s in the Akka HTTP server-side code.&lt;/p&gt;
&lt;p&gt;No top-down auto-generation tool is avaialble for Akka HTTP, or at least no such tool is widely used.&lt;/p&gt;
&lt;p&gt;To see how swagger-akka-http works, I did some experiment - I tried to generate the same specification as &lt;a href=&quot;http://petstore.swagger.io/&quot;&gt;the official Swagger PetStore sample&lt;/a&gt; from the server &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;. Looking at the sample, the top section of the spec can be generated by the following &lt;code class=&quot;language-text&quot;&gt;SwaggerDocService&lt;/code&gt; implementation.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;swagger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SwaggerHttpService
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; com&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;github&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;swagger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; example&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;endpoints&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PetEndPoint
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;swagger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ExternalDocs
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;swagger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;models&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;auth&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;ApiKeyAuthDefinition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; In&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; OAuth2Definition&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; SwaggerDocService &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; SwaggerHttpService &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; apiClasses &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Set&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;classOf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PetEndPoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; host &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost:9999&quot;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; basePath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;v2&quot;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; info &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Info&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    version &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    description &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&quot;This is a sample server Petstore server.  You can find out more about
        |Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
        |For this sample, you can use the api key `special-key` to test the authorization filters.&quot;
      &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stripMargin&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Swagger Petstore&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    termsOfService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://swagger.io/terms/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    contact &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Contact&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;apiteam@swagger.io&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    license &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;License&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Apache 2.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://www.apache.org/licenses/LICENSE-2.0.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; externalDocs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; ExternalDocs&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Core Docs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://acme.com/docs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; oAuth2Definition &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; OAuth2Definition&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scope&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;write:pets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;modify pets in your account&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scope&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;read:pets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;read your pets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  oAuth2Definition&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setAuthorizationUrl&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://petstore.swagger.io/oauth/dialog&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  oAuth2Definition&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setFlow&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;implicit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; securitySchemeDefinitions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Map&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;petsotre_auth&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; oAuth2Definition&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;api_key&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; ApiKeyAuthDefinition&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;api_key&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; In&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HEADER&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; unwantedDefinitions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Seq&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Function1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Function1RequestContextFutureRouteResult&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Interestingly, in swagger-akka-http, you extend this &lt;code class=&quot;language-text&quot;&gt;SwaggerHttpService&lt;/code&gt; to supply application-wide information, instead of using &lt;a href=&quot;https://github.com/swagger-api/swagger-core/wiki/annotations-1.5.x#swaggerdefinition&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@SwaggerDefinition&lt;/code&gt;&lt;/a&gt; annotation like other Java frameworks.&lt;/p&gt;
&lt;p&gt;The generated schema is this (I will explain how to generate the spec later): &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;swagger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2.0&quot;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &quot;This is a sample server Petstore server.  You can find out more about\r\
    \nSwagger at &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//swagger.io&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;(http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//swagger.io) or on &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;irc.freenode.net&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#swagger](http://swagger.io/irc/).\r\&lt;/span&gt;
    \nFor this sample&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; you can use the api key `special&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;key` to test the authorization\
    \ filters.\&quot;\r\n      &quot;
  &lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Swagger Petstore&quot;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;termsOfService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://swagger.io/terms/&quot;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;apiteam@swagger.io&quot;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Apache 2.0&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://www.apache.org/licenses/LICENSE-2.0.html&quot;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost:9939&quot;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;basePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/v2&quot;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pet&quot;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;schemes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;which is (almost) same as that of &lt;a href=&quot;https://editor.swagger.io/&quot;&gt;the Petstore sample&lt;/a&gt; I modeled after. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/Swagger-Editor-top-a2fd782f8ad497ebbaea89130d00e889.png&quot; alt=&quot;Sawgger-Editor-top&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, look at the &lt;code class=&quot;language-text&quot;&gt;pet&lt;/code&gt; endpoint. This is how the sample PetStore specification looks when you load it in Swagger Editor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/Swagger-Editor-pet-d26ec67ac1ceac1eea450f034c10995b.png&quot; alt=&quot;Sawgger-Editor-pet&quot;&gt;&lt;/p&gt;
&lt;p&gt;To get the same spec as above, you need these annotations to be added at the class or trait level to give information across different HTTP methods, &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;GET&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;PUT&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;PATCH&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;DELETE&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Api&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/pet&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//tags in endpoint&lt;/span&gt;
  consumes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/json, application/xml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  produces &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/json, application/xml&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/pet&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; PetEndPoint &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; Directives &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; DefaultJsonFormats &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and for each HTTP method, you typically add a method in the trait like this … ugh it is really a lot of verbose &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;’s to explain this single HTTP &lt;code class=&quot;language-text&quot;&gt;POST&lt;/code&gt; method!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;  &lt;span class=&quot;token annotation punctuation&quot;&gt;@ApiOperation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Add a new pet to the store&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    nickname &lt;span class=&quot;token comment&quot;&gt;/*operationId*/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;addPet&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    httpMethod &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; classOf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Pet&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    authorizations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; Authorization&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;petstore_auth&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scopes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; AuthorizationScope&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scope &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;write:pets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; description &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; AuthorizationScope&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scope &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;read:pets&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  description &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token annotation punctuation&quot;&gt;@ApiImplicitParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; ApiImplicitParam&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      paramType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Pet object that needs to be added to the store&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      required &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      dataTypeClass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; classOf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Pet&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token annotation punctuation&quot;&gt;@ApiResponses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; ApiResponse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;405&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Invalid Input&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; addPet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
      post &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//stub implementation&lt;/span&gt;
        complete &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pet&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;With these many annotations, you get the (almost) same specification as the sample, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;paths:
  /pet:
    post:
      tags:
      - &amp;quot;pet&amp;quot;
      summary: &amp;quot;Add a new pet to the store&amp;quot;
      description: &amp;quot;&amp;quot;
      operationId: &amp;quot;addPet&amp;quot;
      consumes:
      - &amp;quot;application/json&amp;quot;
      - &amp;quot;application/xml&amp;quot;
      produces:
      - &amp;quot;application/json&amp;quot;
      - &amp;quot;application/xml&amp;quot;
      parameters:
      - in: &amp;quot;body&amp;quot;
        name: &amp;quot;body&amp;quot;
        description: &amp;quot;Pet object that needs to be added to the store&amp;quot;
        required: true
        schema:
          $ref: &amp;quot;#/definitions/Pet&amp;quot;
      responses:
        200:
          description: &amp;quot;successful operation&amp;quot;
          schema:
            $ref: &amp;quot;#/definitions/Pet&amp;quot;
        405:
          description: &amp;quot;Invalid Input&amp;quot;
      security:
      - petstore_auth:
        - &amp;quot;write:pets&amp;quot;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;but you need to repeat the same &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt; for all available HTTP methods, multiplied by the number of endpoints. In the sample applicatoin, there are endpoints, &lt;code class=&quot;language-text&quot;&gt;/pet&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;/pet/{petID}&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;/store&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;/store/inventory&lt;/code&gt;, …&lt;/p&gt;
&lt;p&gt;Is there a way to avoid it? Unfortunately, even for repetitive &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;s, you cannot do like below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;val reuseParam1 = @ApiImplicitParam //or 
val reuseParam2 = new ApiImplicitParam

@ApiImplicitParams(Array(reuseParam))
def ...&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;because you get a Scala compilation error saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Error] annotation argument needs to be a constant&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To be honest, I felt like writing up the specification directly in json or yaml would have been easier…&lt;/p&gt;
&lt;p&gt;Another thing I expected to just work fine earlier, but not avaialble at the moment is that those Swagger &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;’s compilation errors do not detect almost any type of mismatch in the specification (&lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;) and the implementation (e.g. parameters and their types). So again, it’s all your manual effort to make sure your server implementation is compliant with the specification.&lt;/p&gt;
&lt;p&gt;Now, let’s talk about how to generate the specification file with from the server code &lt;code class=&quot;language-text&quot;&gt;@Annoation&lt;/code&gt;s. You need to run the Akka HTTP web server, and access to a resource &lt;a href=&quot;http://localhost:9999/api-docs/swagger.yaml&quot;&gt;http://localhost:9999/api-docs/swagger.yaml&lt;/a&gt; (or swagger.json). &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/swagger-spec-browser-b4b815a42af3dc87b08df3341fbfbfda.png&quot; alt=&quot;swagger-spec-browser&quot;&gt;&lt;/p&gt;
&lt;p&gt;Yes, this is another interesting point, but it seems the conventional way in the JVM world to generate the swagger spec from server code’s &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;, even in Java frameworks like &lt;a href=&quot;https://springfox.github.io/springfox/docs/current/#springfox-swagger-ui&quot;&gt;Spring&lt;/a&gt;, is to run the web server and access to the rendered page. &lt;/p&gt;
&lt;p&gt;This is NOT very Continuous-Integration friendly as your build tool won’t usually bring up the web server, so it is difficult to put the generated specification file in the build pipeline. &lt;/p&gt;
&lt;p&gt;Don’t get me wrong - I am not saying  &lt;a href=&quot;https://github.com/swagger-akka-http/swagger-akka-http&quot;&gt;swagger-akka-http&lt;/a&gt; is not a satisfactory tool. It is still a nice tool when you need to integrate Swagger with Akka HTTP, and the way &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt; works is coming from Swagger &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;, not something swagger-akka-http did in its own. &lt;/p&gt;
&lt;p&gt;And there is one nice thing about the current integration. With &lt;code class=&quot;language-text&quot;&gt;@ApiOperation&lt;/code&gt;, you can specify the type of response with &lt;code class=&quot;language-text&quot;&gt;classOf&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@ApiOperation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; classOf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Pet&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and having the case classes defined:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; Pet&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    category&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Category&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    photoUrls&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    tags&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Tag&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; Category&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; Tag&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;you don’t need to add &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt; to the case classes, but Swagger UI nicely generate this much of model definition. Note that the &lt;code class=&quot;language-text&quot;&gt;Pet&lt;/code&gt; case class has &lt;code class=&quot;language-text&quot;&gt;category: Category&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;tags: Array[Tag]&lt;/code&gt; parameters, but those case classes used in another case class are correctly and automatically handled by swagger spec generation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/swagger-model-305e2b4ba52988bfaed1b2358a59421a.png&quot; alt=&quot;swagger-model&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Summary of the current status&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No top-down tool available for Akka HTTP, so top-down is fully manual&lt;/li&gt;
&lt;li&gt;There is a bottom-up tool, &lt;a href=&quot;https://github.com/swagger-akka-http/swagger-akka-http&quot;&gt;swagger-akka-http&lt;/a&gt; but writing &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt; is pretty much writing specification manually inside the code&lt;/li&gt;
&lt;li&gt;Compile time errors to detect specification and implementation difference are not generated by Swagger &lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;Model definition works nicely for bottom-up&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you still feel it is beneficial that the endpoint specification (&lt;code class=&quot;language-text&quot;&gt;@Annotation&lt;/code&gt;) being close to the Akka HTTP route implementation, rather than a separate .json/.yaml file, swagger-akka-http is the way to go. Otherwise, write and manage the specification manually.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/annotation-next-to-code-afb115c5db16c726718d0dccaf651128.png&quot; alt=&quot;annotation-next-to-code&quot;&gt;&lt;/p&gt;
&lt;p&gt;With these status and limitations we have seen, do we still want to introduce Swagger to an Akka HTTP based server? Let’s take a step back and recap what benefits Swagger gives.&lt;/p&gt;
&lt;h2&gt;Recap - what Swagger is, and what Swagger’s benefits are&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger&lt;/a&gt; is REST API tooling - in its core is the API specification file (.yaml or .json) and a rich set of tools to help you manage the API and develp both the server and client sides. The biggest motivation of using Swagger is well explained by the history of &lt;a href=&quot;https://en.wikipedia.org/wiki/Swagger_(software)&quot;&gt;Swagger at Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;During the development of Wordnik’s products, the need for automation of API documentation and client SDK generation became a major source of frustration. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For many development teams as of today, automation of API documentation and client SDK generation can still be the primary benefit of Swagger.&lt;/p&gt;
&lt;h3&gt;Swagger specification file (.yaml or .json)&lt;/h3&gt;
&lt;p&gt;Swagger’s specification file is standardized as in &lt;a href=&quot;https://swagger.io/docs/specification/about/&quot;&gt;Swagger specification&lt;/a&gt;, and curently the specifications are called &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification&quot;&gt;Open API Specification 3.x&lt;/a&gt; as it is now widely accepted and maintained as community effort. OK, the first benefit is you have a well-understood format of API documentation, which is closely related to the other benefits.&lt;/p&gt;
&lt;h3&gt;Swagger UI (Documentation generator and viewer)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/blog/Swagger-UI-34b3edf56d6d39b48a7ec3ccbb9598ce.png&quot; alt=&quot;Swagger-UI&quot;&gt;&lt;/p&gt;
&lt;p&gt;At &lt;a href=&quot;http://petstore.swagger.io/&quot;&gt;http://petstore.swagger.io/&lt;/a&gt; you can see the specification document for Swagger’s official PetStore sample, and it is generated by &lt;a href=&quot;https://swagger.io/swagger-ui/&quot;&gt;Swagger UI&lt;/a&gt;. Once you have the specification file for your application, this nice-looking documentation comes for free for you too. &lt;/p&gt;
&lt;p&gt;Also when you load your spec file in &lt;a href=&quot;https://editor.swagger.io/&quot;&gt;Swagger Editor&lt;/a&gt;, it spots your specification errors like below. In fully manual workflow, it will be much more difficult to spot your mistakes in specification.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/swagger-error-98a94e736684c1c8ddc554164b48f7ea.png&quot; alt=&quot;swagger-error&quot;&gt;&lt;/p&gt;
&lt;p&gt;With the help of Swagger UI document generation, and clearly defined Swagger/Open API specification, the work of writing REST API specification became much more concrete (I wouldn’t say it became “easy” though), and there are clearer learning paths avaialble to improve on API management. You can find a plenty of other Swagger speficitation examples out there which you can get inspiration from, and people have published lots of materials on how to write good specification in Swagger. This made a step forward in API specification writing, so that it became a managable job for an engineer from something like black magic done by a veteran craftman with 30 years of experience. Having a concrete tool available is a huge win, where you can focus on more detailed ways to leverage tools, rather than talking about “what a good design of your REST API is” in a vague fasion. (I believe as an engineer, you have seen such phenomena in many other areas - when good tools are available, things get traction and move forward.) Of course conceptual understanding of good design is a must, but good tooling is also a must for maintaining good design in practice.&lt;/p&gt;
&lt;p&gt;Another feature I like in Swagger UI is that you can send HTTP requests by pressing buttons (as long as you write example input to the specification file). Also ig gives you curl command for the request which is great for automation of testing. Save the curl commands and invoke them by an automated tool. To use this feature, it is &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/Swagger-UI-curl-19169ae77681a3acb3d3cf4cfc9fe523.png&quot; alt=&quot;Swagger-UI-curl&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Client code and stub server code generation&lt;/h3&gt;
&lt;p&gt;Even though no existing tool available to generate the Akka HTTP server side code, &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen&quot;&gt;Swagger codegen&lt;/a&gt; can still generate the client-side code for various dev environments, and server stubs.&lt;/p&gt;
&lt;p&gt;Some client-side development teams could be benefited from the code generation, as they might use the generated client code as the SDK to depend on, or might prefer the generated server stub code as for testing against the server - as long as test is concerned from the client side, they might not care whetherthe server implementation is Akka HTTP or not.&lt;/p&gt;
&lt;h2&gt;To go with or without Swagger?&lt;/h2&gt;
&lt;p&gt;So I have covered current limitations and benefits of using Swagger with Akka HTTP. Some part works nicely with the current integration, and there’s still a lot of benefits you get from the rich Swagger echosystem. It’s up to you how you evaluate the benefits against the cost you have to maintain the swagger specification. Hopefully this article gives you some hints to judge its value in your engineering team.&lt;/p&gt;
&lt;h2&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;If I am going to write next article about Swagger, probably I will explore possibilities of more automation. With &lt;a href=&quot;http://www.scala-lang.org/blog/2017/10/09/scalamacros.html&quot;&gt;the rise of the new Scala macro&lt;/a&gt;, probably better automation can be achieved. Let’s see what we can get there.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Swagger home page at - &lt;a href=&quot;https://swagger.io/&quot;&gt;https://swagger.io/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Swagger Editor - &lt;a href=&quot;https://swagger.io/swagger-editor/&quot;&gt;https://swagger.io/swagger-editor/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swagger UI - &lt;a href=&quot;https://swagger.io/swagger-codegen/&quot;&gt;https://swagger.io/swagger-codegen/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Swagger Codegen - &lt;a href=&quot;https://swagger.io/swagger-ui/&quot;&gt;https://swagger.io/swagger-ui/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and Swagger Codege at GitHub - &lt;a href=&quot;https://github.com/swagger-api/swagger-codegen&quot;&gt;https://github.com/swagger-api/swagger-codegen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Swagger 101 tutorials at - &lt;a href=&quot;https://app.swaggerhub.com/help/tutorials/writing-swagger-definitions&quot;&gt;https://app.swaggerhub.com/help/tutorials/writing-swagger-definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Explanation about Swagger Specification - &lt;a href=&quot;https://swagger.io/docs/specification/about/&quot;&gt;https://swagger.io/docs/specification/about/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open API specification at GitHub - &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification&quot;&gt;https://github.com/OAI/OpenAPI-Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Springfox Java framework with Swagger at - &lt;a href=&quot;https://springfox.github.io/springfox/docs/current/&quot;&gt;https://springfox.github.io/springfox/docs/current/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Benchmarking Spray and Akka HTTP Hello World servers]]></title><description><![CDATA[Overview TL;DR) Benchmarking Akka HTTP and Spray “Hello World” servers did not discover significant performance difference. On Macbook, with…]]></description><link>https://richardimaoka.github.io/blog//hello-world-http-bench/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//hello-world-http-bench/</guid><pubDate>Sat, 03 Mar 2018 21:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;TL;DR) Benchmarking Akka HTTP and Spray “Hello World” servers did not discover significant performance difference.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On Macbook, with Intel CPU Core i5 2.6GHz 2 cores&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Attempt&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Akka HTTP&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Spray&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;1st attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;34,494 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;37,005 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2nd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;41,469 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;41,586 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3rd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;41,535 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;42,438 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;On Windows, with Intel CPU Core i7-6700 3.4GHz 4 cores/8 threads&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Attempt&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Akka HTTP&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Spray&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;1st attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;75,439 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;80,108 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2nd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;80,106 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;80,453 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3rd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;79,608 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;84,446 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I am planning to write up articles analyzing Akka HTTP performance going forward, (probably about Akka internals too) so wanted to get familiar with tooling and procedure.&lt;/p&gt;
&lt;p&gt;So this very first article is pretty “rough”, but still this gives me an insight about Akka HTTP’s performance relative to Spray. I was interested in this relative performance analysis because one of Akka HTTP’s performance goals was to catch up with Spray’s performance.&lt;/p&gt;
&lt;p&gt;If you are conducting a serious performance analysis, you would not take benchmark in this way, as my “Hello World” server was too simple and I only used a single machine to run the server and the client, which hides whether the bottleneck was on the client or the server.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;h3&gt;akka-user discussion&lt;/h3&gt;
&lt;p&gt;There is a similiar discussion about Akka HTTP performance in the &lt;a href=&quot;https://groups.google.com/forum/#!topic/akka-user/qhZlh0KBl2A&quot;&gt;akka-user mailing list&lt;/a&gt;, where the benchmark was taken using a tool called &lt;a href=&quot;https://github.com/wg/wrk&quot;&gt;wrk&lt;/a&gt; against a simple serve doing hell-world json marshalling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whereas for the Akka HTTP version I saw each core using ~40% CPU throughout the test and I had the following results:
…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  2 threads and 100 connections
  Thread calibration: mean lat.: 5.044ms, rate sampling interval: 10ms
  Thread calibration: mean lat.: 5.308ms, rate sampling interval: 10ms
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     1.83ms    1.27ms  78.91ms   95.96%
    Req/Sec    10.55k     1.79k   28.22k    75.98%
  5997552 requests in 5.00m, 1.00GB read
Requests/sec:  19991.72
Transfer/sec:      3.41MB&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The number I foncus on this time, was &lt;strong&gt;req/sec: 19991.72&lt;/strong&gt;. Of course we have to look at various characteristics of performance in more serious analsys, but this is just a starting point for now.&lt;/p&gt;
&lt;h3&gt;Spray team blog&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/blog/spray-bench-528d4a6d6788732badde292e0479e2a5.png&quot; alt=&quot;spray bench&quot;&gt;&lt;/p&gt;
&lt;p&gt;Also there is a &lt;a href=&quot;http://spray.io/blog/2013-05-24-benchmarking-spray/&quot;&gt;Spray team blog entry&lt;/a&gt; which shows its performance. As it says the benchmark server was doing JSON serialization without db access, it was probably similar to the above akka-user discussion.&lt;/p&gt;
&lt;p&gt;The req/sec was 33.8K in Spray but 19.9K in Akka HTTP. So my question was,
”&lt;strong&gt;how do they perform on the same machine, doing the same thing?&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;Maybe the difference in their performance was due to the difference on the machines the benchmark was run, and probably because the code of one experiment was bit more complicated than the other.&lt;/p&gt;
&lt;h2&gt;My Bencmarking setup&lt;/h2&gt;
&lt;p&gt;I set up a very, very simple HTTP server in both in Akka HTTP and Spray, where the Spray one was inspired by its &lt;a href=&quot;https://github.com/spray/spray-template&quot;&gt;official template&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Akka HTTP&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/akka-http-minimal&quot;&gt;full code here&lt;/a&gt; &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;PrintWriter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; StringWriter&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActorSystem
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Directives&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scaladsl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Route
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ActorMaterializer

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Await
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Duration

&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; HttpServer &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; main&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; system&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorSystem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorSystem&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HttpServer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; materializer&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorMaterializer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorMaterializer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Route &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
      pathEndOrSingleSlash &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    Http&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bindAndHandle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;routes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8088&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token string&quot;&gt;&quot;Server online at http://localhost:8088/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    Await&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;whenTerminated&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Duration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Inf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;Spray&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/spray-minimal&quot;&gt;full code here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Actor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ActorSystem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IO
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pattern&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ask
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Timeout
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;can&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;routing&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HttpService

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; scala&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concurrent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;duration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_

&lt;span class=&quot;token comment&quot;&gt;// this trait defines our service behavior independently from the service actor&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; MyService &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; HttpService &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; myRoute &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      complete&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// we don&apos;t implement our route structure directly in the service actor because&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// we want to be able to test it independently, without having to spin up an actor&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; MyServiceActor &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; Actor &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; MyService &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// the HttpService trait defines only one abstract member, which&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// connects the services environment to the enclosing actor or test&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; actorRefFactory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; context

  &lt;span class=&quot;token comment&quot;&gt;// this actor only runs our route, but you could add&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// other things here, like request stream processing&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// or timeout handling&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; runRoute&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myRoute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; HttpServer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; main&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// we need an ActorSystem to host our application in&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; system &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorSystem&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;on-spray-can&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// create and start our service actor&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; service &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actorOf&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Props&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MyServiceActor&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;demo-service&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Timeout&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5.&lt;/span&gt;seconds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// start a new HTTP server on port 8090 with our service actor as the handler&lt;/span&gt;
    IO&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Http&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; Http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Bind&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; interface &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8090&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;Benchmarking method in detail&lt;/h3&gt;
&lt;p&gt;Same as the akka-user discussion, I used &lt;a href=&quot;https://github.com/wg/wrk&quot;&gt;wrk&lt;/a&gt; to test the servers. On my Macbook (with Intel CPU Core i5 2.6GHz 2 cores), and got the following results for req/sec. This is the same table as I pasted at the beginning of the article. &lt;/p&gt;
&lt;p&gt;The reason I tried 3 attempts each was that due to JVM’s JIT (Just-in-time) compilation, the frist and probably second attemps might not be at at the possible best performance. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Attempt&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Akka HTTP&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Spray&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;1st attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;34,494 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;37,005 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2nd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;41,469 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;41,586 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3rd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;41,535 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;42,438 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Taking more detailed results from the 3rd attempts, for &lt;strong&gt;Akka HTTP&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; wrk -t2 -c100 -d30s http://127.0.0.1:8088
Running 30s test @ http://127.0.0.1:8088
  2 threads and 100 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     3.88ms   18.33ms 485.74ms   97.91%
    Req/Sec    21.02k     4.59k   35.18k    82.57%
  1248199 requests in 30.05s, 184.51MB read
Requests/sec:  41535.58
Transfer/sec:      6.14MB&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and for &lt;strong&gt;Spray&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; wrk -t2 -c100 -d30s http://127.0.0.1:8090
Running 30s test @ http://127.0.0.1:8090
  2 threads and 100 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     3.98ms   11.38ms 163.62ms   94.70%
    Req/Sec    21.60k     5.89k   48.67k    77.40%
  1273545 requests in 30.01s, 185.83MB read
Requests/sec:  42438.22
Transfer/sec:      6.19MB&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;They look like performing in a similar level. &lt;/p&gt;
&lt;p&gt;Then I did the same thing on my Windows machine as well (with Intel CPU Core i7-6700 3.4GHz 4 cores/8 threads), and results were as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Attempt&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Akka HTTP&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Spray&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;1st attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;75,439 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;80,108 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2nd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;80,106 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;80,453 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3rd attempt&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;79,608 req/sec&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;84,446 req/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Detailed results from the 3rd attempt for &lt;strong&gt;Akka HTTP&lt;/strong&gt;,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; wrk -t2 -c100 -d30s http://127.0.0.1:8095/
Running 30s test @ http://127.0.0.1:8095/
  2 threads and 100 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     1.46ms    6.53ms 260.11ms   98.93%
    Req/Sec     40.08k    6.85k   59.53k    64.67%
  2395691 requests in 30.09s, 354.13MB read
Requests/sec:  79608.66
Transfer/sec:     11.77MB&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and for &lt;strong&gt;Spray&lt;/strong&gt;, and these also gave similar perforamance.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; wrk -t2 -c100 -d30s http://127.0.0.1:8093/
Running 30s test @ http://127.0.0.1:8093/
  2 threads and 100 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency     1.18ms    2.68ms  61.62ms   98.26%
    Req/Sec    42.55k     8.20k   61.00k    61.10%
  2542858 requests in 30.11s, 371.03MB read
Requests/sec:  84446.09
Transfer/sec:     12.32MB&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Here’s the CPU usage profile on Windows at one point running the benchmark. The “Java” one is the Akka HTTP server. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/win-cpu-utilization-8606513a030db443d74a33bdfdd8810d.png&quot; alt=&quot;win-cpu-utilization&quot;&gt;&lt;/p&gt;
&lt;p&gt;In a realistic situation where you, typically need to read and write to and from databases, etc, your web server won’t be using CPU up to 100%, but network/database I/O tend to be bottlenecks. &lt;/p&gt;
&lt;p&gt;For now the experiment in this article tells us how the server behaves in the best possible situation where the CPU becomes the bottleneck.&lt;/p&gt;
&lt;h2&gt;Lessons learned and plans going forward …&lt;/h2&gt;
&lt;p&gt;Just don’t rely on these results and assume like “Akka HTTP and Spray can perform at this level!“.&lt;/p&gt;
&lt;p&gt;As you saw here, benchmark results could significantly vary based on machines you run the bench. We have to keep in mind that the benchmark results are specific to the setup, including machines you run the bench, the server implementation and what kind of work the server does, latency and throughput between components if there are multiple components involved, etc.&lt;/p&gt;
&lt;p&gt;Also, what “realistic” benchmark actually means depends on what your target application (web server) is. We have to pay attention that the difference between application’s production environment and the benchmark environment.&lt;/p&gt;
&lt;p&gt;Although having realistic setup, close to your production environment is important, another thing to note is that there is no one-size-fits-all benchmark method. Like anything else in software engineering, you should have differnt tooling for different aspects of benchmarking. You might think that if you make the benchmark environment as close as your production environment, you will get the most accurate results and that’s it. However, that way, you cannot identify which component is the bottleneck of the performance when you see your entire application’s performance is not satisfactory. You need more granular results from different parts of the system.&lt;/p&gt;
&lt;p&gt;That is why I did this very simple, ridiculously simple benchmarking. This didn’t give us any realistic performance figure which we can guess the production performance from, but it gave me a sense on maximum possible performance of Akka HTTP web server. (Actually, better experiment is to run the client and the server on different machines though.)&lt;/p&gt;
&lt;p&gt;By testing each component individually, also testing in small groups of components, you will then realize the performance cap of each part of your entire application. Comparing that with your benchmark agains the whole application system, you will be able to figure out what is the bottleneck, and what part of the application is not scaling as you would have expected.&lt;/p&gt;
&lt;p&gt;So I am going to write up other articles to cover these aspects to show procedure on performing (web) application performance testing, and hopefully micro benchmarking internals of akka application/service too.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Akka behavior in different levels of detail]]></title><description><![CDATA[Overview As we went through the Akka internal behavior in previous articles, let’s review it from a high/conceptual level to a low/internal…]]></description><link>https://richardimaoka.github.io/blog//akka-behavior-levels/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//akka-behavior-levels/</guid><pubDate>Mon, 26 Feb 2018 03:31:08 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/hHNmGxf7Mwc&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;As we went through the Akka internal behavior in previous articles, let’s review it from a high/conceptual level to a low/internal level where you see an Akka application as a huge &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; application (although it doesn’t use fork-join mechanism).&lt;/p&gt;
&lt;p&gt;Previous articles related to this post are here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../local-minimal-sender/&quot;&gt;Local Actor workflow part 1 - Sender side&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../local-minimal-receiver/&quot;&gt;Local Actor workflow part 2 - Receiver side&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../dispatcher-behavior/&quot;&gt;Dispatcher behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../mailbox-and-fork-join-task/&quot;&gt;Mailbox and ForkJoinTask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The highest level: Actors pass messages&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/x5GEmjyJD2U&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;If you ever heard of Akka, or an actor model in general, you might know that actors, which are minimal components consisting of your entire application, communicate to each other by passing messages.&lt;/p&gt;
&lt;p&gt;This is usually what people would mention when they try to explain the actor model to those who never heard of it.&lt;/p&gt;
&lt;h2&gt;The second level: Actor’s ! and receive methods&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/FNlqhNrKsLQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;The next level touches something specific to Akka. If you have experience programming an application using Akka, you would know that Akka provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; method in &lt;code class=&quot;language-text&quot;&gt;ActorRef&lt;/code&gt; to send a message to an &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method in &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt; which you need to implement in your concrete &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt; class, and the &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method processes incoming messages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For those who don’t need to interact with Akka day to day, knowing what the &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; methods are helps them understand Akka-based applications written by someone else.&lt;/p&gt;
&lt;p&gt;Or with this level of knowledge, you can still implement your important (so-called domain or business) logic for your application inside the &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method. Then Akka takes care of actual execution of the &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method in a multi-threaded environment, but you are not yet exposed to how threads are employed by Akka to power your application.&lt;/p&gt;
&lt;p&gt;Let’s go to the next level for more serious Akka users. We are going to look at &lt;code class=&quot;language-text&quot;&gt;MessageQueue&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;The third level: MessageQueue&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/o0UtYvGacWQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;A &lt;code class=&quot;language-text&quot;&gt;MessageQueue&lt;/code&gt; in Akka is something sits in-between your sender &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt; and the receiver &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Akka makes you avoid your sender &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt; call the receiver &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt; method directly. There is no direct interaction between &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt; instances. Instead, like you saw in the previous level, &lt;code class=&quot;language-text&quot;&gt;ActorRef&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; method is used to communicate with other actors, and that method internally puts your messages into &lt;code class=&quot;language-text&quot;&gt;MessageQueue&lt;/code&gt;, before the receiver actor pick them up.  That allows you execute the sender and receiver &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;s work concurrently.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.akka.io/docs/akka/current/mailboxes.html&quot;&gt;The documentation&lt;/a&gt; mentions that &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;, which has the associated &lt;code class=&quot;language-text&quot;&gt;MessageQueue&lt;/code&gt; implementation, can be configured based on your usage. All available &lt;code class=&quot;language-text&quot;&gt;MessageQueue&lt;/code&gt; implementations used by Akka are chosen so that they can be accessed from different threads concurrently.&lt;/p&gt;
&lt;p&gt;When you write a concurrent application, it is generally hard to program your own class safely against access from multiple threads, especially as your class grows to be big and complicated. Instead, a lot of researchers have come up with thread-safe algorithms and implementations of data classes focusing on simple and fundamental ones. Queues are typical examples of such data classes where thread-safe implementations are available.&lt;/p&gt;
&lt;p&gt;So, Akka’s approach is to put concurrency concerns within &lt;code class=&quot;language-text&quot;&gt;MessageQueue&lt;/code&gt; which Akka takes care of, and provide avaialble &lt;code class=&quot;language-text&quot;&gt;MessageQueue&lt;/code&gt; implementations already. As long as you follow the pattern in the Akka actor model, and use immutable messages, you don’t need to worry about concurrency &lt;strong&gt;inside&lt;/strong&gt; each &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;The second-lowest level: Dispatcher and ForkJoinTask&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/4n1gCDtUsDI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;Now you know that Akka &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;s communicate with each other via &lt;code class=&quot;language-text&quot;&gt;MessageQueue&lt;/code&gt;, but how does it actually use threads to execute the code inside &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;? Still, something needs to execute your code inside &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt; and that’s a dedicated thread provided by the undelying &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That is illustrated in the above short video, and also discussed in these two other articles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../dispatcher-behavior/&quot;&gt;Dispatcher behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../mailbox-and-fork-join-task/&quot;&gt;Mailbox and ForkJoinTask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;’s associated &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; schedules a &lt;code class=&quot;language-text&quot;&gt;ForkJointTask&lt;/code&gt; to be run on in a pool of threads, and that &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; is actually an Akka (internal) &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; as &lt;code class=&quot;language-text&quot;&gt;Mailbox extends ForkJointTask&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; method eventually invokes the &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method of your &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;The lowest level: Akka application as huge ForkJoinTask application&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/572YLMHWeT4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;Taking a step further, looking at this from the &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt;/&lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../executor-and-execution-context/&quot;&gt;Executor/ExecutorService in Java, and ExecutionContext behind Future in Scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;you can see your Akka application as a huge &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; application, where you excecute your domain/business logic from &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; method. &lt;/p&gt;
&lt;p&gt;One caveat is that although it is &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;, Akka does not use fork-join mechanism to execute the &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt; internal code. (i.e.) Akka doesn’t use &lt;code class=&quot;language-text&quot;&gt;fork&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;join&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;invokeAll&lt;/code&gt; methods from &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; but uses the simple &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; method, in an event style which is described in the middle of &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;’s &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html&quot;&gt;javadoc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ForkJoinPool&lt;/code&gt; is the default &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; for the default &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;. The reason why &lt;code class=&quot;language-text&quot;&gt;ForkJoinPool&lt;/code&gt; was chosen as default was its performance considering Akka’s use cases. More detail about the reason can be found in previous Akka’s official blog, LET IT CRASH - &lt;a href=&quot;http://letitcrash.com/post/17607272336/scalability-of-fork-join-pool&quot;&gt;Scalability of Fork Join Pool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From here, you can even go deeper, outside of/below Akka, like how Java’s &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ForkJoinPool&lt;/code&gt; work or even how OS schedules tasks on multiple threads. Those are out of scope of this article, but if you are interested, please go ahead! (hopefully I might cover them at some point later).&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;Javadoc of &lt;code class=&quot;language-text&quot;&gt;java.util.concurrent.ForkJoinTask&lt;/code&gt; at -  &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Official documentation of Akka Mailbox at &lt;a href=&quot;https://doc.akka.io/docs/akka/current/mailboxes.html&quot;&gt;https://doc.akka.io/docs/akka/current/mailboxes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka Dispatcher at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/dispatchers.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/dispatchers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A LET IT CRASH blog post explaining efficiency of &lt;code class=&quot;language-text&quot;&gt;ForkJoinPool&lt;/code&gt; - &lt;a href=&quot;http://letitcrash.com/post/17607272336/scalability-of-fork-join-pool&quot;&gt;Scalability of Fork Join Pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A discussion with Doug Lea, linked from the above LET IT CRASH blog article, who lead the design and implementation of Java’s &lt;code class=&quot;language-text&quot;&gt;ForkJoinPool&lt;/code&gt; - &lt;a href=&quot;http://cs.oswego.edu/pipermail/concurrency-interest/2012-January/008987.html&quot;&gt;http://cs.oswego.edu/pipermail/concurrency-interest/2012-January/008987.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Mailbox and ForkJoinTask]]></title><description><![CDATA[Update to the article and the video Thanks to Victor who immediately noticed I had wrong assumption about   behavior in akka, now this…]]></description><link>https://richardimaoka.github.io/blog//mailbox-and-fork-join-task/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//mailbox-and-fork-join-task/</guid><pubDate>Sat, 24 Feb 2018 16:31:08 GMT</pubDate><content:encoded>&lt;h2&gt;Update to the article and the video&lt;/h2&gt;
&lt;p&gt;Thanks to Victor who immediately noticed I had wrong assumption about &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; behavior in akka, now this article and videos were corrected.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Only one FJT should be created.&lt;/p&gt;&amp;mdash; ⎷ (@viktorklang) &lt;a href=&quot;https://twitter.com/viktorklang/status/967066161899819008?ref_src=twsrc%5Etfw&quot;&gt;2018年2月23日&lt;/a&gt;&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;No worries! Actually, many years ago it did create many FJT (..or rather, Runnables).&lt;/p&gt;&amp;mdash; ⎷ (@viktorklang) &lt;a href=&quot;https://twitter.com/viktorklang/status/967082002804609024?ref_src=twsrc%5Etfw&quot;&gt;2018年2月23日&lt;/a&gt;&lt;/blockquote&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/dnu6JqtzNJI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;The previous &lt;a href=&quot;../dispatcher-behavior/&quot;&gt;Dispatcher behavior&lt;/a&gt; article explained how &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; and threads are related to each other. In this article, we will go one step further in this regard.&lt;/p&gt;
&lt;p&gt;The code example is at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/local-minimal&quot;&gt;GitHub&lt;/a&gt;, which is the same example as
what’s discussed in &lt;a href=&quot;http://localhost:8000/local-minimal-sender/&quot;&gt;the local actor article(s)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Thread-processing details in Akka&lt;/h2&gt;
&lt;p&gt;Following the instruction at the bottom of this article, you will get output as follows &lt;a href=&quot;https://drive.google.com/open?id=194-t1rYNQU2mprybSC9RibJ7HopCAdPqJX94XlIKxXk&quot;&gt;(also in GoogleSpreadsheet)&lt;/a&gt; . &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SO MANY things in the table!! but no worries!&lt;/strong&gt; We will go through each important piece, one after another.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/whole-threads-066b39612b4321a93f47380f6f47c120.png&quot; alt=&quot;whole-threads&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;You might notice that I am skipping some parts (some rows in the above table) in the article, but that is just to avoid confusion. Even with this simple example, Akka’s internal processing is very complicated. So I am only covering pieces to help you understand important stuff.&lt;/p&gt;
&lt;h2&gt;Thread[2]- sender side&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/mPmApp5B8s4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;Firstly, let’s look at “Thread[2]” from the output table. As far as what’s explained this article, Thread[2] is pretty the sender side. &lt;/p&gt;
&lt;p&gt;The sender &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; was &lt;code class=&quot;language-text&quot;&gt;run()&lt;/code&gt;, &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/thread2-a-8d985489252cb6d3290c795e05ff2f0a.png&quot; alt=&quot;thread2-a&quot;&gt;&lt;/p&gt;
&lt;p&gt;triggerring &lt;a href=&quot;https://github.com/richardimaoka/resources/blob/master/local-minimal/src/main/scala/example/Main.scala#L15L20&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MessageSender&lt;/code&gt;&lt;/a&gt;’s &lt;code class=&quot;language-text&quot;&gt;preStart()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; MessageSender&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messageReceiver&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorRef&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; preStart&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; messages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Hello Universe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Hello Galaxy&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; messages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token string&quot;&gt;&quot;[${Thread.currentThread().getName}]|sending message $msg to $messageReceiver&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      messageReceiver &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; msg
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The very first message, &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/code&gt; was &lt;code class=&quot;language-text&quot;&gt;dispatch&lt;/code&gt;-ed (sent) as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/thread2-b-114a78e2ede459443c8403dbf47add14.png&quot; alt=&quot;thread2-b&quot;&gt;&lt;/p&gt;
&lt;p&gt;and as in the &lt;a href=&quot;../dispatcher-behavior&quot;&gt;previous article&lt;/a&gt; the &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L52L56&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;dispatch&lt;/code&gt;&lt;/a&gt; method is implemented as below, which puts the message to the message queue of the mailbox, and …&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  receiver&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorCell&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  invocation&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Envelope
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; mbox &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; receiver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mailbox
  mbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enqueue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;receiver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; invocation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  registerForExecution&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbox&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;… then &lt;code class=&quot;language-text&quot;&gt;registerForExecution&lt;/code&gt; scheduled &lt;code class=&quot;language-text&quot;&gt;mbox&lt;/code&gt; (= an instance of &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L56L57&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;&lt;/a&gt; which extends &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt;) to be executed on a different thread. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; Mailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; messageQueue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MessageQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; ForkJoinTask&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; SystemMessageQueue 
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; Runnable &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Same as the first message, the second ard thrid messages, &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Hellow Universe&amp;quot;&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Hello Galaxy&amp;quot;&lt;/code&gt; were &lt;code class=&quot;language-text&quot;&gt;dispatch&lt;/code&gt;-ed as well. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/thread2-c-99271c77c10ff7f19b21c01ad4dae08a.png&quot; alt=&quot;thread2-c&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since the &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L115&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;registerForExecution(mbox, ...)&lt;/code&gt;&lt;/a&gt; is called for the same &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; instance, &lt;code class=&quot;language-text&quot;&gt;mbox&lt;/code&gt;, the underlying &lt;code class=&quot;language-text&quot;&gt;executorService&lt;/code&gt; scheduled the same &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; (&lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def registerForExecution(mbox: Mailbox, ...): Boolean = {
  ...
  executorService execute mbox
  ...
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;About the general behavior when you &lt;code class=&quot;language-text&quot;&gt;execute&lt;/code&gt; the same &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; instance in &lt;code class=&quot;language-text&quot;&gt;ForkJoinPool&lt;/code&gt;, see my below tweet (not every single &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; is really run):&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Ah I see this is how ForkJoinPool&amp;#39;s execute method behaves differently when different Runnable instances are executed, and when the same Runnable instance is executed multiple times. &lt;a href=&quot;https://t.co/OhuHMUyszU&quot;&gt;pic.twitter.com/OhuHMUyszU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Richard Imaoka (@richardimaoka) &lt;a href=&quot;https://twitter.com/richardimaoka/status/967260911785226245?ref_src=twsrc%5Etfw&quot;&gt;2018/2/23&lt;/a&gt;&lt;/blockquote&gt;
&lt;h2&gt;Thread[4]- receiver side&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/91naDxLuveY&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;Let’s move onto the “Thread[4]”, the receiver side behavior. The point here (and for the whole article) is that &lt;code class=&quot;language-text&quot;&gt;processMailbox()&lt;/code&gt; is a &lt;strong&gt;recursive method&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The scheduled &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; triggered the &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; method. Remenber &lt;code class=&quot;language-text&quot;&gt;Mailbox extends ForkJoinTask&lt;/code&gt;, so &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; overrides the &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/thread4-a-9e49aae18351df1e05777b6435f0512a.png&quot; alt=&quot;thread4-a&quot;&gt;&lt;/p&gt;
&lt;p&gt;It’s also discussed in the &lt;a href=&quot;../dispatcher-behavior&quot;&gt;previous article&lt;/a&gt;, but &lt;code class=&quot;language-text&quot;&gt;processMailbox&lt;/code&gt; method executs the &lt;a href=&quot;(https://github.com/richardimaoka/resources/blob/master/local-minimal/src/main/scala/example/Main.scala#L8L11)&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method&lt;/a&gt; of the &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/thread4-b-6d1b838c9c19c60825f7c99260c0d880.png&quot; alt=&quot;thread4-b&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; MessageReceiver &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; Actor &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; s&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
      println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token string&quot;&gt;&quot;${Thread.currentThread()} [${self.path}]|EchoActor: received message = $s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Next, you see &lt;code class=&quot;language-text&quot;&gt;processMailbox()&lt;/code&gt; was called multiple times before you see &lt;code class=&quot;language-text&quot;&gt;Mailbox run() finished&lt;/code&gt;.
&lt;img src=&quot;/blog/thread4-c-361a5920b601649cced526ed2f99c923.png&quot; alt=&quot;thread4-c&quot;&gt;&lt;/p&gt;
&lt;p&gt;because &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L250&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;processMailbox&lt;/code&gt; method&lt;/a&gt; is actually recursive:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@tailrec&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; processMailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// def dequeue(): Envelope = messageQueue.dequeue()&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dequeue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  actor invoke next
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  processMailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;so it processed all the three messages, &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Hello Universe&amp;quot;&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Hello Galaxy&amp;quot;&lt;/code&gt; in the single call of &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/thread4-d-277e3712f0d47a8446f144afc35b9a44.png&quot; alt=&quot;thread4-d&quot;&gt;&lt;/p&gt;
&lt;p&gt;How many messages can be processed by a single &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; is controlled by the &lt;code class=&quot;language-text&quot;&gt;throughput&lt;/code&gt; setting in &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/resources/reference.conf#L513&quot;&gt;config&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# Throughput defines the number of messages that are processed in a batch
# before the thread is returned to the pool. Set to 1 for as fair as possible.
throughput = 5&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Instruction to run the example, and output&lt;/h2&gt;
&lt;p&gt;We can use &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/local-minimal&quot;&gt;the same example code&lt;/a&gt; as the ”&lt;a href=&quot;../local-minimal-sender&quot;&gt;Local Actor workflow part 1 - Sender side&lt;/a&gt;” article.code, however, because you need a bit of tweaking which I am going to explain below.&lt;/p&gt;
&lt;p&gt;Clone the akka repository,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/akka/akka.git
&amp;gt; cd akka&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and insert &lt;code class=&quot;language-text&quot;&gt;println&lt;/code&gt; calls &lt;a href=&quot;https://github.com/richardimaoka/akka/commit/6b19cabf3d9895fd8cc925b760f6b9ec21a1eaef&quot;&gt;like this&lt;/a&gt;) in akka to see the &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; behavior. Then execute &lt;code class=&quot;language-text&quot;&gt;publishLocal&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; sbt
&amp;gt; project akka-actor
&amp;gt; publishLocal&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;now you will see &lt;code class=&quot;language-text&quot;&gt;akka-actor_2.12;2.5-SNAPSHOT&lt;/code&gt; is built and stored under your &lt;code class=&quot;language-text&quot;&gt;.ivy&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] :: delivering :: com.typesafe.akka#akka-actor_2.12;2.5-SNAPSHOT :: 2.5-SNAPSHOT :: integration :: Thu Feb 22 07:22:33 JST 2018
[info] delivering ivy file to Users/username/akka/akka-actor/target/ivy-2.5-SNAPSHOT.xml
[info]  published akka-actor_2.12 to Users/username/.ivy2/local/com.typesafe.akka/akka-actor_2.12/2.5-SNAPSHOT/poms/akka-actor_2.12.pom
[info]  published akka-actor_2.12 to Users/username/.ivy2/local/com.typesafe.akka/akka-actor_2.12/2.5-SNAPSHOT/jars/akka-actor_2.12.jar
[info]  published akka-actor_2.12 to Users/username/.ivy2/local/com.typesafe.akka/akka-actor_2.12/2.5-SNAPSHOT/srcs/akka-actor_2.12-sources.jar
[info]  published akka-actor_2.12 to Users/username/.ivy2/local/com.typesafe.akka/akka-actor_2.12/2.5-SNAPSHOT/docs/akka-actor_2.12-javadoc.jar
[info]  published ivy to Users/username/.ivy2/local/com.typesafe.akka/akka-actor_2.12/2.5-SNAPSHOT/ivys/ivy.xml&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;From here you move to the &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/local-minimal&quot;&gt;local actor example code&lt;/a&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; cd ~
// or `cd` to whatever directory you like

&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd local-minimal&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Make &lt;a href=&quot;https://github.com/richardimaoka/resources/commit/15e140cb110e8ca37934eb150da94fea49e3431c&quot;&gt;this change&lt;/a&gt; to the local example code, to use the 2.5-SNAPSHOT version of &lt;code class=&quot;language-text&quot;&gt;akka-actor&lt;/code&gt; jar built by the above step.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//build.sbt
 libraryDependencies ++= Seq(
-  &amp;quot;com.typesafe.akka&amp;quot; %% &amp;quot;akka-actor&amp;quot; % &amp;quot;2.5.9&amp;quot;,
+  &amp;quot;com.typesafe.akka&amp;quot; %% &amp;quot;akka-actor&amp;quot; % &amp;quot;2.5-SNAPSHOT&amp;quot;,
   scalaTest % Test
 )&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;From inside the &lt;code class=&quot;language-text&quot;&gt;local-minimal&lt;/code&gt; directory, you can do:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; sbt
&amp;gt; runMain example.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and you will output like the following (order of messages could be little differnt due to concurrency). &lt;/p&gt;
&lt;p&gt;After I did some clean-up, I posted the result &lt;a href=&quot;https://drive.google.com/open?id=194-t1rYNQU2mprybSC9RibJ7HopCAdPqJX94XlIKxXk&quot;&gt;here in Google Spreadsheet&lt;/a&gt;. (Shortened the thread name, exclude &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/general/supervision.html#user-the-guardian-actor&quot;&gt;user guardian&lt;/a&gt; from logs, shortened the actor path, etc)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/sender]|Mailbox run() called
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox processMailbox() next=null
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox run() finished
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/sender]|sending message Hello World to Actor[akka://exampleSystem/user/receiver#1486562265]
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox run() finished
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Dispatcher dispatch(Envelope(Hello World,Actor[akka://exampleSystem/user/sender#-1400752577])) started
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox run() called
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Dispatcher dispatch(Envelope(Hello World,Actor[akka://exampleSystem/user/sender#-1400752577])) finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() called, shouldProcessMessage=true
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/sender]|sending message Hello Universe to Actor[akka://exampleSystem/user/receiver#1486562265]
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() next=Envelope(Hello World,Actor[akka://exampleSystem/user/sender#-1400752577])
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Dispatcher dispatch(Envelope(Hello Universe,Actor[akka://exampleSystem/user/sender#-1400752577])) started
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|EchoActor: received message = Hello World
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Dispatcher dispatch(Envelope(Hello Universe,Actor[akka://exampleSystem/user/sender#-1400752577])) finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() called, shouldProcessMessage=true
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/sender]|sending message Hello Galaxy to Actor[akka://exampleSystem/user/receiver#1486562265]
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() next=Envelope(Hello Universe,Actor[akka://exampleSystem/user/sender#-1400752577])
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Dispatcher dispatch(Envelope(Hello Galaxy,Actor[akka://exampleSystem/user/sender#-1400752577])) started
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|EchoActor: received message = Hello Universe
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Dispatcher dispatch(Envelope(Hello Galaxy,Actor[akka://exampleSystem/user/sender#-1400752577])) finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() called, shouldProcessMessage=true
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/sender]|Mailbox processMailbox() called, shouldProcessMessage=true
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() next=Envelope(Hello Galaxy,Actor[akka://exampleSystem/user/sender#-1400752577])
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/sender]|Mailbox processMailbox() next=null
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|EchoActor: received message = Hello Galaxy
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/sender]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() called, shouldProcessMessage=true
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/sender]|Mailbox run() finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() next=null
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox run() finished
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox run() called
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox run() called
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user/sender]|Mailbox run() called
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox processMailbox() called, shouldProcessMessage=false
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user/sender]|Mailbox processMailbox() called, shouldProcessMessage=false
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user/sender]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user/sender]|Mailbox run() finished
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() called, shouldProcessMessage=false
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox processMailbox() finished
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox run() called
Thread[exampleSystem-akka.actor.default-dispatcher-4,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox run() finished
Thread[exampleSystem-akka.actor.default-dispatcher-2,5,run-main-group-8]|[akka://exampleSystem/user/receiver]|Mailbox run() finished
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox run() finished
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox processMailbox() called, shouldProcessMessage=false
Thread[exampleSystem-akka.actor.default-dispatcher-3,5,run-main-group-8]|[akka://exampleSystem/user]|Mailbox processMailbox() finished&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official documentation of Akka Mailbox at &lt;a href=&quot;https://doc.akka.io/docs/akka/current/mailboxes.html&quot;&gt;https://doc.akka.io/docs/akka/current/mailboxes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka Dispatcher at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/dispatchers.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/dispatchers.html&lt;/a&gt;
Oracle’s official fork-join tutorial - &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&lt;/a&gt;
Oracle’s official fork-join article - &lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/fork-join-422606.html&quot;&gt;http://www.oracle.com/technetwork/articles/java/fork-join-422606.html&lt;/a&gt;
ForkJoinTask javadoc - &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html&lt;/a&gt;
ForkJoinPool javadoc - &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Dispatcher behavior]]></title><description><![CDATA[Overview The concept of Akka   might be unfamiliar to you and it is probably difficult to understand. So I am going to explain how…]]></description><link>https://richardimaoka.github.io/blog//dispatcher-behavior/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//dispatcher-behavior/</guid><pubDate>Mon, 12 Feb 2018 16:31:08 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/0tDFep0hOSI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;The concept of Akka &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/dispatchers.html?language=scala&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;&lt;/a&gt; might be unfamiliar to you and it is probably difficult to understand. So I am going to explain how Dispatcher works in detail here.&lt;/p&gt;
&lt;h2&gt;Meaning of “dispatch”&lt;/h2&gt;
&lt;p&gt;If you look up the meaning of the word “dispatch” in a dictionary, you would find it is almost same as “send”. In akka, &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; is, yes, what sends messages, but something more than that.&lt;/p&gt;
&lt;h2&gt;Dispatcher and Actor relationship&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/dispatcher-config-71bb79f013295f371bbb154394bc0b8e.jpg&quot; alt=&quot;dispatcher-config&quot;&gt;&lt;/p&gt;
&lt;p&gt;Firstly, &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; is configured for &lt;code class=&quot;language-text&quot;&gt;ActorSystem&lt;/code&gt;, typically in &lt;code class=&quot;language-text&quot;&gt;application.conf&lt;/code&gt;. There is at least default one, and you can &lt;a href=&quot;https://doc.akka.io/docs/akka/current/dispatchers.html#dispatchers&quot;&gt;also configure multiple &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;s&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; system &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorSystem&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;exampleSystem&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dispatchers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lookup&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;my-dispatcher&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As a rule of thumb, the &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; instance for the given name is created when the &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatchers.scala#L79&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;lookup&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;ActorSystem&lt;/code&gt;&lt;/a&gt; is called for the first time. You don’t normally call it yourself, but this lookup is done by akka. Another thing is the default &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; is already created upon &lt;code class=&quot;language-text&quot;&gt;ActorSystem&lt;/code&gt; initialization, as it calls &lt;code class=&quot;language-text&quot;&gt;lookup&lt;/code&gt; for the default internally.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/**
* Returns a dispatcher as specified in configuration. Please note that this
* method _may_ create and return a NEW dispatcher, _every_ call.
*
* Throws ConfigurationException if the specified dispatcher cannot be found in the configuration.
*/&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; lookup&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MessageDispatcher &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; lookupConfigurator&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dispatcher&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/dispatcher-actor-7b6a80fb086b1889109bdb71e0f6f72f.jpg&quot; alt=&quot;dispatcher-actor&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; is NOT part of &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;. One &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; can send messages to multiple &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;s. (NOTE: &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; doesn’t have routing capabilities. Routing is done by akka &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/routing.html#routing&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Router&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;Dispatcher and ExecutorService&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/dispatcher-executor-service-35308dce71584aa4d7cdfad5c6d455dd.jpg&quot; alt=&quot;dispatcher-executor-service&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; has &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; is like a pool of threads where you can execute code (&lt;code class=&quot;language-text&quot;&gt;Runnable&lt;/code&gt;) concurrently. See &lt;a href=&quot;../executor-and-execution-context&quot;&gt;Executor/ExecutorService in Java, and ExecutionContext behind Future in Scala&lt;/a&gt; for illustration and more details.&lt;/p&gt;
&lt;p&gt;Here is &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L47&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;executorService&lt;/code&gt; method&lt;/a&gt; of &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; executorService&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ExecutorServiceDelegate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The pool of threads from &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; is what invokes &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method, which will be explained later in this article.&lt;/p&gt;
&lt;h2&gt;Dispatcher and sender-side behavior&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/actor-cell-reference-6638f57fa06f7a2f08d0bd841a7eb514.jpg&quot; alt=&quot;actor-cell-reference&quot;&gt;&lt;/p&gt;
&lt;p&gt;Part of below is reharsing what was already discussed in &lt;a href=&quot;../local-minimal-sender&quot;&gt;Local Actor workflow part 1 - Sender side&lt;/a&gt;, but here more from the &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; perspective. &lt;/p&gt;
&lt;p&gt;(For remoting, there are several more steps to go through but it is combination of local message-passing and network via Netty, as discussed in &lt;a href=&quot;../remote-minimal-sender&quot;&gt;remoting articles&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;LocalActorRef&lt;/code&gt; is &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorRef.scala#L319&quot;&gt;coupled with &lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt;&lt;/a&gt;, which is hidden from users as private and it is implementation details of how akka messaging works.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; LocalActorRef&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; ActorRefWithCell
 &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; LocalRef  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; actorCell&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorCell &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;As you see below&lt;/a&gt;, &lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt; has a reference to &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; (&lt;code class=&quot;language-text&quot;&gt;val dispatcher:  MessageDispatcher&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; ActorCell&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; dispatcher&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;  MessageDispatcher&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; dungeon&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Dispatch &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;So when you do &lt;code class=&quot;language-text&quot;&gt;actorRef ! &amp;quot;hello&amp;quot;&lt;/code&gt;, that &lt;code class=&quot;language-text&quot;&gt;actorRef&lt;/code&gt; (whose type is &lt;code class=&quot;language-text&quot;&gt;LocalActorRef&lt;/code&gt;) already knows what &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; to use via &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L370&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also &lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt; extends &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/dungeon/Dispatch.scala#L27&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Dispatch&lt;/code&gt; trait&lt;/a&gt; and it has a refence to &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;, so &lt;code class=&quot;language-text&quot;&gt;LocalActorRef&lt;/code&gt; also knows which &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; to send the massage, via &lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; Dispatch &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorCell ⇒
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; mailbox&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Mailbox &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This couping of &lt;code class=&quot;language-text&quot;&gt;LocalActorRef&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; is what I meant by &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; doesn’t have routing capabilities in a “NOTE” earlier.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/sender-82d6c008ac87adf2e72a0389eab07010.jpg&quot; alt=&quot;sender&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;’s &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L52L56&quot;&gt;dispatch&lt;/a&gt; method is as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  receiver&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorCell&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  invocation&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Envelope
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; mbox &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; receiver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mailbox
  mbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enqueue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;receiver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; invocation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  registerForExecution&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbox&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;where &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L115&quot;&gt;registerForExecution&lt;/a&gt; is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; registerForExecution&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbox&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Mailbox&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  executorService execute mbox
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In the above code, &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;excutorService&lt;/code&gt; is executing &lt;code class=&quot;language-text&quot;&gt;mbox: Mailbox&lt;/code&gt;, because &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L56L57&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;&lt;/a&gt; extends &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;, which can be &lt;code class=&quot;language-text&quot;&gt;execute&lt;/code&gt;-d by &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/fork-join-1-a6354b55480d0404f2a1e8cc8cf61656.jpg&quot; alt=&quot;fork-join-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/fork-join-2-05d3f1320821da8a2108754cfb8375e2.jpg&quot; alt=&quot;fork-join-2&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; Mailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; messageQueue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MessageQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; ForkJoinTask&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; SystemMessageQueue 
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; Runnable &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Execution (i.e. processing) of &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; is run on a different &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt;, which was covered in &lt;a href=&quot;../local-minimal-receiver&quot;&gt;Local Actor workflow part 2 - Receiver side&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Dispatcher and receiver-side behavior&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/fork-join-3-b8aff16a96f1775898c83f3ca43c0658.jpg&quot; alt=&quot;fork-join-3&quot;&gt;&lt;/p&gt;
&lt;p&gt;When &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt; is executed, the &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L250&quot;&gt;following method of &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;&lt;/a&gt; is called, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@tailrec&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; processMailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// def dequeue(): Envelope = messageQueue.dequeue()&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dequeue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  actor invoke next
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  processMailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;it picks up a message from the message queue, and process it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/receiver-80a6300d25cf7552f05cceef167e99a5.jpg&quot; alt=&quot;receiver&quot;&gt;&lt;/p&gt;
&lt;p&gt;So this &lt;code class=&quot;language-text&quot;&gt;processMailbox&lt;/code&gt; method, called from &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; is what invokes your &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method you defined in your &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; MyActor &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; Actor &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;  
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;</content:encoded></item><item><title><![CDATA[Akka remoting minimal example part 3 - receiver side]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub . This is the last of three articles about akka’s remote…]]></description><link>https://richardimaoka.github.io/blog//remote-minimal-receiver/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//remote-minimal-receiver/</guid><pubDate>Fri, 09 Feb 2018 16:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/remote-minimal&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/YAuamfYBb1o&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;This is the last of three articles about akka’s remote message passing. The previous articles are here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../remote-minimal-setup&quot;&gt;Akka remoting minimal example part 1 - setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../remote-minimal-sender&quot;&gt;Akka remoting minimal example part 2 - sender side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;TcpHandlers&lt;/h3&gt;
&lt;p&gt;As in the previous article, Netty takes care of the message transport in the network layer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/netty-96343e72e3f9855be8e66c37ed135e02.jpg&quot; alt=&quot;netty&quot;&gt;&lt;/p&gt;
&lt;p&gt;Onc the receiver side, &lt;code class=&quot;language-text&quot;&gt;TcpHandler&lt;/code&gt; has the &lt;code class=&quot;language-text&quot;&gt;onMessage&lt;/code&gt; method, which is called when a message payload (serialized byte array) arrives on the receiver side. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/tcphandler-7a5f4eb307023f066db3ba2a77eaa318.jpg&quot; alt=&quot;tcphandler&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; TcpHandlers &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; onMessage&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    notifyListener&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
      InboundPayload&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ByteString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The above &lt;code class=&quot;language-text&quot;&gt;notifyListener&lt;/code&gt;  method is as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; notifyListener&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Channel&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HandleEvent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
    get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;channel&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; foreach &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; _ notify msg &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and &lt;code class=&quot;language-text&quot;&gt;notify&lt;/code&gt; performs usual local message passing via the familiar &lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; method, &lt;code class=&quot;language-text&quot;&gt;actor ! ev&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  final case class ActorHandleEventListener(actor: ActorRef) 
    extends HandleEventListener {
    
    override def notify(ev: HandleEvent): Unit =
      actor ! ev
  }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;EndPointReader and de-serialization&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/blog/deserialize-de187b0aca391605b3c8af965f49e7a7.jpg&quot; alt=&quot;deserialize&quot;&gt;&lt;/p&gt;
&lt;p&gt;There are some intermediate actor(s) passes through the payload after the &lt;code class=&quot;language-text&quot;&gt;notify&lt;/code&gt; method described above (in the case of this example, &lt;code class=&quot;language-text&quot;&gt;AkkaProtocolManager&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Afterwards, an important &lt;code class=&quot;language-text&quot;&gt;EndpointReader&lt;/code&gt; actor receives the payload. It has the following &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; EndpointReader&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receive&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Receive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; InboundPayload&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; transport&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maximumPayloadBytes ⇒
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;     
      msgDispatch&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;recipient&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;recipientAddress&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// msg.serializedMessage.message: ByteString &lt;/span&gt;
        msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serializedMessage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;senderOption
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;        &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;When &lt;code class=&quot;language-text&quot;&gt;EndPointReader&lt;/code&gt; receives the payload, it is de-serialized from a serialized byte array (represented as &lt;code class=&quot;language-text&quot;&gt;ByteString&lt;/code&gt;) to a Scala object, with the following call in &lt;code class=&quot;language-text&quot;&gt;DefaultMessageDispatcher&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class DefaultMessageDispatcher(
    ...
    lazy val payload: AnyRef =
      MessageSerializer.deserialize(
        system, 
        serializedMessage
      )
    ...
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;msgDispatch.dispatch&lt;/code&gt; in &lt;code class=&quot;language-text&quot;&gt;EndPointReader&lt;/code&gt; finally passes the deserialized message to the &lt;code class=&quot;language-text&quot;&gt;MessageReceiver&lt;/code&gt; actor via local message passing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/receiver-5310b90ed8761a134f9b10a3a878337f.jpg&quot; alt=&quot;receiver&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Instruction to run the example, and output&lt;/h2&gt;
&lt;p&gt;As this example uses &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/remoting.html&quot;&gt;Akka remoting&lt;/a&gt; to send a message,
you need to run two JVMs for the receiver and sender of the application respectively.&lt;/p&gt;
&lt;p&gt;Firstly, run the receiver side with the &lt;code class=&quot;language-text&quot;&gt;receiver&lt;/code&gt; argument supplied to &lt;code class=&quot;language-text&quot;&gt;Main&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd remote-minimal
&amp;gt; sbt
&amp;gt; runMain example.Main receiver&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You’ll get output like below, then it waits until the message is sent from the sender.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; runMain example.Main receiver
[info] Running example.Main receiver
Program args:
receiver
running startMessageReceiver()
[INFO] [02/03/2018 13:36:58.281] [run-main-0] [akka.remote.Remoting] Starting remoting
[INFO] [02/03/2018 13:36:58.462] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://receiverSystem@127.0.0.1:2551]
[INFO] [02/03/2018 13:36:58.464] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://receiverSystem@127.0.0.1:2551]
provider = remote
listening at port = 2551
started a receiver actor = Actor[akka://receiverSystem/user/receiver#-603875191]&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then in the same directory, run the same &lt;code class=&quot;language-text&quot;&gt;Main&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;sender&lt;/code&gt; as the argument&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; sbt
&amp;gt; runMain example.Main sender&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;this is the sender side output:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.Main sender
Program args:
sender
running startMessageSender()
[INFO] [02/03/2018 13:37:16.215] [run-main-0] [akka.remote.Remoting] Starting remoting
[INFO] [02/03/2018 13:37:16.427] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://senderSystem@127.0.0.1:2552]
[INFO] [02/03/2018 13:37:16.432] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://senderSystem@127.0.0.1:2552]
provider = remote
listening at port = 2552
sending a message to akka.tcp://receiverSystem@127.0.0.1:2551/user/receiver
[INFO] [02/03/2018 13:37:19.533] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Shutting down remote daemon.
[INFO] [02/03/2018 13:37:19.537] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.
[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.actor.default-dispatcher-4] [akka.remote.Remoting] Remoting shut down
[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remoting shut down.
[success] Total time: 5 s, completed Feb 3, 2018 1:37:19 PM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;then you see the receiver output as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;EchoActor: received message = Hello!!&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and immediately after that, the receiver side shows this error, which can be ignored.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[ERROR] [02/03/2018 13:37:19.572] [receiverSystem-akka.remote.default-remote-dispatcher-15] [akka.tcp://receiverSystem@127.0.0.1:2551/system/endpointManager/reliableEndpointWriter-akka.tcp%3A%2F%2FsenderSystem%40127.0.0.1%3A2552-0/endpointWriter] AssociationError [akka.tcp://receiverSystem@127.0.0.1:2551] &amp;lt;- [akka.tcp://senderSystem@127.0.0.1:2552]: Error [Shut down address: akka.tcp://senderSystem@127.0.0.1:2552] [
akka.remote.ShutDownAssociation: Shut down address: akka.tcp://senderSystem@127.0.0.1:2552
Caused by: akka.remote.transport.Transport$InvalidAssociationException: The remote system terminated the association because it is shutting down.
]&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As explained in &lt;a href=&quot;https://groups.google.com/forum/#!topic/akka-user/eerWNwRQ7o0&quot;&gt;this thrad in akka-user&lt;/a&gt; mailing list, the error happens specifically when you launch a process like this example from sbt, but when you compile your application and run it witout sbt, then the error disappears.&lt;/p&gt;
&lt;p&gt;Once everything is done, press the enter key on the receiver side’s console and you get this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[INFO] [02/03/2018 13:38:05.942] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Shutting down remote daemon.
[INFO] [02/03/2018 13:38:05.944] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.
[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.actor.default-dispatcher-3] [akka.remote.Remoting] Remoting shut down
[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.remote.default-remote-dispatcher-6] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remoting shut down.&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official documentation of Akka remoting at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/remoting.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/remoting.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka serialization at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/serialization.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Netty documentation at &lt;a href=&quot;https://netty.io/&quot;&gt;https://netty.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Executor/ExecutorService in Java, and ExecutionContext behind Future in Scala]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub . Thread in Java  and   has been there for long as the very…]]></description><link>https://richardimaoka.github.io/blog//executor-and-execution-context/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//executor-and-execution-context/</guid><pubDate>Wed, 07 Feb 2018 16:31:08 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/executor-and-execution-context&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/zgp2B-cuUMI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;h2&gt;Thread in Java&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/thread-46cd166852cb3bb57e031d8bab405132.jpg&quot; alt=&quot;thread&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Runnable&lt;/code&gt; has been there for long as the very first generation of concurrent execution approaches in Java. The concept and usage are rather simple, where you extend &lt;code class=&quot;language-text&quot;&gt;Runnable&lt;/code&gt; and implement the &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; method which represents the operation you want to execute concurrently.&lt;/p&gt;
&lt;p&gt;(&lt;code class=&quot;language-text&quot;&gt;Runnable&lt;/code&gt; is from Java, but here I’m defining a Scala class extending it.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; PrintRunnable &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; Runnable &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; run&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token string&quot;&gt;&quot;[${Thread.currentThread()}] - PrintRunnable run() is executed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html&quot;&gt;javadoc of &lt;code class=&quot;language-text&quot;&gt;Runnable&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then you instantiate a &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt; by passing in a &lt;code class=&quot;language-text&quot;&gt;Runnable&lt;/code&gt; instance, and call the &lt;code class=&quot;language-text&quot;&gt;start()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token string&quot;&gt;&quot;[${Thread.currentThread()}] - main thread&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; Thread&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; PrintRunnable&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;start&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html&quot;&gt;javadoc of &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then you will get output like this. The &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt; names are enclosed in &lt;code class=&quot;language-text&quot;&gt;[]&lt;/code&gt;, which show that the main thread - (i.e.) one which did &lt;code class=&quot;language-text&quot;&gt;t = new Thread(new PrintRunnable(1))&lt;/code&gt; - and the thread running &lt;code class=&quot;language-text&quot;&gt;Runnable&lt;/code&gt; are different - (i.e.) Concurrently executed.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[Thread[run-main-0,5,run-main-group-0]] - main thread
[Thread[pool-8-thread-1,5,run-main-group-0]] - PrintRunnable run() is executed&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Typically after you call the &lt;code class=&quot;language-text&quot;&gt;start()&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt;, you also call the &lt;code class=&quot;language-text&quot;&gt;join()&lt;/code&gt; method to wait until the thrad dies.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;join&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Executor and ExecutorService in Java&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/blog/interfaces-58c9ff9873a22582e5b84a6f127af378.jpg&quot; alt=&quot;interfaces&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next generation of Java concurrency execution approach was &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt;.
While &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt; allowed you handle concurrent execution in a separate thread, but when it comes to the point where you handle many threads for many different purposes in the same application, it becomes unmanagable.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; control &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt; instances in the background so that you don’t handle each single &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt; by yourself, which is tedious, but rather you do higher level of control by handling a group of &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt; instances (&lt;code class=&quot;language-text&quot;&gt;ThreadPool&lt;/code&gt;, which is not explained in this article though) via &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s look at the code - firstly &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt; is a very simple interface which only has this single &lt;code class=&quot;language-text&quot;&gt;execute&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Executor&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/**
     * Executes the given command at some time in the future.  The command
     * may execute in a new thread, in a pooled thread, or in the calling
     * thread, at the discretion of the {@code Executor} implementation.
     *
     * @param command the runnable task
     * @throws RejectedExecutionException if this task cannot be
     * accepted for execution
     * @throws NullPointerException if command is null
     */&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Runnable command&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html&quot;&gt;javadoc of &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; is also a Java &lt;code class=&quot;language-text&quot;&gt;interface&lt;/code&gt; which extends &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExecutorService&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Executor&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and define those lifecycle management methods (and some other methods).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  List&lt;span class=&quot;token generics function&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Runnable&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;shutdownNow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isShutdown&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isTerminated&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;awaitTermination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;long&lt;/span&gt; timeout&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TimeUnit unit&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; InterruptedException&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&quot;&gt;javadoc of &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are factory methods available in the &lt;code class=&quot;language-text&quot;&gt;Executors&lt;/code&gt; class like this one, which creates a group of 5 threads in the background:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;val executor = Executors.newFixedThreadPool(5);
executor.execute(new PrintRunnable)&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/executorService-91862e98b381bb414a432b8afa9ae502.jpg&quot; alt=&quot;executorService&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/executorService2-41484c3a90ad5f1e855f031beb002e89.jpg&quot; alt=&quot;executorService2&quot;&gt;&lt;/p&gt;
&lt;p&gt;and the &lt;code class=&quot;language-text&quot;&gt;execute&lt;/code&gt; call let &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; execute &lt;code class=&quot;language-text&quot;&gt;PrintRunnable&lt;/code&gt; in the background threads.
Note that you didn’t specify which exact thread the &lt;code class=&quot;language-text&quot;&gt;PrintRunnable&lt;/code&gt; should be run in, but instead, you asked &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; to decide the actual thread to run it.&lt;/p&gt;
&lt;h2&gt;ExecutionContext, and how it works with Future&lt;/h2&gt;
&lt;p&gt;Now we move onto Scala’s &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt;. Scala’s &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; is used with Scala’s &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt;, both of which I will explain below in the article.&lt;/p&gt;
&lt;p&gt;(I’m intentionally saying &lt;strong&gt;Scala’s&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; as there is also Java’s &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; and that is different from Scala’s. I will not talk about the Java &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; in this article.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/executionContext-be4b22319ed9bc62a679ef6265984d2d.jpg&quot; alt=&quot;executionContext&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can think of &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt; in Scala is kind of equivalent to &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt; in Java.
It has the following &lt;code class=&quot;language-text&quot;&gt;execute&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;trait ExecutionContext {
  def execute(runnable: Runnable): Unit
  .. // only few other methods (two other methods as of Scala 2.12.4)
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/future-e7f56e76d0381aaa9c0f3945591632c5.jpg&quot; alt=&quot;future&quot;&gt;&lt;/p&gt;
&lt;p&gt;However, you don’t call the &lt;code class=&quot;language-text&quot;&gt;execute()&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt; directly, but you should  &lt;code class=&quot;language-text&quot;&gt;implicit&lt;/code&gt;ly declare &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt; like below.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;implicit val executionContext: ExecutionContext = 
  ExecutionContext.Implicits.global&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;(Little bit side-tracked, but in production code, you shouldn’t use &lt;code class=&quot;language-text&quot;&gt;ExecutionContext.Implicits.global&lt;/code&gt;, as you will need more flexibility and careful configuration of the background thread pool, like number of threads, whether it’s fixed thread pool or fork-join, etc)&lt;/p&gt;
&lt;p&gt;Then you call &lt;code class=&quot;language-text&quot;&gt;Future{...}&lt;/code&gt; which is &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; companion object’s &lt;code class=&quot;language-text&quot;&gt;apply&lt;/code&gt; method, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def printThreadInsideFuture(): Unit = 
  println(s&amp;quot;[${Thread.currentThread()}] - printThreadInsideFuture() is executed&amp;quot;)

val f = Future{ printThreadInsideFuture() }  &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;that takes an &lt;code class=&quot;language-text&quot;&gt;implicit&lt;/code&gt; parameter of &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; apply&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;body&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; executor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ExecutionContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Future&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;T&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;By doing this, you let the &lt;code class=&quot;language-text&quot;&gt;implicit&lt;/code&gt;-ly passed &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt; execute the body of &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; you passed in, in one of the background threads.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/onComplete-385cb92e7c1a00a9b73343a2e2150e71.jpg&quot; alt=&quot;onComplete&quot;&gt;&lt;/p&gt;
&lt;p&gt;Scala’s &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; also has &lt;code class=&quot;language-text&quot;&gt;onComplete&lt;/code&gt; method which lets you execute a callback function taking the return value from the &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; body you earlier passed.&lt;/p&gt;
&lt;p&gt;The callback should have &lt;code class=&quot;language-text&quot;&gt;case Success()&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;case Future&lt;/code&gt; because a &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; can fail without completing the passed-in &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; body for whatever reasons.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; printThreadInsideCallback&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token string&quot;&gt;&quot;[${Thread.currentThread()}] - printThreadInsideCallback() is executed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// The callback passed to onComplete is either be &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// applied immediately or be scheduled asynchronously.&lt;/span&gt;
f1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onComplete&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Success&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; 
    printThreadInsideCallback&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Failure&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
    println&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Future failed!!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.scala-lang.org/api/2.12.4/scala/concurrent/Future.html&quot;&gt;Scaladoc&lt;/a&gt;, &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;onComplete&lt;/code&gt; has the following comment, explaining its behavior.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;When this future is completed, either through an exception, or a value,
apply the provided function.

If the future has already been completed,
this will either be applied immediately or be scheduled asynchronously.

Note that the returned value of `f` will be discarded.&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Details of &lt;code class=&quot;language-text&quot;&gt;onComplete&lt;/code&gt; can be found in &lt;a href=&quot;https://docs.scala-lang.org/overviews/core/futures.html&quot;&gt;the official &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; doc&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Inter-operabilities between Executor/ExecutorService and ExecutionContext&lt;/h2&gt;
&lt;p&gt;You might get into a situation where you have a Scala application dependent on some Java libraries, which only expects &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt;, not knowing Scala &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt; at all.&lt;/p&gt;
&lt;p&gt;To deal with such a situation, Scala provides the following two traits bridging the gap between &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt;/&lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt;. You’ll create an instance of eitehr &lt;code class=&quot;language-text&quot;&gt;ExecutionContextExecutor&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;ExecutionContextExecutorService&lt;/code&gt;, then that can be passed as &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt;/&lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; to Java libraries, as well as &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt; to Scala libraries.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;/**
 * An ExecutionContext that is also a
 * Java Executor.
 */
trait ExecutionContextExecutor 
  extends ExecutionContext 
  with Executor&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/**
 * An ExecutionContext that is also a
 * Java ExecutorService.
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; ExecutionContextExecutorService 
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; ExecutionContextExecutor 
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; ExecutorService&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;(Indeed for example, Akka’s &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; extends &lt;code class=&quot;language-text&quot;&gt;ExecutionContextExecutor&lt;/code&gt; so that it works as &lt;code class=&quot;language-text&quot;&gt;ExecutionContext&lt;/code&gt; to run &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; bodies, and &lt;code class=&quot;language-text&quot;&gt;Executor&lt;/code&gt; to work in Java libraries)&lt;/p&gt;
&lt;h2&gt;Instruction to run the example, and output&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd executor-and-execution-context
&amp;gt; sbt&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;There are multiple &lt;code class=&quot;language-text&quot;&gt;object Main&lt;/code&gt; defined under separate packages.
So, to run the thread example under the &lt;code class=&quot;language-text&quot;&gt;example.thread&lt;/code&gt; package:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; runMain example.thread.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.thread.Main
[Thread[run-main-1,5,run-main-group-1]] - main thread
[Thread[Thread-4,5,run-main-group-1]] - PrintRunnable(2) run() is executed
[Thread[Thread-3,5,run-main-group-1]] - PrintRunnable(1) run() is executed
[Thread[Thread-6,5,run-main-group-1]] - PrintRunnable(4) run() is executed
[Thread[Thread-8,5,run-main-group-1]] - PrintRunnable(6) run() is executed
[Thread[Thread-5,5,run-main-group-1]] - PrintRunnable(3) run() is executed
[Thread[Thread-9,5,run-main-group-1]] - PrintRunnable(7) run() is executed
[Thread[Thread-12,5,run-main-group-1]] - PrintRunnable(10) run() is executed
[Thread[Thread-7,5,run-main-group-1]] - PrintRunnable(5) run() is executed
[Thread[Thread-11,5,run-main-group-1]] - PrintRunnable(9) run() is executed
[Thread[Thread-13,5,run-main-group-1]] - PrintRunnable(11) run() is executed
[Thread[Thread-10,5,run-main-group-1]] - PrintRunnable(8) run() is executed
[Thread[Thread-14,5,run-main-group-1]] - PrintRunnable(12) run() is executed
[success] Total time: 1 s, completed Feb 4, 2018 5:01:20 PM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;For the Executor/ExecutorService example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; runMain example.executor.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.executor.Main
[Thread[run-main-0,5,run-main-group-0]] - main thread
[Thread[pool-8-thread-1,5,run-main-group-0]] - PrintRunnable(1) run() is executed
[Thread[pool-8-thread-2,5,run-main-group-0]] - PrintRunnable(2) run() is executed
[Thread[pool-8-thread-3,5,run-main-group-0]] - PrintRunnable(3) run() is executed
[Thread[pool-8-thread-1,5,run-main-group-0]] - PrintRunnable(6) run() is executed
[Thread[pool-8-thread-4,5,run-main-group-0]] - PrintRunnable(4) run() is executed
[Thread[pool-8-thread-2,5,run-main-group-0]] - PrintRunnable(7) run() is executed
[Thread[pool-8-thread-3,5,run-main-group-0]] - PrintRunnable(8) run() is executed
[Thread[pool-8-thread-5,5,run-main-group-0]] - PrintRunnable(5) run() is executed
[Thread[pool-8-thread-2,5,run-main-group-0]] - PrintRunnable(11) run() is executed
[Thread[pool-8-thread-4,5,run-main-group-0]] - PrintRunnable(10) run() is executed
[Thread[pool-8-thread-1,5,run-main-group-0]] - PrintRunnable(9) run() is executed
[Thread[pool-8-thread-3,5,run-main-group-0]] - PrintRunnable(12) run() is executed
[success] Total time: 15 s, completed Feb 4, 2018 3:26:02 PM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then the Future example&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; runMain example.future.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.future.Main
[Thread[run-main-3,5,run-main-group-3]] - main thread
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(1) is executed
[Thread[scala-execution-context-global-199,5,main]] - printThreadName(2) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(3) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(4) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(5) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(6) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(7) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(8) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(9) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(10) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(11) is executed
[Thread[scala-execution-context-global-200,5,main]] - printThreadName(12) is executed
[success] Total time: 3 s, completed Feb 4, 2018 4:40:30 PM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Oracle official doc for Thread at - &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/threads.html&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/threads.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Javadoc of &lt;code class=&quot;language-text&quot;&gt;java.lang.Thraed&lt;/code&gt; at - &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Javadoc of &lt;code class=&quot;language-text&quot;&gt;java.lang.Runnable&lt;/code&gt; at - &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Javadoc of &lt;code class=&quot;language-text&quot;&gt;java.util.concurrent.Executor&lt;/code&gt; at - &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Javadoc of &lt;code class=&quot;language-text&quot;&gt;java.util.concurrent.ExecutorService&lt;/code&gt; at - &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scala official documentation of &lt;code class=&quot;language-text&quot;&gt;Future&lt;/code&gt; at - &lt;a href=&quot;https://docs.scala-lang.org/overviews/core/futures.html&quot;&gt;https://docs.scala-lang.org/overviews/core/futures.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scaladoc of &lt;code class=&quot;language-text&quot;&gt;scala.concurrent.Future&lt;/code&gt; at - &lt;a href=&quot;https://www.scala-lang.org/api/2.12.4/scala/concurrent/Future.html&quot;&gt;https://www.scala-lang.org/api/2.12.4/scala/concurrent/Future.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scaladoc of &lt;code class=&quot;language-text&quot;&gt;scala.concurrent.Future&lt;/code&gt; at - &lt;a href=&quot;https://www.scala-lang.org/api/2.12.4/scala/concurrent/ExecutionContext.html&quot;&gt;https://www.scala-lang.org/api/2.12.4/scala/concurrent/ExecutionContext.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Akka remoting minimal example part 2 - sender side]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub . This is continued from  the previous article , and now we are…]]></description><link>https://richardimaoka.github.io/blog//remote-minimal-sender/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//remote-minimal-sender/</guid><pubDate>Sat, 03 Feb 2018 16:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/remote-minimal&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/TJJUcaJqUeY&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;This is continued from &lt;a href=&quot;../remote-minimal-setup&quot;&gt;the previous article&lt;/a&gt;, and now we are going deep into the implementation and behavior of akka remoting on the sender side.&lt;/p&gt;
&lt;h3&gt;Workflow&lt;/h3&gt;
&lt;p&gt;As in the &lt;code class=&quot;language-text&quot;&gt;Main&lt;/code&gt; of this example, the sender side sends a message &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; to the receiver side, but in this example, as it uses remoting, the receiver side is referenced by &lt;code class=&quot;language-text&quot;&gt;ActorSelection&lt;/code&gt; instead of local &lt;code class=&quot;language-text&quot;&gt;ActorRef&lt;/code&gt; unlike the &lt;a href=&quot;../local-minimal-sender&quot;&gt;local sender example&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; selection&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorSelection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actorSelection&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

selection &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello!!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ActorSelection&lt;/code&gt; has &lt;code class=&quot;language-text&quot;&gt;path&lt;/code&gt; inside, which is a URL of the target actor. The components of the &lt;code class=&quot;language-text&quot;&gt;path&lt;/code&gt; URL is shown as follows: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; val path = &amp;quot;akka.tcp://receiverSystem@127.0.0.1:2551/user/receiver&amp;quot;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/path-95b81a72016011952a4d619f7c43c935.jpg&quot; alt=&quot;path&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can find more detail about akka’s path &lt;a href=&quot;https://doc.akka.io/docs/akka/current/general/addressing.html?language=scala#actor-references-paths-and-addresses&quot;&gt;in the official documentation&lt;/a&gt;, and &lt;a href=&quot;https://doc.akka.io/docs/akka/current/remoting.html#looking-up-remote-actors&quot;&gt;components of the path&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let’s look into the &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorSelection.scala#L265&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; method&lt;/a&gt; of &lt;code class=&quot;language-text&quot;&gt;ActorSelection&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;trait ScalaActorSelection {
  this: ActorSelection ⇒

  def !(msg: Any)
       (implicit sender: ActorRef = Actor.noSender) = 
    tell(msg, sender)
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and the below &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorSelection.scala#L44L47&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;tell&lt;/code&gt; method&lt;/a&gt; called from the above. You can see that the original message &lt;code class=&quot;language-text&quot;&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt; is wrapped into &lt;code class=&quot;language-text&quot;&gt;ActorSelectionMessage&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def tell(
  msg: Any,
  sender: ActorRef
): Unit =
  ActorSelection.deliverSelection(
    ...,
    ActorSelectionMessage(msg, ...)
  )&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/actorselectionmessage-8056069cb9493407ef88daac5b0c582c.jpg&quot; alt=&quot;actorselectionmessage&quot;&gt;&lt;/p&gt;
&lt;p&gt;Through the &lt;code class=&quot;language-text&quot;&gt;deliverSelection&lt;/code&gt; method, &lt;code class=&quot;language-text&quot;&gt;ActorSelection&lt;/code&gt; calls &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-remote/src/main/scala/akka/remote/RemoteActorRefProvider.scala#L94&quot;&gt;the following method of &lt;code class=&quot;language-text&quot;&gt;RemoteActorRef&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//remote: RemoteTransport&lt;/span&gt;
  remote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;send&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Option&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sender&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;remote&lt;/code&gt; is an instance of &lt;code class=&quot;language-text&quot;&gt;RemoteTransport&lt;/code&gt; which has the following &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-remote/src/main/scala/akka/remote/Remoting.scala#L222L225&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;send&lt;/code&gt; method&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; send&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Some&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;manager&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    ⇒ manager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tell&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Send&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;manager&lt;/code&gt; is ActorRef pointing to an &lt;code class=&quot;language-text&quot;&gt;EndPointManager&lt;/code&gt;. (More precisely, there is actually one more actor in-between, but the message is anyway delivered to &lt;code class=&quot;language-text&quot;&gt;EndPointManager&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/endpointmanager-2560d7337fa371cd16000085e636fded.jpg&quot; alt=&quot;endpointmanager&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;EndpointManager&lt;/code&gt; manager &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-remote/src/main/scala/akka/remote/Endpoint.scala#L567&quot;&gt;has a buffer inside&lt;/a&gt;, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;val buffer = new java.util.LinkedList[AnyRef]&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and upon flushing the buffer, &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-remote/src/main/scala/akka/remote/Endpoint.scala#L673L735&quot;&gt;the &lt;code class=&quot;language-text&quot;&gt;sendBufferedMessages&lt;/code&gt; method&lt;/a&gt; is called to efficiently send buffered messages via network. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def sendBufferedMessages(): Unit = {
  ...
  val ok = writePrioLoop() &amp;amp;&amp;amp; writeLoop(SendBufferBatchSize)
  ...
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The reason for this buffering behavior is, if my understanding is correct, because there is throughput gap between local message-passing (up to &lt;code class=&quot;language-text&quot;&gt;EndPointWriter&lt;/code&gt;) and the remote message-passing (after &lt;code class=&quot;language-text&quot;&gt;EndPointWriter&lt;/code&gt;), so this buffering behavior will fill in the gap and keep the overall throughput of whole message-passing high.&lt;/p&gt;
&lt;p&gt;There is a following method in &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-remote/src/main/scala/akka/remote/Endpoint.scala#L777L823&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;EndpointWriter&lt;/code&gt;&lt;/a&gt;,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//class EndpointWriter in akka.remote.Endpoint.scala
  def writeSend(s: Send): Boolean = try {
    ...
      
      val pdu: ByteString = codec.constructMessage(
        ..., 
        serializeMessage(s.message), 
        ...)

      ...
      val ok = h.write(pdu)
    ...
  }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;which performs message serialization, so that the message is converted to a payload which can be passed via network. As akka doc’s &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html&quot;&gt;serialization section&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, messages that have to escape the JVM to reach an actor running on a different host have to undergo some form of serialization (i.e. the objects have to be converted to and from byte arrays).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/blog/serialize-c15d3e21df298bae63af63ee49bfbe24.jpg&quot; alt=&quot;serialize&quot;&gt;&lt;/p&gt;
&lt;p&gt;serialization converts a JVM object into &lt;code class=&quot;language-text&quot;&gt;Array[Byte]&lt;/code&gt;. The above &lt;code class=&quot;language-text&quot;&gt;writeSend&lt;/code&gt; converts &lt;code class=&quot;language-text&quot;&gt;Array[Byte]&lt;/code&gt; further into &lt;code class=&quot;language-text&quot;&gt;ByteString&lt;/code&gt; by &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/util/ByteString.scala#L25&quot;&gt;its &lt;code class=&quot;language-text&quot;&gt;apply&lt;/code&gt; method&lt;/a&gt;. &lt;code class=&quot;language-text&quot;&gt;ByteString&lt;/code&gt; is extensively used in Akka when payload needs to be send via network.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object ByteString {

  /**
   * Creates a new ByteString by copying a byte array.
   */
  def apply(bytes: Array[Byte]): ByteString = CompactByteString(bytes)&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now it comes down to the point between the application (akka) layer and the network layer. The &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-remote/src/main/scala/akka/remote/transport/netty/TcpSupport.scala#L86L103&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;write&lt;/code&gt; method&lt;/a&gt; of &lt;code class=&quot;language-text&quot;&gt;TcpAssociationHandle&lt;/code&gt; has &lt;code class=&quot;language-text&quot;&gt;Channel&lt;/code&gt; class instance where the &lt;code class=&quot;language-text&quot;&gt;Channel&lt;/code&gt; class is defined in the &lt;code class=&quot;language-text&quot;&gt;Netty&lt;/code&gt; library.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//Channel is a class in netty, so from here the work is passed to netty
private[remote] class TcpAssociationHandle(
  val localAddress:    Address,
  val remoteAddress:   Address,
  val transport:       NettyTransport,
  private val channel: Channel)
  extends AssociationHandle {
  import transport.executionContext

  override val readHandlerPromise: Promise[HandleEventListener] = Promise()

  override def write(payload: ByteString): Boolean =
    if (channel.isWritable &amp;amp;&amp;amp; channel.isOpen) {
      channel.write(ChannelBuffers.wrappedBuffer(payload.asByteBuffer))
      true
    } else false&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/netty-96343e72e3f9855be8e66c37ed135e02.jpg&quot; alt=&quot;netty&quot;&gt;&lt;/p&gt;
&lt;p&gt;So this lets netty take care of payload transfer to a remote JVM.&lt;/p&gt;
&lt;h2&gt;Instruction to run the example, and output&lt;/h2&gt;
&lt;p&gt;As this example uses &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/remoting.html&quot;&gt;Akka remoting&lt;/a&gt; to send a message,
you need to run two JVMs for the receiver and sender of the application respectively.&lt;/p&gt;
&lt;p&gt;Firstly, run the receiver side with the &lt;code class=&quot;language-text&quot;&gt;receiver&lt;/code&gt; argument supplied to &lt;code class=&quot;language-text&quot;&gt;Main&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd remote-minimal
&amp;gt; sbt
&amp;gt; runMain example.Main receiver&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You’ll get output like below, then it waits until the message is sent from the sender.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; runMain example.Main receiver
[info] Running example.Main receiver
Program args:
receiver
running startMessageReceiver()
[INFO] [02/03/2018 13:36:58.281] [run-main-0] [akka.remote.Remoting] Starting remoting
[INFO] [02/03/2018 13:36:58.462] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://receiverSystem@127.0.0.1:2551]
[INFO] [02/03/2018 13:36:58.464] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://receiverSystem@127.0.0.1:2551]
provider = remote
listening at port = 2551
started a receiver actor = Actor[akka://receiverSystem/user/receiver#-603875191]&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then in the same directory, run the same &lt;code class=&quot;language-text&quot;&gt;Main&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;sender&lt;/code&gt; as the argument&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; sbt
&amp;gt; runMain example.Main sender&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;this is the sender side output:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.Main sender
Program args:
sender
running startMessageSender()
[INFO] [02/03/2018 13:37:16.215] [run-main-0] [akka.remote.Remoting] Starting remoting
[INFO] [02/03/2018 13:37:16.427] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://senderSystem@127.0.0.1:2552]
[INFO] [02/03/2018 13:37:16.432] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://senderSystem@127.0.0.1:2552]
provider = remote
listening at port = 2552
sending a message to akka.tcp://receiverSystem@127.0.0.1:2551/user/receiver
[INFO] [02/03/2018 13:37:19.533] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Shutting down remote daemon.
[INFO] [02/03/2018 13:37:19.537] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.
[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.actor.default-dispatcher-4] [akka.remote.Remoting] Remoting shut down
[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remoting shut down.
[success] Total time: 5 s, completed Feb 3, 2018 1:37:19 PM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;then you see the receiver output as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;EchoActor: received message = Hello!!&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and immediately after that, the receiver side shows this error, which can be ignored.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[ERROR] [02/03/2018 13:37:19.572] [receiverSystem-akka.remote.default-remote-dispatcher-15] [akka.tcp://receiverSystem@127.0.0.1:2551/system/endpointManager/reliableEndpointWriter-akka.tcp%3A%2F%2FsenderSystem%40127.0.0.1%3A2552-0/endpointWriter] AssociationError [akka.tcp://receiverSystem@127.0.0.1:2551] &amp;lt;- [akka.tcp://senderSystem@127.0.0.1:2552]: Error [Shut down address: akka.tcp://senderSystem@127.0.0.1:2552] [
akka.remote.ShutDownAssociation: Shut down address: akka.tcp://senderSystem@127.0.0.1:2552
Caused by: akka.remote.transport.Transport$InvalidAssociationException: The remote system terminated the association because it is shutting down.
]&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As explained in &lt;a href=&quot;https://groups.google.com/forum/#!topic/akka-user/eerWNwRQ7o0&quot;&gt;this thrad in akka-user&lt;/a&gt; mailing list, the error happens specifically when you launch a process like this example from sbt, but when you compile your application and run it witout sbt, then the error disappears.&lt;/p&gt;
&lt;p&gt;Once everything is done, press the enter key on the receiver side’s console and you get this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[INFO] [02/03/2018 13:38:05.942] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Shutting down remote daemon.
[INFO] [02/03/2018 13:38:05.944] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.
[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.actor.default-dispatcher-3] [akka.remote.Remoting] Remoting shut down
[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.remote.default-remote-dispatcher-6] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remoting shut down.&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official documentation of Akka remoting at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/remoting.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/remoting.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka serialization at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/serialization.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Netty documentation at &lt;a href=&quot;https://netty.io/&quot;&gt;https://netty.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Akka remoting minimal example part 1 - setup]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub . The next article  explains how this remoting example works on…]]></description><link>https://richardimaoka.github.io/blog//remote-minimal-setup/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//remote-minimal-setup/</guid><pubDate>Fri, 02 Feb 2018 16:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/remote-minimal&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/YYGQYSpoBhE&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;../remote-minimal-sender&quot;&gt;The next article&lt;/a&gt; explains how this remoting example works on the sender side.&lt;/p&gt;
&lt;h2&gt;Instruction to run the example, and output&lt;/h2&gt;
&lt;p&gt;As this example uses &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/remoting.html&quot;&gt;Akka remoting&lt;/a&gt; to send a message,
you need to run two JVMs for the receiver and sender of the application respectively.&lt;/p&gt;
&lt;p&gt;Firstly, run the receiver side with the &lt;code class=&quot;language-text&quot;&gt;receiver&lt;/code&gt; argument supplied to &lt;code class=&quot;language-text&quot;&gt;Main&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd remote-minimal
&amp;gt; sbt
&amp;gt; runMain example.Main receiver&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You’ll get output like below, then it waits until the message is sent from the sender.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; runMain example.Main receiver
[info] Running example.Main receiver
Program args:
receiver
running startMessageReceiver()
[INFO] [02/03/2018 13:36:58.281] [run-main-0] [akka.remote.Remoting] Starting remoting
[INFO] [02/03/2018 13:36:58.462] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://receiverSystem@127.0.0.1:2551]
[INFO] [02/03/2018 13:36:58.464] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://receiverSystem@127.0.0.1:2551]
provider = remote
listening at port = 2551
started a receiver actor = Actor[akka://receiverSystem/user/receiver#-603875191]&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then in the same directory, run the same &lt;code class=&quot;language-text&quot;&gt;Main&lt;/code&gt; with &lt;code class=&quot;language-text&quot;&gt;sender&lt;/code&gt; as the argument&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; sbt
&amp;gt; runMain example.Main sender&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;this is the sender side output:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.Main sender
Program args:
sender
running startMessageSender()
[INFO] [02/03/2018 13:37:16.215] [run-main-0] [akka.remote.Remoting] Starting remoting
[INFO] [02/03/2018 13:37:16.427] [run-main-0] [akka.remote.Remoting] Remoting started; listening on addresses :[akka.tcp://senderSystem@127.0.0.1:2552]
[INFO] [02/03/2018 13:37:16.432] [run-main-0] [akka.remote.Remoting] Remoting now listens on addresses: [akka.tcp://senderSystem@127.0.0.1:2552]
provider = remote
listening at port = 2552
sending a message to akka.tcp://receiverSystem@127.0.0.1:2551/user/receiver
[INFO] [02/03/2018 13:37:19.533] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Shutting down remote daemon.
[INFO] [02/03/2018 13:37:19.537] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.
[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.actor.default-dispatcher-4] [akka.remote.Remoting] Remoting shut down
[INFO] [02/03/2018 13:37:19.577] [senderSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://senderSystem@127.0.0.1:2552/system/remoting-terminator] Remoting shut down.
[success] Total time: 5 s, completed Feb 3, 2018 1:37:19 PM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;then you see the receiver output as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;EchoActor: received message = Hello!!&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;and immediately after that, the receiver side shows this error, which can be ignored.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[ERROR] [02/03/2018 13:37:19.572] [receiverSystem-akka.remote.default-remote-dispatcher-15] [akka.tcp://receiverSystem@127.0.0.1:2551/system/endpointManager/reliableEndpointWriter-akka.tcp%3A%2F%2FsenderSystem%40127.0.0.1%3A2552-0/endpointWriter] AssociationError [akka.tcp://receiverSystem@127.0.0.1:2551] &amp;lt;- [akka.tcp://senderSystem@127.0.0.1:2552]: Error [Shut down address: akka.tcp://senderSystem@127.0.0.1:2552] [
akka.remote.ShutDownAssociation: Shut down address: akka.tcp://senderSystem@127.0.0.1:2552
Caused by: akka.remote.transport.Transport$InvalidAssociationException: The remote system terminated the association because it is shutting down.
]&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As explained in &lt;a href=&quot;https://groups.google.com/forum/#!topic/akka-user/eerWNwRQ7o0&quot;&gt;this thrad in akka-user&lt;/a&gt; mailing list, the error happens specifically when you launch a process like this example from sbt, but when you compile your application and run it witout sbt, then the error disappears.&lt;/p&gt;
&lt;p&gt;Once everything is done, press the enter key on the receiver side’s console and you get this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[INFO] [02/03/2018 13:38:05.942] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Shutting down remote daemon.
[INFO] [02/03/2018 13:38:05.944] [receiverSystem-akka.remote.default-remote-dispatcher-5] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remote daemon shut down; proceeding with flushing remote transports.
[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.actor.default-dispatcher-3] [akka.remote.Remoting] Remoting shut down
[INFO] [02/03/2018 13:38:05.960] [receiverSystem-akka.remote.default-remote-dispatcher-6] [akka.tcp://receiverSystem@127.0.0.1:2551/system/remoting-terminator] Remoting shut down.&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official documentation at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/remoting.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/remoting.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Local Actor workflow part 2 - Receiver side]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub . This is continued from the previous article,  Local Actor…]]></description><link>https://richardimaoka.github.io/blog//local-minimal-receiver/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//local-minimal-receiver/</guid><pubDate>Mon, 29 Jan 2018 16:31:08 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/local-minimal&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/LbuLAtN20HA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;This is continued from the previous article, &lt;a href=&quot;../local-minimal-sender&quot;&gt;Local Actor workflow part 1 - Sender side&lt;/a&gt;. I would recommend you to read that article too.&lt;/p&gt;
&lt;p&gt;Also, later I am going to write the remote versions of articles to illustrate the message-sending/receiving behavior of Akka Actor when sending across different JVMs.&lt;/p&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;As in bottom of the previous &lt;a href=&quot;../local-minimal-sender&quot;&gt;Local Actor workflow part 1 - Sender side&lt;/a&gt; article, the below  &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L115&quot;&gt;registerForExecution&lt;/a&gt; method will let Java’s &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; process &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L56L57&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;&lt;/a&gt; , which is defined as &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;, to be executed on a different thread.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; registerForExecution&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbox&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Mailbox&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  executorService execute mbox
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; Mailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; messageQueue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MessageQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; ForkJoinTask&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; SystemMessageQueue 
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; Runnable &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;When &lt;code class=&quot;language-text&quot;&gt;ExecutorService&lt;/code&gt; executes the &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; as &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;, then the following &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/java/akka/dispatch/forkjoin/ForkJoinWorkerThread.java#L103&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;ForkJoinWorkerThread&lt;/code&gt;&lt;/a&gt; is called:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;(Somehow a copy of ForkJoinWorkerThread from Java’s standard library is in akka’s source code … not sure why)&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;run&lt;/code&gt; method above runs the &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L250&quot;&gt;following method of &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@tailrec&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; processMailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// def dequeue(): Envelope = messageQueue.dequeue()&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dequeue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  actor invoke next
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  processMailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;By &lt;code class=&quot;language-text&quot;&gt;dequeue&lt;/code&gt;-ing an &lt;code class=&quot;language-text&quot;&gt;Envelope&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; calls the &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L488&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;invoke&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt;&lt;/a&gt;, &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/processmailbox-94910b51aebb7b417483b0a787ba8151.jpg&quot; alt=&quot;processmailbox&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; invoke&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messageHandle&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Envelope&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  receiveMessage&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;which unpacks the message from &lt;code class=&quot;language-text&quot;&gt;Envelope&lt;/code&gt; then calls &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L527&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;receiveMessage&lt;/code&gt; of &lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt;&lt;/a&gt;,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// def actor: Actor = ... in ActorCell&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receiveMessage&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aroundReceive&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;behaviorStack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/receivemessage-e0b1f55a0e7451ee216a1da37f8b2e9c.jpg&quot; alt=&quot;receivemessage&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here, &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt; has an important method called &lt;code class=&quot;language-text&quot;&gt;aroundReceive&lt;/code&gt;, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; aroundReceive&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;receive&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Receive&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    receive&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;applyOrElse&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;notHandledFun&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;asInstanceOf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;AnyRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; eq Actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;NotHandled
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    unhandled&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;which, as the name suggests, wraps around &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;’s &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt; method. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; MessageReceiver &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; Actor &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; s&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt;
      EchoActor&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; received message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $s&quot;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/receive-9bf14710a79d18dd691d0599f5f6ee4d.jpg&quot; alt=&quot;receive&quot;&gt;&lt;/p&gt;
&lt;p&gt;In &lt;code class=&quot;language-text&quot;&gt;aroundReceive&lt;/code&gt; you can see &lt;code class=&quot;language-text&quot;&gt;receive.applyOrElse&lt;/code&gt; is called, and if there is no match in &lt;code class=&quot;language-text&quot;&gt;receive&lt;/code&gt;’s patter-match, it will call &lt;code class=&quot;language-text&quot;&gt;unhandled&lt;/code&gt; of &lt;code class=&quot;language-text&quot;&gt;Actor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Up to here, we have pretty much covered the receiver side of the behavior in actor’s message passing. Next up, I will go through how this changes when sending to a remote JVM.&lt;/p&gt;
&lt;h2&gt;Instruction to run the example&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd local-minimal
&amp;gt; sbt
&amp;gt; runMain example.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;p&gt;Some &lt;code class=&quot;language-text&quot;&gt;println&lt;/code&gt; calls are inserted in the &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/local-minimal&quot;&gt;complete example at GitHub&lt;/a&gt; to illustrate the behavior.&lt;/p&gt;
&lt;p&gt;Thread names are shown as [exampleSystem-akka.actor.default-dispatcher-3] and […-4].&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.Main
provider = local
[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello World to Actor[akka://exampleSystem/user/receiver#-846959521]
[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Universe to Actor[akka://exampleSystem/user/receiver#-846959521]
[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello World
[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Galaxy to Actor[akka://exampleSystem/user/receiver#-846959521]
[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Universe
[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Galaxy
[success] Total time: 7 s, completed Jan 30, 2018 6:16:46 AM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official documentation of Akka Actor at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/actors.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/actors.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka Dispatcher at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/dispatchers.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/dispatchers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka lifecycle at &lt;a href=&quot;https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle&quot;&gt;https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka Mailbox at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes&quot;&gt;https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Official documentation of Akka location transparency at &lt;a href=&quot;https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency&quot;&gt;https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oracle’s documentation about Fork/Join at &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ExecutorService Javadoc at &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Local Actor workflow part 1 - Sender side]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub . This is about how Akka sends a message from one Actor to…]]></description><link>https://richardimaoka.github.io/blog//local-minimal-sender/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//local-minimal-sender/</guid><pubDate>Mon, 29 Jan 2018 16:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/local-minimal&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/hQJkN4zXTyo&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;This is about how Akka sends a message from one Actor to another &lt;strong&gt;locally&lt;/strong&gt; (i.e. within the same JVM). As in the &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html?language=scala&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Serialization&lt;/code&gt; part&lt;/a&gt; of the official doc:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The messages that Akka actors send to each other are JVM objects (e.g. instances of Scala case classes). Message passing between actors that live on the same JVM is straightforward. It is simply done via reference passing. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are interested in the remote behavior when sending messages to remote JVM, I will write remote versions of articles soon so please refer to them.&lt;/p&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/richardimaoka/resources/blob/master/local-minimal/src/main/scala/example/Main.scala#L14L24&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MessageSender&lt;/code&gt;&lt;/a&gt; sends messages “Hello World”, “Hello Universe” and “Hello Galaxy” to the &lt;code class=&quot;language-text&quot;&gt;messageReceiver&lt;/code&gt; actor.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; MessageSender&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messageReceiver&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorRef&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; Actor &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; preStart&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; messages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Hello Universe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Hello Galaxy&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg &lt;span class=&quot;token keyword&quot;&gt;&amp;lt;-&lt;/span&gt; messages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      messageReceiver &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; msg
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;preStart&lt;/code&gt; method is a &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/guide/tutorial_1.html?language=scala#the-actor-lifecycle&quot;&gt;lifecycle method&lt;/a&gt; provided by Akka Actor.&lt;/p&gt;
&lt;p&gt;The below is what’s inside the main method, which initializes the receiver and the sender.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; system &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActorSystem&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;exampleSystem&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; receiver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actorOf&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  Props&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MessageReceiver&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;receiver&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// sender&lt;/span&gt;
system&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;actorOf&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  MessageSender&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;receiver&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token string&quot;&gt;&quot;sender&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As in the &lt;code class=&quot;language-text&quot;&gt;preStart&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;MessageSender&lt;/code&gt;, the first message to be sent is,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;messageReceiver &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/message-4093dc1854d0d519ddf1fc745d96b789.jpg&quot; alt=&quot;message&quot;&gt;&lt;/p&gt;
&lt;p&gt;where the &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorRef.scala#L400&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;!&lt;/code&gt; method&lt;/a&gt; is a method of &lt;code class=&quot;language-text&quot;&gt;LocalActorRef&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;implicit&lt;/span&gt; sender&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorRef &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Actor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;noSender&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    actorCell&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sendMessage&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sender&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Above &lt;code class=&quot;language-text&quot;&gt;actorCell&lt;/code&gt; is an instance of &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L370&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt;&lt;/a&gt;, which implements &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L220&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Cell&lt;/code&gt; trait&lt;/a&gt;, and the &lt;code class=&quot;language-text&quot;&gt;Cell&lt;/code&gt; trait has the following &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L290L291&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sendMessage&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; sendMessage&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  sender&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorRef
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  sendMessage&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Envelope&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; system&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Here you see an &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/AbstractDispatcher.scala#L23&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Envelope&lt;/code&gt;&lt;/a&gt; which encapsulates &lt;code class=&quot;language-text&quot;&gt;message&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;sender&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/envelope-91cfa7f809e99172f6902691b880c231.jpg&quot; alt=&quot;envelope&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; Envelope&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; sender&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorRef
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;To illustrate the workflow so far up to the &lt;code class=&quot;language-text&quot;&gt;sendMessage&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/sendMessage-97c0ac69e59e5122c722926a1e80a4e4.jpg&quot; alt=&quot;sendMessage&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;sendMessage&lt;/code&gt; method of the &lt;code class=&quot;language-text&quot;&gt;Cell&lt;/code&gt; trait (&lt;code class=&quot;language-text&quot;&gt;ActorCell&lt;/code&gt;) calls the &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/dungeon/Dispatch.scala#L136&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sendMessage&lt;/code&gt; method&lt;/a&gt; of the &lt;code class=&quot;language-text&quot;&gt;Dispatch&lt;/code&gt; trait.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; sendMessage&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Envelope&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    dispatcher&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;(&lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/dispatchers.html?language=scala&quot;&gt;The concept of &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;&lt;/a&gt; might be unfamiliar to you and it is probably difficult to understand. I will write another article later to illustrate &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; in more detail, but for now, you can assume dispatcher is, as the meaning of the word says, “sender” of messages.)&lt;/p&gt;
&lt;p&gt;There are two distinct &lt;code class=&quot;language-text&quot;&gt;Dispatch&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt; traits in akka. The &lt;code class=&quot;language-text&quot;&gt;Dispatch&lt;/code&gt; trait has a reference to &lt;code class=&quot;language-text&quot;&gt;dispatch: Dispatcher&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;’s &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L52L56&quot;&gt;dispatch&lt;/a&gt; method is as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  receiver&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorCell&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  invocation&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Envelope
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; mbox &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; receiver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mailbox
  mbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enqueue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;receiver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; invocation&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  registerForExecution&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbox&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/dispatcher-ed3db186b54b5f43bbc7ddf384206e5e.jpg&quot; alt=&quot;dispatcher&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L85&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;&lt;/a&gt; has the following &lt;code class=&quot;language-text&quot;&gt;enqueue&lt;/code&gt; method&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; enqueue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;receiver&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ActorRef&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Envelope&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; messageQueue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;enqueue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;receiver&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/enqueue-9a6b0df6f94bee8c851810e8e5a0d95a.jpg&quot; alt=&quot;enqueue&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;messageQueue&lt;/code&gt; is type of &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L614L618&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MessageQueue&lt;/code&gt;&lt;/a&gt; class which is defined for &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes&quot;&gt;each different &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; type&lt;/a&gt;. The one for the default &lt;code class=&quot;language-text&quot;&gt;UnboundedMailbox&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;object&lt;/span&gt; UnboundedMailbox &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; MessageQueue 
    &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; ConcurrentLinkedQueue&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Envelope&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; UnboundedQueueBasedMessageQueue &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; queue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Queue&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Envelope&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Coming back to the &lt;code class=&quot;language-text&quot;&gt;dispatch&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;Dispatcher&lt;/code&gt;, it has &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L115&quot;&gt;registerForExecution&lt;/a&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; registerForExecution&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mbox&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Mailbox&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  executorService execute mbox
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Since &lt;a href=&quot;https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L56L57&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt;&lt;/a&gt; is defined as &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;, the execution (i.e. processing) of &lt;code class=&quot;language-text&quot;&gt;Mailbox&lt;/code&gt; is run on a different &lt;code class=&quot;language-text&quot;&gt;Thread&lt;/code&gt;, which will be covered in &lt;a href=&quot;../local-minimal-receiver&quot;&gt;the next article&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; Mailbox&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; messageQueue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MessageQueue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; ForkJoinTask&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; SystemMessageQueue 
  &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; Runnable &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In the next article, &lt;a href=&quot;../local-minimal-receiver&quot;&gt;Local Actor workflow part 2 - Receiver side&lt;/a&gt;, I will discuss about what happens on the receiver side which is triggered as the above &lt;code class=&quot;language-text&quot;&gt;ForkJoinTask&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Instruction to run the example&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd local-minimal
&amp;gt; sbt
&amp;gt; runMain example.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;p&gt;Some &lt;code class=&quot;language-text&quot;&gt;println&lt;/code&gt; calls are inserted in the &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/local-minimal&quot;&gt;complete example at GitHub&lt;/a&gt; to illustrate the behavior.&lt;/p&gt;
&lt;p&gt;Thread names are shown as [exampleSystem-akka.actor.default-dispatcher-3] and […-4].&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.Main
provider = local
[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello World to Actor[akka://exampleSystem/user/receiver#-846959521]
[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Universe to Actor[akka://exampleSystem/user/receiver#-846959521]
[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello World
[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Galaxy to Actor[akka://exampleSystem/user/receiver#-846959521]
[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Universe
[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Galaxy
[success] Total time: 7 s, completed Jan 30, 2018 6:16:46 AM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official documentation of Akka Actor at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/actors.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/actors.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka Dispatcher at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/dispatchers.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/dispatchers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka lifecycle at &lt;a href=&quot;https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle&quot;&gt;https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official documentation of Akka Mailbox at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes&quot;&gt;https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Official documentation of Akka location transparency at &lt;a href=&quot;https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency&quot;&gt;https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oracle’s documentation about Fork/Join at &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ExecutorService Javadoc at &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&quot;&gt;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Serializer minimal example]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub . Akka Serialization Akka doc’s  serialization section  says…]]></description><link>https://richardimaoka.github.io/blog//serializer-minimal/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//serializer-minimal/</guid><pubDate>Mon, 22 Jan 2018 16:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/serialize-minimal&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Akka Serialization&lt;/h3&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe &quot;=&quot;&quot; src=&quot;https://www.youtube.com/embed/paclLCSv6NA&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;Akka doc’s &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html&quot;&gt;serialization section&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, messages that have to escape the JVM to reach an actor running on a different host have to undergo some form of serialization (i.e. the objects have to be converted to and from byte arrays).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This example shows a simplified version, but still the core of what Akka serialization does -
(i.e.) how &lt;code class=&quot;language-text&quot;&gt;Serialization&lt;/code&gt; Akka extention class, &lt;code class=&quot;language-text&quot;&gt;Serializer&lt;/code&gt;,
and the message you want to serialize/deserialize work together.&lt;/p&gt;
&lt;h3&gt;Serializer configuration&lt;/h3&gt;
&lt;p&gt;First, you need to define your serializer class, extending &lt;code class=&quot;language-text&quot;&gt;Serializer&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; akka&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serialization&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Serializer

&lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; MyMessage&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; str2&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; MySerializer &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; Serializer &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then you need configuration which binds your &lt;code class=&quot;language-text&quot;&gt;MySerializer&lt;/code&gt; to the &lt;code class=&quot;language-text&quot;&gt;MyMessage&lt;/code&gt; type.
Note the common &lt;code class=&quot;language-text&quot;&gt;mymessage&lt;/code&gt; key which defines the binding.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//application.conf&lt;/span&gt;
akka &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  actor &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    serializers &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      mymessage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;example.MySerializer&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;                                     
    serialization&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;bindings &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;              
      &lt;span class=&quot;token string&quot;&gt;&quot;example.MyMessage&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mymessage     
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Next, you should define &lt;code class=&quot;language-text&quot;&gt;toBinary&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;fromBinary&lt;/code&gt; inside &lt;code class=&quot;language-text&quot;&gt;MySerializer&lt;/code&gt; to handle
serialization and deserialization of &lt;code class=&quot;language-text&quot;&gt;MyMessage&lt;/code&gt; instances.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; toBinary&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;AnyRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    obj &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; msg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MyMessage &lt;span class=&quot;token keyword&quot;&gt;=&gt;&lt;/span&gt; 
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;str1 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;|&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;str2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getBytes&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;StandardCharsets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UTF_8&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; fromBinary&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bytes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; clazz&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Class&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;AnyRef&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; repString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bytes&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; StandardCharsets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UTF_8&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// &apos;|&apos; is enclosed in single quotes = Char, not &lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; arr&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; repString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;|&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; MyMessage&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The below piece of code is the simplied version of what Akka does, when serializing a message.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;val system = akka.actor.ActorSystem(&amp;quot;example&amp;quot;, ConfigFactory.load())
val original = MyMessage(&amp;quot;aaa&amp;quot;, &amp;quot;bbb&amp;quot;)
val serialization = SerializationExtension(system)

//serialization by toBinary
val bytes = serializer.toBinary(original)

//de-serialization by fromBinary
val restored = serializer.fromBinary(bytes, manifest = None)&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;When you are (e.g.) sending a message to a remote JVM, this is done under the ground
and you don’t explicitly call &lt;code class=&quot;language-text&quot;&gt;SerializationExtension(system)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;toBinary&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;fromBinary&lt;/code&gt; yourself, but this example is to show what’s done by Akka in the simple form.&lt;/p&gt;
&lt;h2&gt;Instruction to run the example&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd serialize-minimal
&amp;gt; sbt
&amp;gt; runMain example.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;p&gt;Some &lt;code class=&quot;language-text&quot;&gt;println&lt;/code&gt; calls are inserted in the &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/serialize-minimal&quot;&gt;complete example at GitHub&lt;/a&gt; to illustrate the behavior&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.Main
Serializer for class example.MyMessage = example.MySerializer@254b2a65
MySerializer: toBinary(MyMessage(aaa,bbb)) is called
MySerializer: fromBinary(979797124989898) is called
original = MyMessage(aaa,bbb), class = class example.MyMessage
restored = MyMessage(aaa,bbb), class = class example.MyMessage
[success] Total time: 1 s, completed Jan 23, 2018 9:48:55 PM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official documentation of Akka serialization at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/serialization.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[PersistentActor minimal example with akka-persistence-sql-async]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub .
There is also an  official sample  available. Refer to…]]></description><link>https://richardimaoka.github.io/blog//persistent-actor-minimal-sql/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//persistent-actor-minimal-sql/</guid><pubDate>Wed, 17 Jan 2018 16:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/persistent-actor-minimal-sql&quot;&gt;GitHub&lt;/a&gt;.
There is also an &lt;a href=&quot;https://github.com/okumin/akka-persistence-sql-async/tree/master/sample/src/main&quot;&gt;official sample&lt;/a&gt; available.&lt;/p&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/WcpEMcnx5XU&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/sql-261553d2948cdc8dfb9ce07f93dbbd86.png&quot; alt=&quot;sql&quot;&gt;&lt;/p&gt;
&lt;p&gt;Refer to another post, &lt;a href=&quot;../persistent-actor-minimal&quot;&gt;Persistence Actor Minimal example&lt;/a&gt; for basics of PersistentActor.&lt;/p&gt;
&lt;p&gt;In this example, the target DB is MySQL. Firstly you need to create a database &lt;code class=&quot;language-text&quot;&gt;akka_persistence_sql_async&lt;/code&gt; and execute &lt;a href=&quot;https://github.com/richardimaoka/resources/blob/master/persistent-actor-minimal-sql/mysql.sql&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;mysql.sql&lt;/code&gt;&lt;/a&gt; so that the database has necessary tables.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://github.com/richardimaoka/resources/blob/master/persistent-actor-minimal-sql/src/main/scala/example/Main.scala#L28L38&quot;&gt;MyPersistentAcdtor&lt;/a&gt;, when &lt;code class=&quot;language-text&quot;&gt;persist&lt;/code&gt; method is called, an &lt;code class=&quot;language-text&quot;&gt;Event&lt;/code&gt; is sent to &lt;a href=&quot;https://github.com/okumin/akka-persistence-sql-async/blob/8dba8158273dbf206ce4abca0725e28207b1db1b/core/src/main/scala/akka/persistence/journal/sqlasync/ScalikeJDBCWriteJournal.scala&quot;&gt;ScalikeJDBCWriteJournal&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;   &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receiveCommand&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Receive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Command&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ⇒
      persist&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Event&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then &lt;a href=&quot;https://github.com/okumin/akka-persistence-sql-async/blob/8dba8158273dbf206ce4abca0725e28207b1db1b/core/src/main/scala/akka/persistence/journal/sqlasync/ScalikeJDBCWriteJournal.scala&quot;&gt;ScalikeJDBCWriteJournal&lt;/a&gt; serializes &lt;code class=&quot;language-text&quot;&gt;Event&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;Array[Byte]&lt;/code&gt; with &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html&quot;&gt;Akka serializer&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;After that, &lt;code class=&quot;language-text&quot;&gt;ScalikeJDBCWriteJournal&lt;/code&gt; prepares an SQL statement to persist the data to an SQL database, including the &lt;code class=&quot;language-text&quot;&gt;message&lt;/code&gt; column to hold the binary of &lt;code class=&quot;language-text&quot;&gt;Event&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Instruction to run the example&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd persistent-actor-minimal-sql
&amp;gt; sbt
&amp;gt; runMain example.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.Main
receiveCommand  : Received Command Command(1)
persist callback: Event = Event(1) persisted
persist callback: current state = 1
receiveCommand  : Received Command Command(2)
persist callback: Event = Event(2) persisted
persist callback: current state = 3
receiveCommand  : Received Command Command(3)
persist callback: Event = Event(3) persisted
persist callback: current state = 6
[ERROR] [01/13/2018 17:24:19.422] [exampleSystem-akka.actor.default-dispatcher-7] [akka://exampleSystem/user/p1] exploded!
java.lang.Exception: exploded!
        at example.MyPersistentActor$$anonfun$receiveCommand$1.applyOrElse(Main.scala:37)
        at akka.actor.Actor.aroundReceive(Actor.scala:517)
        at akka.actor.Actor.aroundReceive$(Actor.scala:515)
        at example.MyPersistentActor.akka$persistence$Eventsourced$$super$aroundReceive(Main.scala:11)
        at akka.persistence.Eventsourced$$anon$1.stateReceive(Eventsourced.scala:663)
        at akka.persistence.Eventsourced.aroundReceive(Eventsourced.scala:183)
        at akka.persistence.Eventsourced.aroundReceive$(Eventsourced.scala:182)
        at example.MyPersistentActor.aroundReceive(Main.scala:11)
        at akka.actor.ActorCell.receiveMessage(ActorCell.scala:527)
        at akka.actor.ActorCell.invoke(ActorCell.scala:496)
        at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:257)
        at akka.dispatch.Mailbox.run(Mailbox.scala:224)
        at akka.dispatch.Mailbox.exec(Mailbox.scala:234)
        at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
        at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
        at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
        at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)

receiveRecover  : Recovering an event = Event(1)
receiveRecover  : current state = 1
receiveRecover  : Recovering an event = Event(2)
receiveRecover  : current state = 3
receiveRecover  : Recovering an event = Event(3)
receiveRecover  : current state = 6
receiveCommand  : Received Command Command(4)
persist callback: Event = Event(4) persisted
persist callback: current state = 10
receiveCommand  : Received Command Command(5)
persist callback: Event = Event(5) persisted
persist callback: current state = 15
[success] Total time: 2 s, completed Jan 13, 2018 5:24:20 PM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official persistence documentation at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/persistence.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/persistence.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Akka serialization documentation at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/serialization.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;akka-persistence-sql-async plugin at &lt;a href=&quot;https://github.com/okumin/akka-persistence-sql-async&quot;&gt;https://github.com/okumin/akka-persistence-sql-async&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Event Adapter with akka-persistence-cassandra]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub . You firstly need  configuration  to tie up   under the…]]></description><link>https://richardimaoka.github.io/blog//event-adapter-cassandra/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//event-adapter-cassandra/</guid><pubDate>Tue, 16 Jan 2018 16:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/event-adapter-tagging-cassandra&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/cIau92KiNiE&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/blog/cqlsh-43c57ec5e10939f5112d19aa98ca4a50.png&quot; alt=&quot;cqlsh&quot;&gt;&lt;/p&gt;
&lt;p&gt;You firstly need &lt;a href=&quot;https://github.com/richardimaoka/resources/blob/master/event-adapter-tagging-cassandra/src/main/resources/application.conf#L26L33&quot;&gt;configuration&lt;/a&gt; to tie up &lt;code class=&quot;language-text&quot;&gt;MyEventAdapter&lt;/code&gt; under the &lt;code class=&quot;language-text&quot;&gt;example&lt;/code&gt; package, and &lt;code class=&quot;language-text&quot;&gt;Event&lt;/code&gt; under the same &lt;code class=&quot;language-text&quot;&gt;example&lt;/code&gt; package.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;cassandra-journal {
  event-adapters {
    tagging-adapter = &amp;quot;example.MyEventAdapter&amp;quot;
  }
  event-adapter-bindings {
    &amp;quot;example.Event&amp;quot; = tagging-adapter
  }
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In &lt;a href=&quot;https://github.com/richardimaoka/resources/blob/master/event-adapter-tagging-cassandra/src/main/scala/example/Main.scala#L28L38&quot;&gt;MyPersistentAcdtor&lt;/a&gt;, when &lt;code class=&quot;language-text&quot;&gt;persist&lt;/code&gt; method is called, an &lt;code class=&quot;language-text&quot;&gt;Event&lt;/code&gt; is sent to &lt;a href=&quot;https://github.com/akka/akka-persistence-cassandra/blob/bf6bcbfa5d5616a285872ff605430c5b18ea289c/core/src/main/scala/akka/persistence/cassandra/journal/CassandraJournal.scala#L42&quot;&gt;CassandraJournal&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;   &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receiveCommand&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Receive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Command&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ⇒
      persist&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Event&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then &lt;a href=&quot;https://github.com/akka/akka-persistence-cassandra/blob/bf6bcbfa5d5616a285872ff605430c5b18ea289c/core/src/main/scala/akka/persistence/cassandra/journal/CassandraJournal.scala#L42&quot;&gt;CassandraJournal&lt;/a&gt; invokes the &lt;code class=&quot;language-text&quot;&gt;toJournal&lt;/code&gt; method of &lt;a href=&quot;https://github.com/richardimaoka/resources/blob/master/event-adapter-tagging-cassandra/src/main/scala/example/MyEventAdapter.scala#L9&quot;&gt;MyEventAdapter.scala&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; toJournal&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Set&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mytag1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mytag2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    Tagged&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tags&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;After that, &lt;code class=&quot;language-text&quot;&gt;Tagged(event, tags)&lt;/code&gt; is serialized to &lt;code class=&quot;language-text&quot;&gt;Array[Byte]&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;In more detail, &lt;a href=&quot;https://github.com/akka/akka-persistence-cassandra/blob/bf6bcbfa5d5616a285872ff605430c5b18ea289c/core/src/main/scala/akka/persistence/cassandra/journal/CassandraJournal.scala#L42&quot;&gt;CassandraJournal&lt;/a&gt;’s &lt;a href=&quot;https://github.com/akka/akka-persistence-cassandra/blob/bf6bcbfa5d5616a285872ff605430c5b18ea289c/core/src/main/scala/akka/persistence/cassandra/journal/CassandraJournal.scala#L464&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def serializeEvent()&lt;/code&gt;&lt;/a&gt; method serializes &lt;code class=&quot;language-text&quot;&gt;payload&lt;/code&gt; (in this example, &lt;code class=&quot;language-text&quot;&gt;Tagged(event, tags)&lt;/code&gt;) to  &lt;code class=&quot;language-text&quot;&gt;Array[Byte]&lt;/code&gt; with &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html&quot;&gt;Akka serializer&lt;/a&gt;. After that, &lt;code class=&quot;language-text&quot;&gt;CassandraJournal&lt;/code&gt; prepares a CQL statement to set all necessary columns in Cassandra, including the &lt;code class=&quot;language-text&quot;&gt;event&lt;/code&gt; column to hold the binary of &lt;code class=&quot;language-text&quot;&gt;Tagged(event, tags)&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Instruction to run the example&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd event-adapter-tagging-cassandra
&amp;gt; sbt
&amp;gt; runMain example.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; runMain example.Main
[info] Running example.Main
receiveCommand  : Received Command(1)
EventAdapter    : toJournal called for event = Event(1), tags = Set(mytag1, mytag2)
[WARN] [SECURITY][01/17/2018 05:59:44.106] [exampleSystem-cassandra-plugin-default-dispatcher-8] [akka.serialization.Serialization(akka://exampleSystem)] Using the default Java serializer for class [example.Event] which is not recommended because of performance implications. Use another serializer or disable this warning using the setting &amp;#39;akka.actor.warn-about-java-serializer-usage&amp;#39;
persist callback: Event = Event(1) persisted
persist callback: current state = 1
receiveCommand  : Received Command(2)
EventAdapter    : toJournal called for event = Event(2), tags = Set(mytag1, mytag2)
persist callback: Event = Event(2) persisted
persist callback: current state = 3
receiveCommand  : Received Command(3)
EventAdapter    : toJournal called for event = Event(3), tags = Set(mytag1, mytag2)
persist callback: Event = Event(3) persisted
persist callback: current state = 6
[ERROR] [01/17/2018 05:59:45.538] [exampleSystem-akka.actor.default-dispatcher-12] [akka://exampleSystem/user/p1] exploded!
java.lang.Exception: exploded!
        at example.MyPersistentActor$$anonfun$receiveCommand$1.applyOrElse(Main.scala:37)
        at akka.actor.Actor.aroundReceive(Actor.scala:517)
        at akka.actor.Actor.aroundReceive$(Actor.scala:515)
        at example.MyPersistentActor.akka$persistence$Eventsourced$$super$aroundReceive(Main.scala:11)
        at akka.persistence.Eventsourced$$anon$1.stateReceive(Eventsourced.scala:680)
        at akka.persistence.Eventsourced.aroundReceive(Eventsourced.scala:192)
        at akka.persistence.Eventsourced.aroundReceive$(Eventsourced.scala:191)
        at example.MyPersistentActor.aroundReceive(Main.scala:11)
        at akka.actor.ActorCell.receiveMessage(ActorCell.scala:527)
        at akka.actor.ActorCell.invoke(ActorCell.scala:496)
        at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:257)
        at akka.dispatch.Mailbox.run(Mailbox.scala:224)
        at akka.dispatch.Mailbox.exec(Mailbox.scala:234)
        at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
        at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
        at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
        at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)

EventAdapter    : fromJournal called for event = Event(1) and manifest =
EventAdapter    : fromJournal called for event = Event(2) and manifest =
EventAdapter    : fromJournal called for event = Event(3) and manifest =
receiveRecover  : Recovering an event = Event(1)
receiveRecover  : current state = 1
receiveRecover  : Recovering an event = Event(2)
receiveRecover  : current state = 3
receiveRecover  : Recovering an event = Event(3)
receiveRecover  : current state = 6
receiveCommand  : Received Command(4)
EventAdapter    : toJournal called for event = Event(4), tags = Set(mytag1, mytag2)
persist callback: Event = Event(4) persisted
persist callback: current state = 10
receiveCommand  : Received Command(5)
EventAdapter    : toJournal called for event = Event(5), tags = Set(mytag1, mytag2)
persist callback: Event = Event(5) persisted
persist callback: current state = 15
[success] Total time: 12 s, completed Jan 17, 2018 5:59:52 AM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official persistence documentation at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/persistence.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/persistence.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official event adapter documentation for tagging at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/persistence.html#event-adapters&quot;&gt;https://doc.akka.io/docs/akka/2.5/persistence.html#event-adapters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Akka serialization documentation at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/serialization.html&quot;&gt;https://doc.akka.io/docs/akka/2.5/serialization.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;akka-persistence-cassandra at &lt;a href=&quot;https://github.com/akka/akka-persistence-cassandra&quot;&gt;https://github.com/akka/akka-persistence-cassandra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apache Cassandra downloading page at &lt;a href=&quot;http://cassandra.apache.org/download/&quot;&gt;http://cassandra.apache.org/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Datastax provides a great deal of documentation about Cassandra, including a free course avaialble as of the time of this blog post &lt;a href=&quot;https://academy.datastax.com/courses&quot;&gt;https://academy.datastax.com/courses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[PersistentActor minimal example]]></title><description><![CDATA[Overview You can find the code and instruction to run the example at  GitHub . receiveCommand Persistence actor receives a   and generate an…]]></description><link>https://richardimaoka.github.io/blog//persistent-actor-minimal/</link><guid isPermaLink="false">https://richardimaoka.github.io/blog//persistent-actor-minimal/</guid><pubDate>Sat, 13 Jan 2018 16:31:00 GMT</pubDate><content:encoded>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;You can find the code and instruction to run the example at &lt;a href=&quot;https://github.com/richardimaoka/resources/tree/master/persistent-actor-minimal&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;receiveCommand&lt;/h3&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe &quot;=&quot;&quot; src=&quot;https://www.youtube.com/embed/Jt9xDvYMNMc&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receiveCommand&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Receive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Command&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ⇒
      persist&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Event&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; event ⇒
        sum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Persistence actor receives a &lt;code class=&quot;language-text&quot;&gt;Command&lt;/code&gt; and generate an &lt;code class=&quot;language-text&quot;&gt;Event&lt;/code&gt;, then persist the &lt;code class=&quot;language-text&quot;&gt;Event&lt;/code&gt; via &lt;code class=&quot;language-text&quot;&gt;Journal&lt;/code&gt;. The &lt;code class=&quot;language-text&quot;&gt;receiveCommand&lt;/code&gt; method of &lt;code class=&quot;language-text&quot;&gt;PersistentActor&lt;/code&gt; does that.&lt;/p&gt;
&lt;h3&gt;receiveRecover&lt;/h3&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem&quot;
          &gt;
            &lt;iframe src=&quot;https://www.youtube.com/embed/xfsF0u0s3e4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; receiveRecover&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Receive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; Event&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; ⇒
      sum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; i
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;receiveRecover&lt;/code&gt; is called upon restarting a &lt;code class=&quot;language-text&quot;&gt;PersistentActor&lt;/code&gt; after exception was thrown.&lt;/p&gt;
&lt;h2&gt;Instruction to run the example&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; git clone https://github.com/richardimaoka/resources.git
&amp;gt; cd resources
&amp;gt; cd persistent-actor-minimal
&amp;gt; sbt
&amp;gt; runMain example.Main&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[info] Running example.Main
receiveCommand  : Received Command Command(1)
persist callback: Event = Event(1) persisted
persist callback: current state = 1
receiveCommand  : Received Command Command(2)
persist callback: Event = Event(2) persisted
persist callback: current state = 3
receiveCommand  : Received Command Command(3)
persist callback: Event = Event(3) persisted
persist callback: current state = 6
[ERROR] [01/13/2018 17:24:19.422] [exampleSystem-akka.actor.default-dispatcher-7] [akka://exampleSystem/user/p1] exploded!
java.lang.Exception: exploded!
        at example.MyPersistentActor$$anonfun$receiveCommand$1.applyOrElse(Main.scala:37)
        at akka.actor.Actor.aroundReceive(Actor.scala:517)
        at akka.actor.Actor.aroundReceive$(Actor.scala:515)
        at example.MyPersistentActor.akka$persistence$Eventsourced$$super$aroundReceive(Main.scala:11)
        at akka.persistence.Eventsourced$$anon$1.stateReceive(Eventsourced.scala:663)
        at akka.persistence.Eventsourced.aroundReceive(Eventsourced.scala:183)
        at akka.persistence.Eventsourced.aroundReceive$(Eventsourced.scala:182)
        at example.MyPersistentActor.aroundReceive(Main.scala:11)
        at akka.actor.ActorCell.receiveMessage(ActorCell.scala:527)
        at akka.actor.ActorCell.invoke(ActorCell.scala:496)
        at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:257)
        at akka.dispatch.Mailbox.run(Mailbox.scala:224)
        at akka.dispatch.Mailbox.exec(Mailbox.scala:234)
        at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
        at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
        at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
        at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)

receiveRecover  : Recovering an event = Event(1)
receiveRecover  : current state = 1
receiveRecover  : Recovering an event = Event(2)
receiveRecover  : current state = 3
receiveRecover  : Recovering an event = Event(3)
receiveRecover  : current state = 6
receiveCommand  : Received Command Command(4)
persist callback: Event = Event(4) persisted
persist callback: current state = 10
receiveCommand  : Received Command Command(5)
persist callback: Event = Event(5) persisted
persist callback: current state = 15
[success] Total time: 2 s, completed Jan 13, 2018 5:24:20 PM&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official documentation at &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5.9/persistence.html&quot;&gt;https://doc.akka.io/docs/akka/2.5.9/persistence.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>