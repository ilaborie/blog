webpackJsonp([36029449993048],{423:function(a,s){a.exports={data:{site:{siteMetadata:{title:"Akka, Concurrency, etc.",author:"Richard Imaoka"}},markdownRemark:{id:"C:/Users/richardimaoka/blog/src/pages/local-minimal-sender/index.md absPath of file >>> MarkdownRemark",html:'<h2>Overview</h2>\n<p>You can find the code and instruction to run the example at <a href="https://github.com/richardimaoka/resources/tree/master/local-minimal">GitHub</a>.</p>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem"\n          >\n            <iframe src="https://www.youtube.com/embed/hQJkN4zXTyo" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<p>This is about how Akka sends a message from one Actor to another <strong>locally</strong> (i.e. within the same JVM). As in the <a href="https://doc.akka.io/docs/akka/2.5/serialization.html?language=scala"><code class="language-text">Serialization</code> part</a> of the official doc:</p>\n<blockquote>\n<p>The messages that Akka actors send to each other are JVM objects (e.g. instances of Scala case classes). Message passing between actors that live on the same JVM is straightforward. It is simply done via reference passing. </p>\n</blockquote>\n<p>If you are interested in the remote behavior when sending messages to remote JVM, I will write remote versions of articles soon so please refer to them.</p>\n<h2>Workflow</h2>\n<p><a href="https://github.com/richardimaoka/resources/blob/master/local-minimal/src/main/scala/example/Main.scala#L14L24"><code class="language-text">MessageSender</code></a> sends messages “Hello World”, “Hello Universe” and “Hello Galaxy” to the <code class="language-text">messageReceiver</code> actor.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">class</span> MessageSender<span class="token punctuation">(</span>messageReceiver<span class="token operator">:</span> ActorRef<span class="token punctuation">)</span>\n  <span class="token keyword">extends</span> Actor <span class="token punctuation">{</span>\n  \n  <span class="token keyword">override</span> <span class="token keyword">def</span> preStart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> messages <span class="token operator">=</span> List<span class="token punctuation">(</span>\n      <span class="token string">"Hello World"</span><span class="token punctuation">,</span>\n      <span class="token string">"Hello Universe"</span><span class="token punctuation">,</span>\n      <span class="token string">"Hello Galaxy"</span>\n    <span class="token punctuation">)</span>\n\n    <span class="token keyword">for</span><span class="token punctuation">(</span>msg <span class="token keyword">&lt;-</span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      messageReceiver <span class="token operator">!</span> msg\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>The <code class="language-text">preStart</code> method is a <a href="https://doc.akka.io/docs/akka/2.5/guide/tutorial_1.html?language=scala#the-actor-lifecycle">lifecycle method</a> provided by Akka Actor.</p>\n<p>The below is what’s inside the main method, which initializes the receiver and the sender.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">val</span> system <span class="token operator">=</span> ActorSystem<span class="token punctuation">(</span><span class="token string">"exampleSystem"</span><span class="token punctuation">)</span>\n\n<span class="token keyword">val</span> receiver <span class="token operator">=</span> system<span class="token punctuation">.</span>actorOf<span class="token punctuation">(</span>\n  Props<span class="token punctuation">[</span>MessageReceiver<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">"receiver"</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// sender</span>\nsystem<span class="token punctuation">.</span>actorOf<span class="token punctuation">(</span>\n  MessageSender<span class="token punctuation">.</span>props<span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">,</span> \n  <span class="token string">"sender"</span>\n<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>As in the <code class="language-text">preStart</code> method of <code class="language-text">MessageSender</code>, the first message to be sent is,</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala">messageReceiver <span class="token operator">!</span> <span class="token string">"Hello World"</span><span class="token punctuation">,</span></code></pre>\n      </div>\n<p><img src="/blog/message-4093dc1854d0d519ddf1fc745d96b789.jpg" alt="message"></p>\n<p>where the <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorRef.scala#L400"><code class="language-text">!</code> method</a> is a method of <code class="language-text">LocalActorRef</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">override</span> <span class="token keyword">def</span> <span class="token operator">!</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span>\n  <span class="token punctuation">(</span><span class="token keyword">implicit</span> sender<span class="token operator">:</span> ActorRef <span class="token operator">=</span> Actor<span class="token punctuation">.</span>noSender<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span>\n    actorCell<span class="token punctuation">.</span>sendMessage<span class="token punctuation">(</span>message<span class="token punctuation">,</span> sender<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Above <code class="language-text">actorCell</code> is an instance of <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L370"><code class="language-text">ActorCell</code></a>, which implements <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L220"><code class="language-text">Cell</code> trait</a>, and the <code class="language-text">Cell</code> trait has the following <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L290L291"><code class="language-text">sendMessage</code></a>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">final</span> <span class="token keyword">def</span> sendMessage<span class="token punctuation">(</span>\n  message<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">,</span> \n  sender<span class="token operator">:</span> ActorRef\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span>\n  sendMessage<span class="token punctuation">(</span>Envelope<span class="token punctuation">(</span>message<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> system<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Here you see an <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/AbstractDispatcher.scala#L23"><code class="language-text">Envelope</code></a> which encapsulates <code class="language-text">message</code> and <code class="language-text">sender</code></p>\n<p><img src="/blog/envelope-91cfa7f809e99172f6902691b880c231.jpg" alt="envelope"></p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> Envelope<span class="token punctuation">(</span>\n  <span class="token keyword">val</span> message<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">,</span> \n  <span class="token keyword">val</span> sender<span class="token operator">:</span> ActorRef\n<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>To illustrate the workflow so far up to the <code class="language-text">sendMessage</code>:</p>\n<p><img src="/blog/sendMessage-97c0ac69e59e5122c722926a1e80a4e4.jpg" alt="sendMessage"></p>\n<p>The <code class="language-text">sendMessage</code> method of the <code class="language-text">Cell</code> trait (<code class="language-text">ActorCell</code>) calls the <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/dungeon/Dispatch.scala#L136"><code class="language-text">sendMessage</code> method</a> of the <code class="language-text">Dispatch</code> trait.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">def</span> sendMessage<span class="token punctuation">(</span>msg<span class="token operator">:</span> Envelope<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    dispatcher<span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> </code></pre>\n      </div>\n<p>(<a href="https://doc.akka.io/docs/akka/2.5/dispatchers.html?language=scala">The concept of <code class="language-text">Dispatcher</code></a> might be unfamiliar to you and it is probably difficult to understand. I will write another article later to illustrate <code class="language-text">Dispatcher</code> in more detail, but for now, you can assume dispatcher is, as the meaning of the word says, “sender” of messages.)</p>\n<p>There are two distinct <code class="language-text">Dispatch</code> and <code class="language-text">Dispatcher</code> traits in akka. The <code class="language-text">Dispatch</code> trait has a reference to <code class="language-text">dispatch: Dispatcher</code> and <code class="language-text">Dispatcher</code>’s <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L52L56">dispatch</a> method is as follows:</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">def</span> dispatch<span class="token punctuation">(</span>\n  receiver<span class="token operator">:</span> ActorCell<span class="token punctuation">,</span>\n  invocation<span class="token operator">:</span> Envelope\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">val</span> mbox <span class="token operator">=</span> receiver<span class="token punctuation">.</span>mailbox\n  mbox<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span>receiver<span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> invocation<span class="token punctuation">)</span>\n  registerForExecution<span class="token punctuation">(</span>mbox<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p><img src="/blog/dispatcher-ed3db186b54b5f43bbc7ddf384206e5e.jpg" alt="dispatcher"></p>\n<p><a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L85"><code class="language-text">Mailbox</code></a> has the following <code class="language-text">enqueue</code> method</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">def</span> enqueue<span class="token punctuation">(</span>receiver<span class="token operator">:</span> ActorRef<span class="token punctuation">,</span> msg<span class="token operator">:</span> Envelope<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> messageQueue<span class="token punctuation">.</span>enqueue<span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> msg<span class="token punctuation">)</span></code></pre>\n      </div>\n<p><img src="/blog/enqueue-9a6b0df6f94bee8c851810e8e5a0d95a.jpg" alt="enqueue"></p>\n<p>The <code class="language-text">messageQueue</code> is type of <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L614L618"><code class="language-text">MessageQueue</code></a> class which is defined for <a href="https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes">each different <code class="language-text">Mailbox</code> type</a>. The one for the default <code class="language-text">UnboundedMailbox</code> is:</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">object</span> UnboundedMailbox <span class="token punctuation">{</span>\n  <span class="token keyword">class</span> MessageQueue \n    <span class="token keyword">extends</span> ConcurrentLinkedQueue<span class="token punctuation">[</span>Envelope<span class="token punctuation">]</span> \n    <span class="token keyword">with</span> UnboundedQueueBasedMessageQueue <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> <span class="token keyword">def</span> queue<span class="token operator">:</span> Queue<span class="token punctuation">[</span>Envelope<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Coming back to the <code class="language-text">dispatch</code> method of <code class="language-text">Dispatcher</code>, it has <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L115">registerForExecution</a> as follows:</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">def</span> registerForExecution<span class="token punctuation">(</span>mbox<span class="token operator">:</span> Mailbox<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  executorService execute mbox\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>Since <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L56L57"><code class="language-text">Mailbox</code></a> is defined as <code class="language-text">ForkJoinTask</code>, the execution (i.e. processing) of <code class="language-text">Mailbox</code> is run on a different <code class="language-text">Thread</code>, which will be covered in <a href="../local-minimal-receiver">the next article</a></p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code class="language-scala"><span class="token keyword">abstract</span> <span class="token keyword">class</span> Mailbox<span class="token punctuation">(</span><span class="token keyword">val</span> messageQueue<span class="token operator">:</span> MessageQueue<span class="token punctuation">)</span>\n  <span class="token keyword">extends</span> ForkJoinTask<span class="token punctuation">[</span><span class="token builtin">Unit</span><span class="token punctuation">]</span> \n  <span class="token keyword">with</span> SystemMessageQueue \n  <span class="token keyword">with</span> Runnable <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>In the next article, <a href="../local-minimal-receiver">Local Actor workflow part 2 - Receiver side</a>, I will discuss about what happens on the receiver side which is triggered as the above <code class="language-text">ForkJoinTask</code>.</p>\n<h2>Instruction to run the example</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&gt; git clone https://github.com/richardimaoka/resources.git\n&gt; cd resources\n&gt; cd local-minimal\n&gt; sbt\n&gt; runMain example.Main</code></pre>\n      </div>\n<h2>Output</h2>\n<p>Some <code class="language-text">println</code> calls are inserted in the <a href="https://github.com/richardimaoka/resources/tree/master/local-minimal">complete example at GitHub</a> to illustrate the behavior.</p>\n<p>Thread names are shown as [exampleSystem-akka.actor.default-dispatcher-3] and […-4].</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">[info] Running example.Main\nprovider = local\n[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello World to Actor[akka://exampleSystem/user/receiver#-846959521]\n[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Universe to Actor[akka://exampleSystem/user/receiver#-846959521]\n[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello World\n[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Galaxy to Actor[akka://exampleSystem/user/receiver#-846959521]\n[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Universe\n[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Galaxy\n[success] Total time: 7 s, completed Jan 30, 2018 6:16:46 AM</code></pre>\n      </div>\n<h2>References</h2>\n<ul>\n<li>Official documentation of Akka Actor at <a href="https://doc.akka.io/docs/akka/2.5/actors.html">https://doc.akka.io/docs/akka/2.5/actors.html</a></li>\n<li>Official documentation of Akka Dispatcher at <a href="https://doc.akka.io/docs/akka/2.5/dispatchers.html">https://doc.akka.io/docs/akka/2.5/dispatchers.html</a></li>\n<li>Official documentation of Akka lifecycle at <a href="https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle">https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle</a></li>\n<li>Official documentation of Akka Mailbox at <a href="https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes">https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes</a>)</li>\n<li>Official documentation of Akka location transparency at <a href="https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency">https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency</a></li>\n<li>Oracle’s documentation about Fork/Join at <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html">https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html</a></li>\n<li>ExecutorService Javadoc at <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html</a></li>\n</ul>',frontmatter:{title:"Local Actor workflow part 1 - Sender side",date:"January 29, 2018"}}},pathContext:{slug:"/local-minimal-sender/"}}}});
//# sourceMappingURL=path---local-minimal-sender-a922812b411d73516504.js.map