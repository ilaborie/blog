webpackJsonp([86659390886147],{418:function(e,a){e.exports={data:{site:{siteMetadata:{title:"Akka, Concurrency, etc.",author:"Richard Imaoka"}},markdownRemark:{id:"C:/Users/richardimaoka/blog/src/pages/local-minimal-receiver/index.md absPath of file >>> MarkdownRemark",html:'<h2>Overview</h2>\n<p>You can find the code and instruction to run the example at <a href="https://github.com/richardimaoka/resources/tree/master/local-minimal">GitHub</a>.</p>\n<iframe width="640" height="360" src="https://www.youtube.com/embed/LbuLAtN20HA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>\n<p>This is continued from the previous article, <a href="../local-minimal-sender">Local Actor workflow part 1 - Sender side</a>. I would recommend you to read that article too.</p>\n<p>Also, later I am going to write the remote versions of articles to illustrate the message-sending/receiving behavior of Akka Actor when sending across different JVMs.</p>\n<h2>Workflow</h2>\n<p>As in bottom of the previous <a href="../local-minimal-sender">Local Actor workflow part 1 - Sender side</a> article, the below  <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L115">registerForExecution</a> method will let Java\'s <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html"><code>ExecutorService</code></a> process <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L56L57"><code>Mailbox</code></a> , which is defined as <code>ForkJoinTask</code>, to be executed on a different thread.</p>\n<pre><code class="language-scala">def registerForExecution(mbox: Mailbox, ...): Boolean = {\n  ...\n  executorService execute mbox\n  ...\n}\n</code></pre>\n<pre><code class="language-scala">abstract class Mailbox(val messageQueue: MessageQueue)\n  extends ForkJoinTask[Unit] \n  with SystemMessageQueue \n  with Runnable {\n    ...\n}\n</code></pre>\n<p>When <code>ExecutorService</code> executes the <code>Mailbox</code> as <code>ForkJoinTask</code>, then the following <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/java/akka/dispatch/forkjoin/ForkJoinWorkerThread.java#L103"><code>run</code> method of <code>ForkJoinWorkerThread</code></a> is called:</p>\n<pre><code class="language-java">public void run() {...} \n</code></pre>\n<p>(Somehow a copy of ForkJoinWorkerThread from Java\'s standard library is in akka\'s source code ... not sure why)</p>\n<p>The <code>run</code> method above runs the <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L250">following method of <code>Mailbox</code></a></p>\n<pre><code class="language-scala">@tailrec private final def processMailbox(\n  ...\n  // def dequeue(): Envelope = messageQueue.dequeue()\n  val next = dequeue() \n  ...\n  actor invoke next\n  ...\n  processMailbox(...)\n}\n</code></pre>\n<p>By <code>dequeue</code>-ing an <code>Envelope</code>, <code>Mailbox</code> calls the <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L488"><code>invoke</code> method of <code>ActorCell</code></a>, </p>\n<p><img src="/blog/processmailbox-94910b51aebb7b417483b0a787ba8151.jpg" alt="processmailbox"></p>\n<pre><code class="language-scala">final def invoke(messageHandle: Envelope): Unit = {\n  ...\n  receiveMessage(msg)\n  ...\n}\n</code></pre>\n<p>which unpacks the message from <code>Envelope</code> then calls <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L527"><code>receiveMessage</code> of <code>ActorCell</code></a>,</p>\n<pre><code class="language-scala">// def actor: Actor = ... in ActorCell\nfinal def receiveMessage(msg: Any): Unit =\n  actor.aroundReceive(behaviorStack.head, msg)\n</code></pre>\n<p><img src="/blog/receivemessage-e0b1f55a0e7451ee216a1da37f8b2e9c.jpg" alt="receivemessage"></p>\n<p>Here, <code>Actor</code> has an important method called <code>aroundReceive</code>, </p>\n<pre><code class="language-scala">def aroundReceive(receive: Actor.Receive, msg: Any): Unit = {\n  if (\n    receive.applyOrElse(msg, Actor.notHandledFun)\n      .asInstanceOf[AnyRef] eq Actor.NotHandled\n  ) {\n    unhandled(msg)\n  }\n}\n</code></pre>\n<p>which, as the name suggests, wraps around <code>Actor</code>\'s <code>receive</code> method. </p>\n<pre><code class="language-scala">class MessageReceiver extends Actor {\n  def receive = {\n    case s: String =>\n      EchoActor: received message = $s")\n  }\n}\n</code></pre>\n<p><img src="/blog/receive-9bf14710a79d18dd691d0599f5f6ee4d.jpg" alt="receive"></p>\n<p>In <code>aroundReceive</code> you can see <code>receive.applyOrElse</code> is called, and if there is no match in <code>receive</code>\'s patter-match, it will call <code>unhandled</code> of <code>Actor</code>.</p>\n<p>Up to here, we have pretty much covered the receiver side of the behavior in actor\'s message passing. Next up, I will go through how this changes when sending to a remote JVM.</p>\n<h2>Instruction to run the example</h2>\n<pre><code>> git clone https://github.com/richardimaoka/resources.git\n> cd resources\n> cd local-minimal\n> sbt\n> runMain example.Main\n</code></pre>\n<h2>Output</h2>\n<p>Some <code>println</code> calls are inserted in the <a href="https://github.com/richardimaoka/resources/tree/master/local-minimal">complete example at GitHub</a> to illustrate the behavior.</p>\n<p>Thread names are shown as [exampleSystem-akka.actor.default-dispatcher-3] and [...-4].</p>\n<pre><code>[info] Running example.Main\nprovider = local\n[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello World to Actor[akka://exampleSystem/user/receiver#-846959521]\n[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Universe to Actor[akka://exampleSystem/user/receiver#-846959521]\n[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello World\n[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Galaxy to Actor[akka://exampleSystem/user/receiver#-846959521]\n[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Universe\n[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Galaxy\n[success] Total time: 7 s, completed Jan 30, 2018 6:16:46 AM\n</code></pre>\n<h2>References</h2>\n<ul>\n<li>Official documentation of Akka Actor at <a href="https://doc.akka.io/docs/akka/2.5/actors.html">https://doc.akka.io/docs/akka/2.5/actors.html</a></li>\n<li>Official documentation of Akka Dispatcher at <a href="https://doc.akka.io/docs/akka/2.5/dispatchers.html">https://doc.akka.io/docs/akka/2.5/dispatchers.html</a></li>\n<li>Official documentation of Akka lifecycle at <a href="https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle">https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle</a></li>\n<li>Official documentation of Akka Mailbox at <a href="https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes">https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes</a>)</li>\n<li>Official documentation of Akka location transparency at <a href="https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency">https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency</a></li>\n<li>Oracle\'s documentation about Fork/Join at <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html">https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html</a></li>\n<li>ExecutorService Javadoc at <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html</a></li>\n</ul>',frontmatter:{title:"Local Actor workflow part 2 - Receiver side",date:"January 29, 2018"}}},pathContext:{slug:"/local-minimal-receiver/"}}}});
//# sourceMappingURL=path---local-minimal-receiver-b2b2763cafabcda11bad.js.map