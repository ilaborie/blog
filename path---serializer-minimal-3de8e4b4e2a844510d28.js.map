{"version":3,"sources":["webpack:///path---serializer-minimal-3de8e4b4e2a844510d28.js","webpack:///./.cache/json/serializer-minimal.json"],"names":["webpackJsonp","506","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,0BAAAC,OAAA,mBAA6DC,gBAAmBC,GAAA,0FAAAC,KAAA,+iSAAo4OC,aAAujEL,MAAA,6BAAAM,KAAA,sBAAiEC,aAAgBC,KAAA","file":"path---serializer-minimal-3de8e4b4e2a844510d28.js","sourcesContent":["webpackJsonp([160326069391746],{\n\n/***/ 506:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/nishyu/blog/src/pages/serializer-minimal.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Overview</h2>\\n<p>You can find the code and instruction to run the example at <a href=\\\"https://github.com/richardimaoka/resources/tree/master/serialize-minimal\\\">GitHub</a>.</p>\\n<h3>Akka Serialization</h3>\\n<div>\\n          <div\\n            class=\\\"gatsby-resp-iframe-wrapper\\\"\\n            style=\\\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\\\"\\n          >\\n            <iframe \\\"=\\\"\\\" src=\\\"https://www.youtube.com/embed/paclLCSv6NA\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; encrypted-media\\\" allowfullscreen style=\\\"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n          \\\"></iframe>\\n          </div>\\n          </div>\\n<p>Akka doc’s <a href=\\\"https://doc.akka.io/docs/akka/2.5/serialization.html\\\">serialization section</a> says:</p>\\n<blockquote>\\n<p>However, messages that have to escape the JVM to reach an actor running on a different host have to undergo some form of serialization (i.e. the objects have to be converted to and from byte arrays).</p>\\n</blockquote>\\n<p>This example shows a simplified version, but still the core of what Akka serialization does -\\n(i.e.) how <code>Serialization</code> Akka extention class, <code>Serializer</code>,\\nand the message you want to serialize/deserialize work together.</p>\\n<h3>Serializer configuration</h3>\\n<p>First, you need to define your serializer class, extending <code>Serializer</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>serialization<span class=\\\"token punctuation\\\">.</span>Serializer\\n\\n<span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> MyMessage<span class=\\\"token punctuation\\\">(</span>str1<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">,</span> str2<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> MySerializer <span class=\\\"token keyword\\\">extends</span> Serializer <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Then you need configuration which binds your <code>MySerializer</code> to the <code>MyMessage</code> type.\\nNote the common <code>mymessage</code> key which defines the binding.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code><span class=\\\"token comment\\\">//application.conf</span>\\nakka <span class=\\\"token punctuation\\\">{</span>\\n  actor <span class=\\\"token punctuation\\\">{</span>\\n    serializers <span class=\\\"token punctuation\\\">{</span>\\n      mymessage <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"example.MySerializer\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>                                     \\n    serialization<span class=\\\"token operator\\\">-</span>bindings <span class=\\\"token punctuation\\\">{</span>              \\n      <span class=\\\"token string\\\">\\\"example.MyMessage\\\"</span> <span class=\\\"token operator\\\">=</span> mymessage     \\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Next, you should define <code>toBinary</code> and <code>fromBinary</code> inside <code>MySerializer</code> to handle\\nserialization and deserialization of <code>MyMessage</code> instances.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code>  <span class=\\\"token keyword\\\">def</span> toBinary<span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">AnyRef</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">Byte</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    obj <span class=\\\"token keyword\\\">match</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">case</span> msg<span class=\\\"token operator\\\">:</span> MyMessage <span class=\\\"token keyword\\\">=></span> \\n        <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>str1 <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"|\\\"</span> <span class=\\\"token operator\\\">+</span> msg<span class=\\\"token punctuation\\\">.</span>str2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>getBytes<span class=\\\"token punctuation\\\">(</span>StandardCharsets<span class=\\\"token punctuation\\\">.</span>UTF_8<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code>  <span class=\\\"token keyword\\\">def</span> fromBinary<span class=\\\"token punctuation\\\">(</span>bytes<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">Byte</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> clazz<span class=\\\"token operator\\\">:</span> Option<span class=\\\"token punctuation\\\">[</span>Class<span class=\\\"token punctuation\\\">[</span>_<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">AnyRef</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> repString <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">(</span>bytes<span class=\\\"token punctuation\\\">,</span> StandardCharsets<span class=\\\"token punctuation\\\">.</span>UTF_8<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\">// '|' is enclosed in single quotes = Char, not </span>\\n    <span class=\\\"token keyword\\\">val</span> arr<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> repString<span class=\\\"token punctuation\\\">.</span>split<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'|'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token builtin\\\">String</span>\\n    <span class=\\\"token keyword\\\">new</span> MyMessage<span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The below piece of code is the simplied version of what Akka does, when serializing a message.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>val system = akka.actor.ActorSystem(\\\"example\\\", ConfigFactory.load())\\nval original = MyMessage(\\\"aaa\\\", \\\"bbb\\\")\\nval serialization = SerializationExtension(system)\\n\\n//serialization by toBinary\\nval bytes = serializer.toBinary(original)\\n\\n//de-serialization by fromBinary\\nval restored = serializer.fromBinary(bytes, manifest = None)</code></pre>\\n      </div>\\n<p>When you are (e.g.) sending a message to a remote JVM, this is done under the ground\\nand you don’t explicitly call <code>SerializationExtension(system)</code>, <code>toBinary</code> and <code>fromBinary</code> yourself, but this example is to show what’s done by Akka in the simple form.</p>\\n<h2>Instruction to run the example</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> git clone https://github.com/richardimaoka/resources.git\\n> cd resources\\n> cd serialize-minimal\\n> sbt\\n> runMain example.Main</code></pre>\\n      </div>\\n<h2>Output</h2>\\n<p>Some <code>println</code> calls are inserted in the <a href=\\\"https://github.com/richardimaoka/resources/tree/master/serialize-minimal\\\">complete example at GitHub</a> to illustrate the behavior</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>[info] Running example.Main\\nSerializer for class example.MyMessage = example.MySerializer@254b2a65\\nMySerializer: toBinary(MyMessage(aaa,bbb)) is called\\nMySerializer: fromBinary(979797124989898) is called\\noriginal = MyMessage(aaa,bbb), class = class example.MyMessage\\nrestored = MyMessage(aaa,bbb), class = class example.MyMessage\\n[success] Total time: 1 s, completed Jan 23, 2018 9:48:55 PM</code></pre>\\n      </div>\\n<h2>References</h2>\\n<ul>\\n<li>Official documentation of Akka serialization at <a href=\\\"https://doc.akka.io/docs/akka/2.5/serialization.html\\\">https://doc.akka.io/docs/akka/2.5/serialization.html</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Serializer minimal example\",\"date\":\"January 22, 2018\"}}},\"pathContext\":{\"slug\":\"/serializer-minimal/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---serializer-minimal-3de8e4b4e2a844510d28.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/nishyu/blog/src/pages/serializer-minimal.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>Overview</h2>\\n<p>You can find the code and instruction to run the example at <a href=\\\"https://github.com/richardimaoka/resources/tree/master/serialize-minimal\\\">GitHub</a>.</p>\\n<h3>Akka Serialization</h3>\\n<div>\\n          <div\\n            class=\\\"gatsby-resp-iframe-wrapper\\\"\\n            style=\\\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;margin-bottom: 1.0725rem\\\"\\n          >\\n            <iframe \\\"=\\\"\\\" src=\\\"https://www.youtube.com/embed/paclLCSv6NA\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; encrypted-media\\\" allowfullscreen style=\\\"\\n            position: absolute;\\n            top: 0;\\n            left: 0;\\n            width: 100%;\\n            height: 100%;\\n          \\\"></iframe>\\n          </div>\\n          </div>\\n<p>Akka doc’s <a href=\\\"https://doc.akka.io/docs/akka/2.5/serialization.html\\\">serialization section</a> says:</p>\\n<blockquote>\\n<p>However, messages that have to escape the JVM to reach an actor running on a different host have to undergo some form of serialization (i.e. the objects have to be converted to and from byte arrays).</p>\\n</blockquote>\\n<p>This example shows a simplified version, but still the core of what Akka serialization does -\\n(i.e.) how <code>Serialization</code> Akka extention class, <code>Serializer</code>,\\nand the message you want to serialize/deserialize work together.</p>\\n<h3>Serializer configuration</h3>\\n<p>First, you need to define your serializer class, extending <code>Serializer</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>serialization<span class=\\\"token punctuation\\\">.</span>Serializer\\n\\n<span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> MyMessage<span class=\\\"token punctuation\\\">(</span>str1<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">,</span> str2<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">class</span> MySerializer <span class=\\\"token keyword\\\">extends</span> Serializer <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Then you need configuration which binds your <code>MySerializer</code> to the <code>MyMessage</code> type.\\nNote the common <code>mymessage</code> key which defines the binding.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code><span class=\\\"token comment\\\">//application.conf</span>\\nakka <span class=\\\"token punctuation\\\">{</span>\\n  actor <span class=\\\"token punctuation\\\">{</span>\\n    serializers <span class=\\\"token punctuation\\\">{</span>\\n      mymessage <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"example.MySerializer\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>                                     \\n    serialization<span class=\\\"token operator\\\">-</span>bindings <span class=\\\"token punctuation\\\">{</span>              \\n      <span class=\\\"token string\\\">\\\"example.MyMessage\\\"</span> <span class=\\\"token operator\\\">=</span> mymessage     \\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>Next, you should define <code>toBinary</code> and <code>fromBinary</code> inside <code>MySerializer</code> to handle\\nserialization and deserialization of <code>MyMessage</code> instances.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code>  <span class=\\\"token keyword\\\">def</span> toBinary<span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">AnyRef</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">Byte</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    obj <span class=\\\"token keyword\\\">match</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">case</span> msg<span class=\\\"token operator\\\">:</span> MyMessage <span class=\\\"token keyword\\\">=></span> \\n        <span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">.</span>str1 <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"|\\\"</span> <span class=\\\"token operator\\\">+</span> msg<span class=\\\"token punctuation\\\">.</span>str2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>getBytes<span class=\\\"token punctuation\\\">(</span>StandardCharsets<span class=\\\"token punctuation\\\">.</span>UTF_8<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code>  <span class=\\\"token keyword\\\">def</span> fromBinary<span class=\\\"token punctuation\\\">(</span>bytes<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">Byte</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> clazz<span class=\\\"token operator\\\">:</span> Option<span class=\\\"token punctuation\\\">[</span>Class<span class=\\\"token punctuation\\\">[</span>_<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">AnyRef</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">val</span> repString <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">(</span>bytes<span class=\\\"token punctuation\\\">,</span> StandardCharsets<span class=\\\"token punctuation\\\">.</span>UTF_8<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\">// '|' is enclosed in single quotes = Char, not </span>\\n    <span class=\\\"token keyword\\\">val</span> arr<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> repString<span class=\\\"token punctuation\\\">.</span>split<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'|'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token builtin\\\">String</span>\\n    <span class=\\\"token keyword\\\">new</span> MyMessage<span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The below piece of code is the simplied version of what Akka does, when serializing a message.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>val system = akka.actor.ActorSystem(\\\"example\\\", ConfigFactory.load())\\nval original = MyMessage(\\\"aaa\\\", \\\"bbb\\\")\\nval serialization = SerializationExtension(system)\\n\\n//serialization by toBinary\\nval bytes = serializer.toBinary(original)\\n\\n//de-serialization by fromBinary\\nval restored = serializer.fromBinary(bytes, manifest = None)</code></pre>\\n      </div>\\n<p>When you are (e.g.) sending a message to a remote JVM, this is done under the ground\\nand you don’t explicitly call <code>SerializationExtension(system)</code>, <code>toBinary</code> and <code>fromBinary</code> yourself, but this example is to show what’s done by Akka in the simple form.</p>\\n<h2>Instruction to run the example</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> git clone https://github.com/richardimaoka/resources.git\\n> cd resources\\n> cd serialize-minimal\\n> sbt\\n> runMain example.Main</code></pre>\\n      </div>\\n<h2>Output</h2>\\n<p>Some <code>println</code> calls are inserted in the <a href=\\\"https://github.com/richardimaoka/resources/tree/master/serialize-minimal\\\">complete example at GitHub</a> to illustrate the behavior</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>[info] Running example.Main\\nSerializer for class example.MyMessage = example.MySerializer@254b2a65\\nMySerializer: toBinary(MyMessage(aaa,bbb)) is called\\nMySerializer: fromBinary(979797124989898) is called\\noriginal = MyMessage(aaa,bbb), class = class example.MyMessage\\nrestored = MyMessage(aaa,bbb), class = class example.MyMessage\\n[success] Total time: 1 s, completed Jan 23, 2018 9:48:55 PM</code></pre>\\n      </div>\\n<h2>References</h2>\\n<ul>\\n<li>Official documentation of Akka serialization at <a href=\\\"https://doc.akka.io/docs/akka/2.5/serialization.html\\\">https://doc.akka.io/docs/akka/2.5/serialization.html</a></li>\\n</ul>\",\"frontmatter\":{\"title\":\"Serializer minimal example\",\"date\":\"January 22, 2018\"}}},\"pathContext\":{\"slug\":\"/serializer-minimal/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/serializer-minimal.json\n// module id = 506\n// module chunks = 160326069391746"],"sourceRoot":""}