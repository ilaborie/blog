{"version":3,"sources":["webpack:///path---akka-http-request-response-model-d34a15ea278729b4a7f8.js","webpack:///./.cache/json/akka-http-request-response-model.json"],"names":["webpackJsonp","423","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,0BAAAC,OAAA,mBAA6DC,gBAAmBC,GAAA,qHAAAC,KAAA,wrjBAA81ZC,aAAq8KL,MAAA,wCAAAM,KAAA,qBAA2EC,aAAgBC,KAAA","file":"path---akka-http-request-response-model-d34a15ea278729b4a7f8.js","sourcesContent":["webpackJsonp([270688591801459],{\n\n/***/ 423:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/richardimaoka/blog/src/pages/akka-http-request-response-model/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>In this article, I am going to review the HTTP model in Akka HTTP, which is described <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/http-model.html\\\">here in the official document</a> and defined as follows:</p>\\n<blockquote>\\n<p>case-class based model of all the major HTTP data structures, like HTTP requests, responses and common headers.</p>\\n</blockquote>\\n<p>This will be the base for understanding <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/marshalling.html\\\">Marshalling</a>/<a href=\\\"https://doc.akka.io/docs/akka-http/current/common/unmarshalling.html\\\">Unmarshalling</a> infrastructure in Akka HTTP, which I will discuss in upcoming articles.</p>\\n<h2>HttpRequest</h2>\\n<p><img src=\\\"/blog/akka-request-f6eb41c8f1bf6fd4b42efbca9c213207.gif\\\"></p>\\n<p>The case class <code class=\\\"language-text\\\">HttpRequest</code> represents, as the name indicates, an HTTP request. When you send an HTTP request, it looks like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">POST             https://example.com HTTP/1.1\\nHost:            example.com\\nConnection:      keep-alive\\nAccept:          application/json\\nUser-Agent:      Mozilla/5.0 (Windows NT 10.0; Win64; x64) ...\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9,ja;q=0.8\\n\\n{&quot;field1&quot;: &quot;some value&quot;, &quot;field2&quot;: 100}</code></pre>\\n      </div>\\n<p>The above example can be decomposed into different parts as follows:</p>\\n<p><img src=\\\"/blog/http-request-8f877662b99b954756836e865f66928e.png\\\"></p>\\n<p>The format of HTTP requests is clearly described in the following paragraph in <a href=\\\"https://tools.ietf.org/html/rfc7230#section-2.1\\\">RFC7230</a>. It’s worth reading:</p>\\n<blockquote>\\n<p>A client sends an HTTP request to a server in the form of a request message, beginning with a <strong>request-line</strong> that includes a method, URI, and protocol version (Section 3.1.1), followed by <strong>header fields</strong> containing request modifiers, client information, and representation metadata (Section 3.2), <strong>an empty line</strong> to indicate the end of the header section, and finally a <strong>message body</strong> containing the payload body (if any, Section 3.3).</p>\\n</blockquote>\\n<p>In the Akka HTTP source code, the <a href=\\\"http://doc.akka.io/api/akka-http/10.1.3/akka/http/scaladsl/model/HttpRequest.html\\\"><strong>HttpRequest</strong></a> case class consists of</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> HttpRequest<span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> method<span class=\\\"token operator\\\">:</span>   HttpMethod<span class=\\\"token punctuation\\\">,</span>                <span class=\\\"token comment\\\">//(GET, POST, etc.)</span>\\n  <span class=\\\"token keyword\\\">val</span> uri<span class=\\\"token operator\\\">:</span>      Uri<span class=\\\"token punctuation\\\">,</span>                       <span class=\\\"token comment\\\">//URI</span>\\n  <span class=\\\"token keyword\\\">val</span> headers<span class=\\\"token operator\\\">:</span>  immutable<span class=\\\"token punctuation\\\">.</span>Seq<span class=\\\"token punctuation\\\">[</span>HttpHeader<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">//HTTP headers</span>\\n  <span class=\\\"token keyword\\\">val</span> entity<span class=\\\"token operator\\\">:</span>   RequestEntity<span class=\\\"token punctuation\\\">,</span>             <span class=\\\"token comment\\\">//entity (i.e.) body</span>\\n  <span class=\\\"token keyword\\\">val</span> protocol<span class=\\\"token operator\\\">:</span> HttpProtocol<span class=\\\"token punctuation\\\">)</span>              <span class=\\\"token comment\\\">//HTTP 1.1, 1.0, etc</span>\\n  <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> HttpMessage <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>where you can find:</p>\\n<ul>\\n<li>Available HTTP methods (<code class=\\\"language-text\\\">HttpMethod</code>) <a href=\\\"https://doc.akka.io/api/akka-http/current/akka/http/scaladsl/model/HttpMethods$.html\\\">here</a></li>\\n<li>Available headers (<code class=\\\"language-text\\\">HttpHeader</code>) <a href=\\\"https://doc.akka.io/api/akka-http/current/akka/http/scaladsl/model/headers/index.html\\\">here</a></li>\\n<li>Available protocols (<code class=\\\"language-text\\\">HttpProtocol</code>) <a href=\\\"https://doc.akka.io/api/akka-http/10.1.3/akka/http/scaladsl/model/HttpProtocols$.html\\\">here</a></li>\\n</ul>\\n<p>Also you see that <code class=\\\"language-text\\\">HttpRequest</code> extends the <code class=\\\"language-text\\\">HttpMessage</code> trait, </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">trait</span> HttpMessage <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>which is the base trait for both <code class=\\\"language-text\\\">HttpRequest</code>, and <code class=\\\"language-text\\\">HttpResponse</code> which we will see in the next section.</p>\\n<h2>HttpResponse</h2>\\n<p><img src=\\\"/blog/akka-response-afc2484d5d937e15aea4418a127f258b.gif\\\"></p>\\n<p>Similar to HTTP requests, an HTTP response example looks like below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">HTTP/1.1 200 OK\\nServer: akka-http/10.1.3\\nDate: Sat, 11 Aug 2018 16:17:11 GMT\\nContent-Type: application/json\\nContent-Length: 28\\n\\n{&quot;name&quot;:&quot;Joh Don&quot;,&quot;age&quot;:150}</code></pre>\\n      </div>\\n<p>There is slight difference from the request as in <a href=\\\"https://tools.ietf.org/html/rfc7230#section-2.1\\\">RFC7230</a>. The main difference is that an HTTP response has a status line, while an HTTP request had a request line.</p>\\n<blockquote>\\n<p>A server responds to a client’s request by sending one or more HTTP response messages, each beginning with a <strong>status line</strong> that includes the protocol version, a success or error code, and textual reason phrase (Section 3.1.2), possibly followed by <strong>header fields</strong> containing server information, resource metadata, and representation metadata (Section 3.2), an <strong>empty line</strong> to indicate the end of the header section, and finally a <strong>message body</strong> containing the payload body (if any, Section 3.3).</p>\\n</blockquote>\\n<p>If there is a body in the HTTP request, the headers and the body are separated by a blank line, like below.</p>\\n<p><img src=\\\"/blog/http-response-58a338ff0fb618fc8d5fe12181a1e96d.png\\\"></p>\\n<p>In Akka HTTP, the <a href=\\\"http://doc.akka.io/api/akka-http/10.1.3/akka/http/scaladsl/model/HttpResponse.html\\\"><strong>HttpResponse</strong></a> case class consists of</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> HttpResponse<span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> status<span class=\\\"token operator\\\">:</span>   StatusCode<span class=\\\"token punctuation\\\">,</span>                <span class=\\\"token comment\\\">// HTTP Status Code</span>\\n  <span class=\\\"token keyword\\\">val</span> headers<span class=\\\"token operator\\\">:</span>  immutable<span class=\\\"token punctuation\\\">.</span>Seq<span class=\\\"token punctuation\\\">[</span>HttpHeader<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// HTTP headers</span>\\n  <span class=\\\"token keyword\\\">val</span> entity<span class=\\\"token operator\\\">:</span>   ResponseEntity<span class=\\\"token punctuation\\\">,</span>            <span class=\\\"token comment\\\">// entity (i.e.) body</span>\\n  <span class=\\\"token keyword\\\">val</span> protocol<span class=\\\"token operator\\\">:</span> HttpProtocol               <span class=\\\"token comment\\\">// HTTP 1.1, 1.0, etc</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token keyword\\\">with</span> HttpMessage <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>where you can find:</p>\\n<ul>\\n<li>Available HTTP methods (<code class=\\\"language-text\\\">HttpMethod</code>) <a href=\\\"https://doc.akka.io/api/akka-http/current/akka/http/scaladsl/model/HttpMethods$.html\\\">here</a></li>\\n<li>Available headers (<code class=\\\"language-text\\\">HttpHeader</code>) <a href=\\\"https://doc.akka.io/api/akka-http/current/akka/http/scaladsl/model/headers/index.html\\\">here</a></li>\\n<li>Available protocols (<code class=\\\"language-text\\\">HttpProtocol</code>) <a href=\\\"https://doc.akka.io/api/akka-http/10.1.3/akka/http/scaladsl/model/HttpProtocols$.html\\\">here</a></li>\\n</ul>\\n<p>Again, like <code class=\\\"language-text\\\">HttpRequest</code>, <code class=\\\"language-text\\\">HttpResponse</code> extents the <code class=\\\"language-text\\\">HttpMessage</code> trait.</p>\\n<h2>HttpEntity</h2>\\n<p>For those who are used to other HTTP frameworks or libraries, the word ”<strong>entity</strong>” might sound unfamiliar, because we cannot find the word in the following family of “Hypertext Transfer Protocol (HTTP/1.1)” RFCs:</p>\\n<ul>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7230\\\">RFC7230</a>: Message Syntax and Routing</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7231\\\">RFC7231</a>: Semantics and Content</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7232\\\">RFC7232</a>: Conditional Requests</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7233\\\">RFC723</a>3: Range Requests</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7234\\\">RFC7234</a>: Caching</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7235\\\">RFC7234</a>: Authentication</li>\\n</ul>\\n<p>(We see entity-tag but that’s different from entities in Akka HTTP.)</p>\\n<p>So what is an ”<strong>entity</strong>” in Akka HTTP? As briefly touched in <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/http-model.html\\\">the official documentation</a>, an entity is the body of an HTTP request or response. </p>\\n<blockquote>\\n<p>an entity (body data)</p>\\n</blockquote>\\n<p><strong>That’s just it. An entity is a body, and <code class=\\\"language-text\\\">HttpEntity</code> models the entity.</strong></p>\\n<p>To be honest, I am not sure why it was named as <code class=\\\"language-text\\\">HttpEntity</code> but not HttpBody (in Akka HTTP, there is no such class or trait named HttpBody). I guess there is a valid reason for this. Anyway, when you see the word ”<strong>entity</strong>”, you can assume that is the body of a request or a response.</p>\\n<p>In Akka HTTP, <code class=\\\"language-text\\\">RequestEntity</code> and <code class=\\\"language-text\\\">ResponseEntity</code>, which represent the HTTP request body and the response body, extend <code class=\\\"language-text\\\">HttpEntity</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">trait</span> RequestEntity <span class=\\\"token keyword\\\">extends</span> HttpEntity <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">trait</span> ResponseEntity <span class=\\\"token keyword\\\">extends</span> HttpEntity <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>As they are <code class=\\\"language-text\\\">trait</code>s, there are concrete classes extending from them. They are described in the <code class=\\\"language-text\\\">HttpEntity</code> <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/http-model.html#httpentity\\\">section of the official doc</a>, which are:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">HttpEntity.Strict</code></li>\\n<li><code class=\\\"language-text\\\">HttpEntity.Defuault</code></li>\\n<li><code class=\\\"language-text\\\">HttpEntity.Chunked</code></li>\\n<li><code class=\\\"language-text\\\">HttpEntity.CloseDelimited</code></li>\\n<li><code class=\\\"language-text\\\">HttpEntity.IndefiniteLength</code></li>\\n</ul>\\n<p>and they are defined like below. The below case class definition is not very accurate, but simplified for the sake of easy understanding, still holding the essence of the actual definition.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> Strict<span class=\\\"token punctuation\\\">(</span>\\n  contentType<span class=\\\"token operator\\\">:</span> ContentType<span class=\\\"token punctuation\\\">,</span>\\n  data<span class=\\\"token operator\\\">:</span> ByteString\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> HttpEntity\\n<span class=\\\"token comment\\\">// simplified, it doesn't directly extend HttpEntity</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> Default<span class=\\\"token punctuation\\\">(</span>\\n  contentType<span class=\\\"token operator\\\">:</span>   ContentType<span class=\\\"token punctuation\\\">,</span>\\n  contentLength<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Long</span><span class=\\\"token punctuation\\\">,</span>\\n  data<span class=\\\"token operator\\\">:</span>          Source<span class=\\\"token punctuation\\\">[</span>ByteString<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">Any</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> HttpEntity\\n<span class=\\\"token comment\\\">// simplified, it doesn't directly extend HttpEntity</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> Chunked<span class=\\\"token punctuation\\\">(</span>\\n  contentType<span class=\\\"token operator\\\">:</span> ContentType<span class=\\\"token punctuation\\\">,</span>\\n  chunks<span class=\\\"token operator\\\">:</span> Source<span class=\\\"token punctuation\\\">[</span>ChunkStreamPart<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">Any</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> HttpEntity\\n<span class=\\\"token comment\\\">// simplified, it doesn't directly extend HttpEntity</span></code></pre>\\n      </div>\\n<p>The last two, <code class=\\\"language-text\\\">CloseDelimited</code> and <code class=\\\"language-text\\\">IndefiniteLength</code> are bit more complicated, and less frequently used in practice, so we are not going to cover them here.</p>\\n<p>The meaning and behavior of these concrete classes will become clearer when you have better understanding about Marshalling and Unmarshalling, as well as <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/source-streaming-support.html#source-streaming\\\">Streaming Support in Akka HTTP</a> which I also explained in a <a href=\\\"../akka-http-response-streaming\\\">past article</a>.</p>\\n<h2>Summary</h2>\\n<p>Up to this point, we have covered how an HTTP request and response can be decomposed into smaller components, and what HTTP ”<strong>entity</strong>” means - it is just the HTTP body of a request or a response, and <code class=\\\"language-text\\\">HttpEntity</code> has more specialized types like <code class=\\\"language-text\\\">Strict</code>, <code class=\\\"language-text\\\">Default</code> and <code class=\\\"language-text\\\">Chuked</code>.</p>\\n<p>As said at the beginning, to understand <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/marshalling.html\\\">Marshalling</a> and <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/unmarshalling.html\\\">Unmarshalling</a>, which is difficult when you look into the internals, it is crucial to have an idea about how <code class=\\\"language-text\\\">HttpRequest</code>, <code class=\\\"language-text\\\">HttpResponse</code> and <code class=\\\"language-text\\\">HttpEntity</code> are related to each other.</p>\\n<p>From the next article, I’ll start talking about Marshalling and Unmarshalling, which hopefully clarifies points not touched in the official doc.</p>\",\"frontmatter\":{\"title\":\"Akka HTTP Request and Response models\",\"date\":\"August 11, 2018\"}}},\"pathContext\":{\"slug\":\"/akka-http-request-response-model/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---akka-http-request-response-model-d34a15ea278729b4a7f8.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/richardimaoka/blog/src/pages/akka-http-request-response-model/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>In this article, I am going to review the HTTP model in Akka HTTP, which is described <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/http-model.html\\\">here in the official document</a> and defined as follows:</p>\\n<blockquote>\\n<p>case-class based model of all the major HTTP data structures, like HTTP requests, responses and common headers.</p>\\n</blockquote>\\n<p>This will be the base for understanding <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/marshalling.html\\\">Marshalling</a>/<a href=\\\"https://doc.akka.io/docs/akka-http/current/common/unmarshalling.html\\\">Unmarshalling</a> infrastructure in Akka HTTP, which I will discuss in upcoming articles.</p>\\n<h2>HttpRequest</h2>\\n<p><img src=\\\"/blog/akka-request-f6eb41c8f1bf6fd4b42efbca9c213207.gif\\\"></p>\\n<p>The case class <code class=\\\"language-text\\\">HttpRequest</code> represents, as the name indicates, an HTTP request. When you send an HTTP request, it looks like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">POST             https://example.com HTTP/1.1\\nHost:            example.com\\nConnection:      keep-alive\\nAccept:          application/json\\nUser-Agent:      Mozilla/5.0 (Windows NT 10.0; Win64; x64) ...\\nAccept-Encoding: gzip, deflate, br\\nAccept-Language: en-US,en;q=0.9,ja;q=0.8\\n\\n{&quot;field1&quot;: &quot;some value&quot;, &quot;field2&quot;: 100}</code></pre>\\n      </div>\\n<p>The above example can be decomposed into different parts as follows:</p>\\n<p><img src=\\\"/blog/http-request-8f877662b99b954756836e865f66928e.png\\\"></p>\\n<p>The format of HTTP requests is clearly described in the following paragraph in <a href=\\\"https://tools.ietf.org/html/rfc7230#section-2.1\\\">RFC7230</a>. It’s worth reading:</p>\\n<blockquote>\\n<p>A client sends an HTTP request to a server in the form of a request message, beginning with a <strong>request-line</strong> that includes a method, URI, and protocol version (Section 3.1.1), followed by <strong>header fields</strong> containing request modifiers, client information, and representation metadata (Section 3.2), <strong>an empty line</strong> to indicate the end of the header section, and finally a <strong>message body</strong> containing the payload body (if any, Section 3.3).</p>\\n</blockquote>\\n<p>In the Akka HTTP source code, the <a href=\\\"http://doc.akka.io/api/akka-http/10.1.3/akka/http/scaladsl/model/HttpRequest.html\\\"><strong>HttpRequest</strong></a> case class consists of</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> HttpRequest<span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> method<span class=\\\"token operator\\\">:</span>   HttpMethod<span class=\\\"token punctuation\\\">,</span>                <span class=\\\"token comment\\\">//(GET, POST, etc.)</span>\\n  <span class=\\\"token keyword\\\">val</span> uri<span class=\\\"token operator\\\">:</span>      Uri<span class=\\\"token punctuation\\\">,</span>                       <span class=\\\"token comment\\\">//URI</span>\\n  <span class=\\\"token keyword\\\">val</span> headers<span class=\\\"token operator\\\">:</span>  immutable<span class=\\\"token punctuation\\\">.</span>Seq<span class=\\\"token punctuation\\\">[</span>HttpHeader<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">//HTTP headers</span>\\n  <span class=\\\"token keyword\\\">val</span> entity<span class=\\\"token operator\\\">:</span>   RequestEntity<span class=\\\"token punctuation\\\">,</span>             <span class=\\\"token comment\\\">//entity (i.e.) body</span>\\n  <span class=\\\"token keyword\\\">val</span> protocol<span class=\\\"token operator\\\">:</span> HttpProtocol<span class=\\\"token punctuation\\\">)</span>              <span class=\\\"token comment\\\">//HTTP 1.1, 1.0, etc</span>\\n  <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> HttpMessage <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>where you can find:</p>\\n<ul>\\n<li>Available HTTP methods (<code class=\\\"language-text\\\">HttpMethod</code>) <a href=\\\"https://doc.akka.io/api/akka-http/current/akka/http/scaladsl/model/HttpMethods$.html\\\">here</a></li>\\n<li>Available headers (<code class=\\\"language-text\\\">HttpHeader</code>) <a href=\\\"https://doc.akka.io/api/akka-http/current/akka/http/scaladsl/model/headers/index.html\\\">here</a></li>\\n<li>Available protocols (<code class=\\\"language-text\\\">HttpProtocol</code>) <a href=\\\"https://doc.akka.io/api/akka-http/10.1.3/akka/http/scaladsl/model/HttpProtocols$.html\\\">here</a></li>\\n</ul>\\n<p>Also you see that <code class=\\\"language-text\\\">HttpRequest</code> extends the <code class=\\\"language-text\\\">HttpMessage</code> trait, </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">trait</span> HttpMessage <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>which is the base trait for both <code class=\\\"language-text\\\">HttpRequest</code>, and <code class=\\\"language-text\\\">HttpResponse</code> which we will see in the next section.</p>\\n<h2>HttpResponse</h2>\\n<p><img src=\\\"/blog/akka-response-afc2484d5d937e15aea4418a127f258b.gif\\\"></p>\\n<p>Similar to HTTP requests, an HTTP response example looks like below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">HTTP/1.1 200 OK\\nServer: akka-http/10.1.3\\nDate: Sat, 11 Aug 2018 16:17:11 GMT\\nContent-Type: application/json\\nContent-Length: 28\\n\\n{&quot;name&quot;:&quot;Joh Don&quot;,&quot;age&quot;:150}</code></pre>\\n      </div>\\n<p>There is slight difference from the request as in <a href=\\\"https://tools.ietf.org/html/rfc7230#section-2.1\\\">RFC7230</a>. The main difference is that an HTTP response has a status line, while an HTTP request had a request line.</p>\\n<blockquote>\\n<p>A server responds to a client’s request by sending one or more HTTP response messages, each beginning with a <strong>status line</strong> that includes the protocol version, a success or error code, and textual reason phrase (Section 3.1.2), possibly followed by <strong>header fields</strong> containing server information, resource metadata, and representation metadata (Section 3.2), an <strong>empty line</strong> to indicate the end of the header section, and finally a <strong>message body</strong> containing the payload body (if any, Section 3.3).</p>\\n</blockquote>\\n<p>If there is a body in the HTTP request, the headers and the body are separated by a blank line, like below.</p>\\n<p><img src=\\\"/blog/http-response-58a338ff0fb618fc8d5fe12181a1e96d.png\\\"></p>\\n<p>In Akka HTTP, the <a href=\\\"http://doc.akka.io/api/akka-http/10.1.3/akka/http/scaladsl/model/HttpResponse.html\\\"><strong>HttpResponse</strong></a> case class consists of</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">class</span> HttpResponse<span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token keyword\\\">val</span> status<span class=\\\"token operator\\\">:</span>   StatusCode<span class=\\\"token punctuation\\\">,</span>                <span class=\\\"token comment\\\">// HTTP Status Code</span>\\n  <span class=\\\"token keyword\\\">val</span> headers<span class=\\\"token operator\\\">:</span>  immutable<span class=\\\"token punctuation\\\">.</span>Seq<span class=\\\"token punctuation\\\">[</span>HttpHeader<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// HTTP headers</span>\\n  <span class=\\\"token keyword\\\">val</span> entity<span class=\\\"token operator\\\">:</span>   ResponseEntity<span class=\\\"token punctuation\\\">,</span>            <span class=\\\"token comment\\\">// entity (i.e.) body</span>\\n  <span class=\\\"token keyword\\\">val</span> protocol<span class=\\\"token operator\\\">:</span> HttpProtocol               <span class=\\\"token comment\\\">// HTTP 1.1, 1.0, etc</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token keyword\\\">with</span> HttpMessage <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>where you can find:</p>\\n<ul>\\n<li>Available HTTP methods (<code class=\\\"language-text\\\">HttpMethod</code>) <a href=\\\"https://doc.akka.io/api/akka-http/current/akka/http/scaladsl/model/HttpMethods$.html\\\">here</a></li>\\n<li>Available headers (<code class=\\\"language-text\\\">HttpHeader</code>) <a href=\\\"https://doc.akka.io/api/akka-http/current/akka/http/scaladsl/model/headers/index.html\\\">here</a></li>\\n<li>Available protocols (<code class=\\\"language-text\\\">HttpProtocol</code>) <a href=\\\"https://doc.akka.io/api/akka-http/10.1.3/akka/http/scaladsl/model/HttpProtocols$.html\\\">here</a></li>\\n</ul>\\n<p>Again, like <code class=\\\"language-text\\\">HttpRequest</code>, <code class=\\\"language-text\\\">HttpResponse</code> extents the <code class=\\\"language-text\\\">HttpMessage</code> trait.</p>\\n<h2>HttpEntity</h2>\\n<p>For those who are used to other HTTP frameworks or libraries, the word ”<strong>entity</strong>” might sound unfamiliar, because we cannot find the word in the following family of “Hypertext Transfer Protocol (HTTP/1.1)” RFCs:</p>\\n<ul>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7230\\\">RFC7230</a>: Message Syntax and Routing</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7231\\\">RFC7231</a>: Semantics and Content</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7232\\\">RFC7232</a>: Conditional Requests</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7233\\\">RFC723</a>3: Range Requests</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7234\\\">RFC7234</a>: Caching</li>\\n<li><a href=\\\"https://tools.ietf.org/html/rfc7235\\\">RFC7234</a>: Authentication</li>\\n</ul>\\n<p>(We see entity-tag but that’s different from entities in Akka HTTP.)</p>\\n<p>So what is an ”<strong>entity</strong>” in Akka HTTP? As briefly touched in <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/http-model.html\\\">the official documentation</a>, an entity is the body of an HTTP request or response. </p>\\n<blockquote>\\n<p>an entity (body data)</p>\\n</blockquote>\\n<p><strong>That’s just it. An entity is a body, and <code class=\\\"language-text\\\">HttpEntity</code> models the entity.</strong></p>\\n<p>To be honest, I am not sure why it was named as <code class=\\\"language-text\\\">HttpEntity</code> but not HttpBody (in Akka HTTP, there is no such class or trait named HttpBody). I guess there is a valid reason for this. Anyway, when you see the word ”<strong>entity</strong>”, you can assume that is the body of a request or a response.</p>\\n<p>In Akka HTTP, <code class=\\\"language-text\\\">RequestEntity</code> and <code class=\\\"language-text\\\">ResponseEntity</code>, which represent the HTTP request body and the response body, extend <code class=\\\"language-text\\\">HttpEntity</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">trait</span> RequestEntity <span class=\\\"token keyword\\\">extends</span> HttpEntity <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">sealed</span> <span class=\\\"token keyword\\\">trait</span> ResponseEntity <span class=\\\"token keyword\\\">extends</span> HttpEntity <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>As they are <code class=\\\"language-text\\\">trait</code>s, there are concrete classes extending from them. They are described in the <code class=\\\"language-text\\\">HttpEntity</code> <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/http-model.html#httpentity\\\">section of the official doc</a>, which are:</p>\\n<ul>\\n<li><code class=\\\"language-text\\\">HttpEntity.Strict</code></li>\\n<li><code class=\\\"language-text\\\">HttpEntity.Defuault</code></li>\\n<li><code class=\\\"language-text\\\">HttpEntity.Chunked</code></li>\\n<li><code class=\\\"language-text\\\">HttpEntity.CloseDelimited</code></li>\\n<li><code class=\\\"language-text\\\">HttpEntity.IndefiniteLength</code></li>\\n</ul>\\n<p>and they are defined like below. The below case class definition is not very accurate, but simplified for the sake of easy understanding, still holding the essence of the actual definition.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> Strict<span class=\\\"token punctuation\\\">(</span>\\n  contentType<span class=\\\"token operator\\\">:</span> ContentType<span class=\\\"token punctuation\\\">,</span>\\n  data<span class=\\\"token operator\\\">:</span> ByteString\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> HttpEntity\\n<span class=\\\"token comment\\\">// simplified, it doesn't directly extend HttpEntity</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> Default<span class=\\\"token punctuation\\\">(</span>\\n  contentType<span class=\\\"token operator\\\">:</span>   ContentType<span class=\\\"token punctuation\\\">,</span>\\n  contentLength<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Long</span><span class=\\\"token punctuation\\\">,</span>\\n  data<span class=\\\"token operator\\\">:</span>          Source<span class=\\\"token punctuation\\\">[</span>ByteString<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">Any</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> HttpEntity\\n<span class=\\\"token comment\\\">// simplified, it doesn't directly extend HttpEntity</span></code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">final</span> <span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> Chunked<span class=\\\"token punctuation\\\">(</span>\\n  contentType<span class=\\\"token operator\\\">:</span> ContentType<span class=\\\"token punctuation\\\">,</span>\\n  chunks<span class=\\\"token operator\\\">:</span> Source<span class=\\\"token punctuation\\\">[</span>ChunkStreamPart<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">Any</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span> HttpEntity\\n<span class=\\\"token comment\\\">// simplified, it doesn't directly extend HttpEntity</span></code></pre>\\n      </div>\\n<p>The last two, <code class=\\\"language-text\\\">CloseDelimited</code> and <code class=\\\"language-text\\\">IndefiniteLength</code> are bit more complicated, and less frequently used in practice, so we are not going to cover them here.</p>\\n<p>The meaning and behavior of these concrete classes will become clearer when you have better understanding about Marshalling and Unmarshalling, as well as <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/source-streaming-support.html#source-streaming\\\">Streaming Support in Akka HTTP</a> which I also explained in a <a href=\\\"../akka-http-response-streaming\\\">past article</a>.</p>\\n<h2>Summary</h2>\\n<p>Up to this point, we have covered how an HTTP request and response can be decomposed into smaller components, and what HTTP ”<strong>entity</strong>” means - it is just the HTTP body of a request or a response, and <code class=\\\"language-text\\\">HttpEntity</code> has more specialized types like <code class=\\\"language-text\\\">Strict</code>, <code class=\\\"language-text\\\">Default</code> and <code class=\\\"language-text\\\">Chuked</code>.</p>\\n<p>As said at the beginning, to understand <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/marshalling.html\\\">Marshalling</a> and <a href=\\\"https://doc.akka.io/docs/akka-http/current/common/unmarshalling.html\\\">Unmarshalling</a>, which is difficult when you look into the internals, it is crucial to have an idea about how <code class=\\\"language-text\\\">HttpRequest</code>, <code class=\\\"language-text\\\">HttpResponse</code> and <code class=\\\"language-text\\\">HttpEntity</code> are related to each other.</p>\\n<p>From the next article, I’ll start talking about Marshalling and Unmarshalling, which hopefully clarifies points not touched in the official doc.</p>\",\"frontmatter\":{\"title\":\"Akka HTTP Request and Response models\",\"date\":\"August 11, 2018\"}}},\"pathContext\":{\"slug\":\"/akka-http-request-response-model/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/akka-http-request-response-model.json\n// module id = 423\n// module chunks = 270688591801459"],"sourceRoot":""}