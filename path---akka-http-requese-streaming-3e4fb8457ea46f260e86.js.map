{"version":3,"sources":["webpack:///path---akka-http-requese-streaming-3e4fb8457ea46f260e86.js","webpack:///./.cache/json/akka-http-requese-streaming.json"],"names":["webpackJsonp","422","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,0BAAAC,OAAA,mBAA6DC,gBAAmBC,GAAA,gHAAAC,KAAA;AAA4pjCC,aAAwcL,MAAA,8BAAAM,KAAA,qBAAiEC,aAAgBC,KAAA","file":"path---akka-http-requese-streaming-3e4fb8457ea46f260e86.js","sourcesContent":["webpackJsonp([266854459169014],{\n\n/***/ 422:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/richardimaoka/blog/src/pages/akka-http-requese-streaming/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><img src=\\\"/blog/akka-http-request-streaming-8cb1390e8adb235de6fea931d23e478d.gif\\\" alt=\\\"akka-http-request-streaming\\\"></p>\\n<p>In the previous article, <a href=\\\"../akka-http-response-streaming\\\">Akka HTTP response streaming</a>, I covered HTTP response streaming to send chunk-by-chunk HTTP body to the client.</p>\\n<p>Then I am going to introduce the oppsite, which is HTTP <strong>request</strong> streaming. That is also described in the official Akka HTTP doc in the <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/source-streaming-support.html#consuming-json-streaming-uploads\\\">Consuming JSON Streaming uploads</a> section. </p>\\n<p>For thoese who are interested, <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-request-streaming\\\">full source code is available here</a>\\n, with instruction to run the example.</p>\\n<p>To follow the example, you need this in your <code class=\\\"language-text\\\">build.sbt</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">libraryDependencies ++= Seq(\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-http&quot;   % &quot;10.1.3&quot;,\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-stream&quot; % &quot;2.5.12&quot;,\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-http-spray-json&quot; % &quot;10.1.3&quot;,\\n  &quot;io.spray&quot; %%  &quot;spray-json&quot; % &quot;1.3.4&quot;\\n)</code></pre>\\n      </div>\\n<h2>The <code class=\\\"language-text\\\">asSourceOf</code> directive</h2>\\n<p>In Akka HTTP <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/index.html#routing-dsl\\\">Routing DSL</a>, there is a convenient directive for HTTP request streaming, which is <code class=\\\"language-text\\\">asSourceOf</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">def</span> route<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Route <span class=\\\"token operator\\\">=</span> post <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  entity<span class=\\\"token punctuation\\\">(</span>asSourceOf<span class=\\\"token punctuation\\\">[</span>T<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> source <span class=\\\"token keyword\\\">=></span> <span class=\\\"token comment\\\">//Source[T, NotUsed]</span>\\n</span>    <span class=\\\"token keyword\\\">val</span> result<span class=\\\"token operator\\\">:</span> Future<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    complete<span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">entity(asSourceOf[T])</code> extracts an Akka Stream <code class=\\\"language-text\\\">Source</code> that can be used in the succsessive curnly bracket <code class=\\\"language-text\\\">{...}</code>.</p>\\n<p>Also, to let the <code class=\\\"language-text\\\">asSourceOf</code> directive work, we will need to define an <code class=\\\"language-text\\\">implicit</code> instance of <code class=\\\"language-text\\\">akka.http.scaladsl.common.EntityStreamingSupport</code> like we did for response streaming, which I will explain later in the article. If the <code class=\\\"language-text\\\">implicit</code> instance is missing, the Scala compiler will give you an error.</p>\\n<h2>Define the data model for the JSON chunk</h2>\\n<p>Next, we should define a data model for a JSON chunk, as a Scala case class. For simplicity, we use this <code class=\\\"language-text\\\">DataChunk</code> definition:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> DataChunk<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>along with the <code class=\\\"language-text\\\">implicit</code> instance of <code class=\\\"language-text\\\">RootJsonFormat[DataChunk]</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> spray<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">.</span>DefaultJsonProtocol<span class=\\\"token punctuation\\\">.</span>_\\n<span class=\\\"token keyword\\\">import</span> spray<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">.</span>RootJsonFormat\\n\\n<span class=\\\"token keyword\\\">object</span> DataChunk <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> dataChunkJsonFormat<span class=\\\"token operator\\\">:</span> RootJsonFormat<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token operator\\\">=</span> jsonFormat2<span class=\\\"token punctuation\\\">(</span>DataChunk<span class=\\\"token punctuation\\\">.</span>apply<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This <code class=\\\"language-text\\\">implicit</code> instance will be a piece of implicit resolution “puzzle” along with <code class=\\\"language-text\\\">akka.http.scaladsl.common.EntityStreamingSupport</code> and other <code class=\\\"language-text\\\">implicit</code> instances with Akka HTTP and spray-json provides.</p>\\n<p><img src=\\\"/blog/implicit-resolution-975fd34cc00a659545d3652da5f8b91c.png\\\" alt=\\\"implicit-resolution\\\"></p>\\n<p>Once the puzzle is complete, Akka HTTP can convert the <code class=\\\"language-text\\\">DataChunk</code> case class into JSON chunk of the HTTP body, that can be transmitted over the network.</p>\\n<h2>Construct the stream to run, upon each HTTP request</h2>\\n<p>Now the data model for the JSON chunk is done, we should start coding the stream which runs upon arrival of each HTTP request.</p>\\n<p><img src=\\\"/blog/inner-stream-ee194aaed949af47a85721300d5252bd.png\\\" alt=\\\"inner-stream\\\"></p>\\n<p>As we have seen earlier, this <code class=\\\"language-text\\\">asSourceOf</code> directive:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\">entity<span class=\\\"token punctuation\\\">(</span>asSourceOf<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> source <span class=\\\"token keyword\\\">=></span> <span class=\\\"token comment\\\">//Source[DataChunk, NotUsed]</span></code></pre>\\n      </div>\\n<p>extracts an Akka Stream <code class=\\\"language-text\\\">Source[DataChunk, NotUsed]</code>, that should be connected to the rest of the stream and run. Just for the sake of simplicity, let’s define the following stream, which just counts the number of elements (i.e. number of chunks) within the HTTP request body.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">val</span> initialCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">val</span> countElement <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token punctuation\\\">(</span>currentCount<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token operator\\\">:</span> DataChunk<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> currentCount <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\nsource <span class=\\\"token comment\\\">//Source[DataChunk]</span>\\n  <span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"received\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>withAttributes<span class=\\\"token punctuation\\\">(</span>\\n    Attributes<span class=\\\"token punctuation\\\">.</span>logLevels<span class=\\\"token punctuation\\\">(</span>onElement <span class=\\\"token operator\\\">=</span> Logging<span class=\\\"token punctuation\\\">.</span>InfoLevel<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">// count the number of elements (chunks)</span>\\n  <span class=\\\"token punctuation\\\">.</span>runFold<span class=\\\"token punctuation\\\">(</span>initialCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>countElement<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">// map the materialized value</span>\\n  <span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">{</span> count <span class=\\\"token keyword\\\">=></span> s<span class=\\\"token string\\\">\\\"You sent $count chunks\\\"</span> <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>Step-by-step description about the stream example</h3>\\n<p>For those who can quickly understand what the above stream <code class=\\\"language-text\\\">source...map{ ... }</code> does, please skip this section. Otherwise, let me explain it a bit.</p>\\n<p>I’ll demonstrate this entire example in action bit later, but we should expect this source:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\">source <span class=\\\"token comment\\\">//Source[DataChunk]</span></code></pre>\\n      </div>\\n<p>emits chunks like below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// HTTP request body as JSON\\n// note that comments are only display purpose, as JSON doesn&#39;t allow comments\\n[\\n  {&quot;id&quot;: 1, &quot;data&quot;: &quot;the first&quot;  }, //1st chunk\\n  {&quot;id&quot;: 2, &quot;data&quot;: &quot;the second&quot; }, //2nd chunk\\n  {&quot;id&quot;: 3, &quot;data&quot;: &quot;the third&quot;  }, //...\\n  {&quot;id&quot;: 4, &quot;data&quot;: &quot;the fourth&quot; },\\n  {&quot;id&quot;: 5, &quot;data&quot;: &quot;the fifth&quot;  },\\n  {&quot;id&quot;: 6, &quot;data&quot;: &quot;the sixth&quot;  }\\n]</code></pre>\\n      </div>\\n<p>although each chunk is converted from a JSON object to a Scala case class instance of <code class=\\\"language-text\\\">DataChunk</code> we defined earlier.</p>\\n<p>Then the below <code class=\\\"language-text\\\">log</code> of operator is just for showing a log message upon each element going through this operator.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"received\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>withAttributes<span class=\\\"token punctuation\\\">(</span>\\n  Attributes<span class=\\\"token punctuation\\\">.</span>logLevels<span class=\\\"token punctuation\\\">(</span>onElement <span class=\\\"token operator\\\">=</span> Logging<span class=\\\"token punctuation\\\">.</span>InfoLevel<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The next step is this <code class=\\\"language-text\\\">runFold</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">val</span> initialCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">val</span> countElement <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token punctuation\\\">(</span>currentCount<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token operator\\\">:</span> DataChunk<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> currentCount <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token punctuation\\\">.</span>runFold<span class=\\\"token punctuation\\\">(</span>initialCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>countElement<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>where <code class=\\\"language-text\\\">source. ... .runFold(initialCount)(countElement)</code> is the Akka Stream version of the <code class=\\\"language-text\\\">fold(Left)</code> operation, and that will result in (i.e. <strong>materialize</strong> to) <code class=\\\"language-text\\\">6: Future[Int]</code>.</p>\\n<p>Since <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/directives/route-directives/complete.html\\\">the complete() Akka HTTP directive</a> does not take <code class=\\\"language-text\\\">Future[Int]</code> as the parameter, we convert it to <code class=\\\"language-text\\\">Future[String]</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token comment\\\">// map the materialized value</span>\\n<span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">{</span> count <span class=\\\"token keyword\\\">=></span> s<span class=\\\"token string\\\">\\\"You sent $count chunks\\\"</span> <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<hr>\\n<p><strong>NOTE</strong>: If you cannot tell what the above <code class=\\\"language-text\\\">runFold</code> does and are not familiar with Scala’s <code class=\\\"language-text\\\">fold</code> family of methods, you can see how this can be compared to the case of plain <code class=\\\"language-text\\\">List</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token operator\\\">></span> sbt console\\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">import</span> com<span class=\\\"token punctuation\\\">.</span>example<span class=\\\"token punctuation\\\">.</span>DataChunk \\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">val</span> list <span class=\\\"token operator\\\">=</span> List<span class=\\\"token punctuation\\\">(</span>\\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the first\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the second\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the thrid\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the fourth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the fifth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the sixth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">val</span> initialCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">val</span> countElement <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token punctuation\\\">(</span>currentCount<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token operator\\\">:</span> DataChunk<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> currentCount <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token operator\\\">></span> list<span class=\\\"token punctuation\\\">.</span>foldLeft<span class=\\\"token punctuation\\\">(</span>initialCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>countElement<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//you will get `res0: Int = 6`</span></code></pre>\\n      </div>\\n<p>If you have, <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-request-streaming\\\"> downloaded the source code</a>, you can exacute this from an <code class=\\\"language-text\\\">sbt console</code> REPL session.</p>\\n<p><img src=\\\"/blog/demo2-929aeaabdbfb8d0527db12c9619f9e2c.gif\\\" alt=\\\"demo2\\\"></p>\\n<p>Hope this gave you the understanding of what <code class=\\\"language-text\\\">runFold</code> does above.</p>\\n<hr>\\n<h2>Run the stream from <code class=\\\"language-text\\\">Route</code>, and integrate everything</h2>\\n<p>Now that we defined the stream to run upon each HTTP request, we wrap the stream definition into a class which has a method to take the <code class=\\\"language-text\\\">Source</code> and run:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>NotUsed\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>actor<span class=\\\"token punctuation\\\">.</span>ActorSystem\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>event<span class=\\\"token punctuation\\\">.</span>Logging\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>Source\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">{</span>Attributes<span class=\\\"token punctuation\\\">,</span> Materializer<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> scala<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">{</span>ExecutionContext<span class=\\\"token punctuation\\\">,</span> Future<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">class</span> DataProcessor<span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">implicit</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  system<span class=\\\"token operator\\\">:</span> ActorSystem<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">//this is just for implicit ExecutionContext below</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  materializer<span class=\\\"token operator\\\">:</span> Materializer\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">def</span> runDataSource<span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    source<span class=\\\"token operator\\\">:</span> Source<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">,</span> NotUsed<span class=\\\"token punctuation\\\">]</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Future<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token comment\\\">// This is needed for the last `map` method execution</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> ec<span class=\\\"token operator\\\">:</span> ExecutionContext <span class=\\\"token operator\\\">=</span> system<span class=\\\"token punctuation\\\">.</span>dispatcher\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span>    <span class=\\\"token keyword\\\">val</span> initialCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token keyword\\\">val</span> countElement <span class=\\\"token operator\\\">=</span>\\n      <span class=\\\"token punctuation\\\">(</span>currentCount<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token operator\\\">:</span> DataChunk<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> currentCount <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n    source\\n      <span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"received\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>withAttributes<span class=\\\"token punctuation\\\">(</span>\\n        Attributes<span class=\\\"token punctuation\\\">.</span>logLevels<span class=\\\"token punctuation\\\">(</span>onElement <span class=\\\"token operator\\\">=</span> Logging<span class=\\\"token punctuation\\\">.</span>InfoLevel<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// count the number of elements (chunks)</span>\\n      <span class=\\\"token punctuation\\\">.</span>runFold<span class=\\\"token punctuation\\\">(</span>initialCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>countElement<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// map the materialized value</span>\\n      <span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">{</span> count <span class=\\\"token keyword\\\">=></span> s<span class=\\\"token string\\\">\\\"You sent $count chunks\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">}</span>\\n</span></code></pre>\\n      </div>\\n<p>Note that the above required an <code class=\\\"language-text\\\">implicit Materializer</code> so that the stream can be run inside. The <code class=\\\"language-text\\\">implicit ActorSystem</code> is just for <code class=\\\"language-text\\\">ExecutionContext</code>, required for the last <code class=\\\"language-text\\\">map</code> method on the stream.</p>\\n<p>The complete code for the <code class=\\\"language-text\\\">Route</code> is as follows. Note the constructor of <code class=\\\"language-text\\\">MainRoute</code> below requires the <code class=\\\"language-text\\\">dataProcessor: DataProcessor</code> parameter, and the <code class=\\\"language-text\\\">implicit</code> instance of <code class=\\\"language-text\\\">jsonStreamingSupport: JsonEntityStreamingSupport</code> is defined.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">package</span> com<span class=\\\"token punctuation\\\">.</span>example\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>common<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">{</span>EntityStreamingSupport<span class=\\\"token punctuation\\\">,</span> JsonEntityStreamingSupport<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>marshallers<span class=\\\"token punctuation\\\">.</span>sprayjson<span class=\\\"token punctuation\\\">.</span>SprayJsonSupport<span class=\\\"token punctuation\\\">.</span>_\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>server<span class=\\\"token punctuation\\\">.</span>Directives<span class=\\\"token punctuation\\\">.</span>_\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>server<span class=\\\"token punctuation\\\">.</span>Route\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> com<span class=\\\"token punctuation\\\">.</span>example<span class=\\\"token punctuation\\\">.</span>DataChunk<span class=\\\"token punctuation\\\">.</span>_\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> scala<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>Future\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">class</span> MainRoute<span class=\\\"token punctuation\\\">(</span>dataProcessor<span class=\\\"token operator\\\">:</span> DataProcessor<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> jsonStreamingSupport<span class=\\\"token operator\\\">:</span> JsonEntityStreamingSupport <span class=\\\"token operator\\\">=</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    EntityStreamingSupport<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span>  <span class=\\\"token keyword\\\">def</span> route<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Route <span class=\\\"token operator\\\">=</span> post <span class=\\\"token punctuation\\\">{</span>\\n    entity<span class=\\\"token punctuation\\\">(</span>asSourceOf<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> source <span class=\\\"token keyword\\\">=></span> <span class=\\\"token comment\\\">//Source[DataChunk]</span>\\n      <span class=\\\"token keyword\\\">val</span> result<span class=\\\"token operator\\\">:</span> Future<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">        dataProcessor<span class=\\\"token punctuation\\\">.</span>runDataSource<span class=\\\"token punctuation\\\">(</span>source<span class=\\\"token punctuation\\\">)</span>\\n</span>\\n      complete<span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">}</span>\\n</span></code></pre>\\n      </div>\\n<p>Lastly, the <code class=\\\"language-text\\\">Main</code> object is here, which passes in the <code class=\\\"language-text\\\">DataProcessor</code> instance to the route, and <code class=\\\"language-text\\\">implicit</code>ly passes in the <code class=\\\"language-text\\\">ActorSystem</code> and <code class=\\\"language-text\\\">ActorMaterializer</code> to <code class=\\\"language-text\\\">DataProcessor</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>actor<span class=\\\"token punctuation\\\">.</span>ActorSystem\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>Http\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span>ActorMaterializer\\n\\n<span class=\\\"token keyword\\\">object</span> Main <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">def</span> main<span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Unit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> system<span class=\\\"token operator\\\">:</span> ActorSystem <span class=\\\"token operator\\\">=</span> ActorSystem<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Main\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> materializer<span class=\\\"token operator\\\">:</span> ActorMaterializer <span class=\\\"token operator\\\">=</span> ActorMaterializer<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">val</span> dataProcessor <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> DataProcessor\\n</span>    <span class=\\\"token keyword\\\">val</span> mainRoute <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> MainRoute<span class=\\\"token punctuation\\\">(</span>dataProcessor<span class=\\\"token punctuation\\\">)</span>\\n\\n    Http<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>bindAndHandle<span class=\\\"token punctuation\\\">(</span>mainRoute<span class=\\\"token punctuation\\\">.</span>route<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"localhost\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8080</span><span class=\\\"token punctuation\\\">)</span>\\n    println<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token string\\\">\\\"Server online at http://localhost:8080/\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>If you run this example, you can see that each elements on the server side is logged due to the <code class=\\\"language-text\\\">log</code> operator in the stram, as on the upper window in the below demo.</p>\\n<p><img src=\\\"/blog/demo1-bac599f31d7ea83bd75fb343274437e4.gif\\\" alt=\\\"demo1\\\"></p>\\n<p>The bottom window of the below demo is the curl command, which is below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">curl\\n  -X POST \\\\\\n  -H &quot;Content-type: application/json&quot; \\\\\\n  -H &quot;Transfer-Encoding: chunked&quot; \\\\\\n  -d &quot;@request.json&quot; http://localhost:8080</code></pre>\\n      </div>\\n<p>where the <code class=\\\"language-text\\\">request.json</code> file is this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">[\\n  {&quot;id&quot;: 1, &quot;data&quot;: &quot;the first&quot;  },\\n  {&quot;id&quot;: 2, &quot;data&quot;: &quot;the second&quot; },\\n  {&quot;id&quot;: 3, &quot;data&quot;: &quot;the third&quot;  },\\n  {&quot;id&quot;: 4, &quot;data&quot;: &quot;the fourth&quot; },\\n  {&quot;id&quot;: 5, &quot;data&quot;: &quot;the fifth&quot;  },\\n  {&quot;id&quot;: 6, &quot;data&quot;: &quot;the sixth&quot;  }\\n]</code></pre>\\n      </div>\\n<p>Again, <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-request-streaming\\\">the full source code is available here, with instruction to run the example</a>. So if you want to see all the details, plase have a look.</p>\\n<p>Also if you liked this article, please also visit my previous <a href=\\\"../akka-http-response-streaming\\\">Akka HTTP response streaming</a> article too.</p>\",\"frontmatter\":{\"title\":\"Akka HTTP request streaming\",\"date\":\"August 01, 2018\"}}},\"pathContext\":{\"slug\":\"/akka-http-requese-streaming/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---akka-http-requese-streaming-3e4fb8457ea46f260e86.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/richardimaoka/blog/src/pages/akka-http-requese-streaming/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><img src=\\\"/blog/akka-http-request-streaming-8cb1390e8adb235de6fea931d23e478d.gif\\\" alt=\\\"akka-http-request-streaming\\\"></p>\\n<p>In the previous article, <a href=\\\"../akka-http-response-streaming\\\">Akka HTTP response streaming</a>, I covered HTTP response streaming to send chunk-by-chunk HTTP body to the client.</p>\\n<p>Then I am going to introduce the oppsite, which is HTTP <strong>request</strong> streaming. That is also described in the official Akka HTTP doc in the <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/source-streaming-support.html#consuming-json-streaming-uploads\\\">Consuming JSON Streaming uploads</a> section. </p>\\n<p>For thoese who are interested, <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-request-streaming\\\">full source code is available here</a>\\n, with instruction to run the example.</p>\\n<p>To follow the example, you need this in your <code class=\\\"language-text\\\">build.sbt</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">libraryDependencies ++= Seq(\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-http&quot;   % &quot;10.1.3&quot;,\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-stream&quot; % &quot;2.5.12&quot;,\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-http-spray-json&quot; % &quot;10.1.3&quot;,\\n  &quot;io.spray&quot; %%  &quot;spray-json&quot; % &quot;1.3.4&quot;\\n)</code></pre>\\n      </div>\\n<h2>The <code class=\\\"language-text\\\">asSourceOf</code> directive</h2>\\n<p>In Akka HTTP <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/index.html#routing-dsl\\\">Routing DSL</a>, there is a convenient directive for HTTP request streaming, which is <code class=\\\"language-text\\\">asSourceOf</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">def</span> route<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Route <span class=\\\"token operator\\\">=</span> post <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  entity<span class=\\\"token punctuation\\\">(</span>asSourceOf<span class=\\\"token punctuation\\\">[</span>T<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> source <span class=\\\"token keyword\\\">=></span> <span class=\\\"token comment\\\">//Source[T, NotUsed]</span>\\n</span>    <span class=\\\"token keyword\\\">val</span> result<span class=\\\"token operator\\\">:</span> Future<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n    complete<span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">entity(asSourceOf[T])</code> extracts an Akka Stream <code class=\\\"language-text\\\">Source</code> that can be used in the succsessive curnly bracket <code class=\\\"language-text\\\">{...}</code>.</p>\\n<p>Also, to let the <code class=\\\"language-text\\\">asSourceOf</code> directive work, we will need to define an <code class=\\\"language-text\\\">implicit</code> instance of <code class=\\\"language-text\\\">akka.http.scaladsl.common.EntityStreamingSupport</code> like we did for response streaming, which I will explain later in the article. If the <code class=\\\"language-text\\\">implicit</code> instance is missing, the Scala compiler will give you an error.</p>\\n<h2>Define the data model for the JSON chunk</h2>\\n<p>Next, we should define a data model for a JSON chunk, as a Scala case class. For simplicity, we use this <code class=\\\"language-text\\\">DataChunk</code> definition:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> DataChunk<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>along with the <code class=\\\"language-text\\\">implicit</code> instance of <code class=\\\"language-text\\\">RootJsonFormat[DataChunk]</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> spray<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">.</span>DefaultJsonProtocol<span class=\\\"token punctuation\\\">.</span>_\\n<span class=\\\"token keyword\\\">import</span> spray<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">.</span>RootJsonFormat\\n\\n<span class=\\\"token keyword\\\">object</span> DataChunk <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> dataChunkJsonFormat<span class=\\\"token operator\\\">:</span> RootJsonFormat<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token operator\\\">=</span> jsonFormat2<span class=\\\"token punctuation\\\">(</span>DataChunk<span class=\\\"token punctuation\\\">.</span>apply<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This <code class=\\\"language-text\\\">implicit</code> instance will be a piece of implicit resolution “puzzle” along with <code class=\\\"language-text\\\">akka.http.scaladsl.common.EntityStreamingSupport</code> and other <code class=\\\"language-text\\\">implicit</code> instances with Akka HTTP and spray-json provides.</p>\\n<p><img src=\\\"/blog/implicit-resolution-975fd34cc00a659545d3652da5f8b91c.png\\\" alt=\\\"implicit-resolution\\\"></p>\\n<p>Once the puzzle is complete, Akka HTTP can convert the <code class=\\\"language-text\\\">DataChunk</code> case class into JSON chunk of the HTTP body, that can be transmitted over the network.</p>\\n<h2>Construct the stream to run, upon each HTTP request</h2>\\n<p>Now the data model for the JSON chunk is done, we should start coding the stream which runs upon arrival of each HTTP request.</p>\\n<p><img src=\\\"/blog/inner-stream-ee194aaed949af47a85721300d5252bd.png\\\" alt=\\\"inner-stream\\\"></p>\\n<p>As we have seen earlier, this <code class=\\\"language-text\\\">asSourceOf</code> directive:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\">entity<span class=\\\"token punctuation\\\">(</span>asSourceOf<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> source <span class=\\\"token keyword\\\">=></span> <span class=\\\"token comment\\\">//Source[DataChunk, NotUsed]</span></code></pre>\\n      </div>\\n<p>extracts an Akka Stream <code class=\\\"language-text\\\">Source[DataChunk, NotUsed]</code>, that should be connected to the rest of the stream and run. Just for the sake of simplicity, let’s define the following stream, which just counts the number of elements (i.e. number of chunks) within the HTTP request body.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">val</span> initialCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">val</span> countElement <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token punctuation\\\">(</span>currentCount<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token operator\\\">:</span> DataChunk<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> currentCount <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\nsource <span class=\\\"token comment\\\">//Source[DataChunk]</span>\\n  <span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"received\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>withAttributes<span class=\\\"token punctuation\\\">(</span>\\n    Attributes<span class=\\\"token punctuation\\\">.</span>logLevels<span class=\\\"token punctuation\\\">(</span>onElement <span class=\\\"token operator\\\">=</span> Logging<span class=\\\"token punctuation\\\">.</span>InfoLevel<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">// count the number of elements (chunks)</span>\\n  <span class=\\\"token punctuation\\\">.</span>runFold<span class=\\\"token punctuation\\\">(</span>initialCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>countElement<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">// map the materialized value</span>\\n  <span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">{</span> count <span class=\\\"token keyword\\\">=></span> s<span class=\\\"token string\\\">\\\"You sent $count chunks\\\"</span> <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3>Step-by-step description about the stream example</h3>\\n<p>For those who can quickly understand what the above stream <code class=\\\"language-text\\\">source...map{ ... }</code> does, please skip this section. Otherwise, let me explain it a bit.</p>\\n<p>I’ll demonstrate this entire example in action bit later, but we should expect this source:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\">source <span class=\\\"token comment\\\">//Source[DataChunk]</span></code></pre>\\n      </div>\\n<p>emits chunks like below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">// HTTP request body as JSON\\n// note that comments are only display purpose, as JSON doesn&#39;t allow comments\\n[\\n  {&quot;id&quot;: 1, &quot;data&quot;: &quot;the first&quot;  }, //1st chunk\\n  {&quot;id&quot;: 2, &quot;data&quot;: &quot;the second&quot; }, //2nd chunk\\n  {&quot;id&quot;: 3, &quot;data&quot;: &quot;the third&quot;  }, //...\\n  {&quot;id&quot;: 4, &quot;data&quot;: &quot;the fourth&quot; },\\n  {&quot;id&quot;: 5, &quot;data&quot;: &quot;the fifth&quot;  },\\n  {&quot;id&quot;: 6, &quot;data&quot;: &quot;the sixth&quot;  }\\n]</code></pre>\\n      </div>\\n<p>although each chunk is converted from a JSON object to a Scala case class instance of <code class=\\\"language-text\\\">DataChunk</code> we defined earlier.</p>\\n<p>Then the below <code class=\\\"language-text\\\">log</code> of operator is just for showing a log message upon each element going through this operator.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"received\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>withAttributes<span class=\\\"token punctuation\\\">(</span>\\n  Attributes<span class=\\\"token punctuation\\\">.</span>logLevels<span class=\\\"token punctuation\\\">(</span>onElement <span class=\\\"token operator\\\">=</span> Logging<span class=\\\"token punctuation\\\">.</span>InfoLevel<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The next step is this <code class=\\\"language-text\\\">runFold</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">val</span> initialCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">val</span> countElement <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token punctuation\\\">(</span>currentCount<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token operator\\\">:</span> DataChunk<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> currentCount <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token punctuation\\\">.</span>runFold<span class=\\\"token punctuation\\\">(</span>initialCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>countElement<span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>where <code class=\\\"language-text\\\">source. ... .runFold(initialCount)(countElement)</code> is the Akka Stream version of the <code class=\\\"language-text\\\">fold(Left)</code> operation, and that will result in (i.e. <strong>materialize</strong> to) <code class=\\\"language-text\\\">6: Future[Int]</code>.</p>\\n<p>Since <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/directives/route-directives/complete.html\\\">the complete() Akka HTTP directive</a> does not take <code class=\\\"language-text\\\">Future[Int]</code> as the parameter, we convert it to <code class=\\\"language-text\\\">Future[String]</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token comment\\\">// map the materialized value</span>\\n<span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">{</span> count <span class=\\\"token keyword\\\">=></span> s<span class=\\\"token string\\\">\\\"You sent $count chunks\\\"</span> <span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<hr>\\n<p><strong>NOTE</strong>: If you cannot tell what the above <code class=\\\"language-text\\\">runFold</code> does and are not familiar with Scala’s <code class=\\\"language-text\\\">fold</code> family of methods, you can see how this can be compared to the case of plain <code class=\\\"language-text\\\">List</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token operator\\\">></span> sbt console\\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">import</span> com<span class=\\\"token punctuation\\\">.</span>example<span class=\\\"token punctuation\\\">.</span>DataChunk \\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">val</span> list <span class=\\\"token operator\\\">=</span> List<span class=\\\"token punctuation\\\">(</span>\\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the first\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the second\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the thrid\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the fourth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the fifth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n  DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the sixth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>  \\n<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">val</span> initialCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token operator\\\">></span> <span class=\\\"token keyword\\\">val</span> countElement <span class=\\\"token operator\\\">=</span>\\n  <span class=\\\"token punctuation\\\">(</span>currentCount<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token operator\\\">:</span> DataChunk<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> currentCount <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n<span class=\\\"token operator\\\">></span> list<span class=\\\"token punctuation\\\">.</span>foldLeft<span class=\\\"token punctuation\\\">(</span>initialCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>countElement<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//you will get `res0: Int = 6`</span></code></pre>\\n      </div>\\n<p>If you have, <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-request-streaming\\\"> downloaded the source code</a>, you can exacute this from an <code class=\\\"language-text\\\">sbt console</code> REPL session.</p>\\n<p><img src=\\\"/blog/demo2-929aeaabdbfb8d0527db12c9619f9e2c.gif\\\" alt=\\\"demo2\\\"></p>\\n<p>Hope this gave you the understanding of what <code class=\\\"language-text\\\">runFold</code> does above.</p>\\n<hr>\\n<h2>Run the stream from <code class=\\\"language-text\\\">Route</code>, and integrate everything</h2>\\n<p>Now that we defined the stream to run upon each HTTP request, we wrap the stream definition into a class which has a method to take the <code class=\\\"language-text\\\">Source</code> and run:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>NotUsed\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>actor<span class=\\\"token punctuation\\\">.</span>ActorSystem\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>event<span class=\\\"token punctuation\\\">.</span>Logging\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>Source\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">{</span>Attributes<span class=\\\"token punctuation\\\">,</span> Materializer<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> scala<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">{</span>ExecutionContext<span class=\\\"token punctuation\\\">,</span> Future<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">class</span> DataProcessor<span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">implicit</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  system<span class=\\\"token operator\\\">:</span> ActorSystem<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">//this is just for implicit ExecutionContext below</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  materializer<span class=\\\"token operator\\\">:</span> Materializer\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">def</span> runDataSource<span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    source<span class=\\\"token operator\\\">:</span> Source<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">,</span> NotUsed<span class=\\\"token punctuation\\\">]</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Future<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token comment\\\">// This is needed for the last `map` method execution</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> ec<span class=\\\"token operator\\\">:</span> ExecutionContext <span class=\\\"token operator\\\">=</span> system<span class=\\\"token punctuation\\\">.</span>dispatcher\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span>    <span class=\\\"token keyword\\\">val</span> initialCount <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token keyword\\\">val</span> countElement <span class=\\\"token operator\\\">=</span>\\n      <span class=\\\"token punctuation\\\">(</span>currentCount<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> _<span class=\\\"token operator\\\">:</span> DataChunk<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">=></span> currentCount <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span>\\n\\n    source\\n      <span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"received\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>withAttributes<span class=\\\"token punctuation\\\">(</span>\\n        Attributes<span class=\\\"token punctuation\\\">.</span>logLevels<span class=\\\"token punctuation\\\">(</span>onElement <span class=\\\"token operator\\\">=</span> Logging<span class=\\\"token punctuation\\\">.</span>InfoLevel<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// count the number of elements (chunks)</span>\\n      <span class=\\\"token punctuation\\\">.</span>runFold<span class=\\\"token punctuation\\\">(</span>initialCount<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>countElement<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// map the materialized value</span>\\n      <span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">{</span> count <span class=\\\"token keyword\\\">=></span> s<span class=\\\"token string\\\">\\\"You sent $count chunks\\\"</span> <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">}</span>\\n</span></code></pre>\\n      </div>\\n<p>Note that the above required an <code class=\\\"language-text\\\">implicit Materializer</code> so that the stream can be run inside. The <code class=\\\"language-text\\\">implicit ActorSystem</code> is just for <code class=\\\"language-text\\\">ExecutionContext</code>, required for the last <code class=\\\"language-text\\\">map</code> method on the stream.</p>\\n<p>The complete code for the <code class=\\\"language-text\\\">Route</code> is as follows. Note the constructor of <code class=\\\"language-text\\\">MainRoute</code> below requires the <code class=\\\"language-text\\\">dataProcessor: DataProcessor</code> parameter, and the <code class=\\\"language-text\\\">implicit</code> instance of <code class=\\\"language-text\\\">jsonStreamingSupport: JsonEntityStreamingSupport</code> is defined.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">package</span> com<span class=\\\"token punctuation\\\">.</span>example\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>common<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">{</span>EntityStreamingSupport<span class=\\\"token punctuation\\\">,</span> JsonEntityStreamingSupport<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>marshallers<span class=\\\"token punctuation\\\">.</span>sprayjson<span class=\\\"token punctuation\\\">.</span>SprayJsonSupport<span class=\\\"token punctuation\\\">.</span>_\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>server<span class=\\\"token punctuation\\\">.</span>Directives<span class=\\\"token punctuation\\\">.</span>_\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>server<span class=\\\"token punctuation\\\">.</span>Route\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> com<span class=\\\"token punctuation\\\">.</span>example<span class=\\\"token punctuation\\\">.</span>DataChunk<span class=\\\"token punctuation\\\">.</span>_\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> scala<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>Future\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">class</span> MainRoute<span class=\\\"token punctuation\\\">(</span>dataProcessor<span class=\\\"token operator\\\">:</span> DataProcessor<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> jsonStreamingSupport<span class=\\\"token operator\\\">:</span> JsonEntityStreamingSupport <span class=\\\"token operator\\\">=</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    EntityStreamingSupport<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span>  <span class=\\\"token keyword\\\">def</span> route<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> Route <span class=\\\"token operator\\\">=</span> post <span class=\\\"token punctuation\\\">{</span>\\n    entity<span class=\\\"token punctuation\\\">(</span>asSourceOf<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> source <span class=\\\"token keyword\\\">=></span> <span class=\\\"token comment\\\">//Source[DataChunk]</span>\\n      <span class=\\\"token keyword\\\">val</span> result<span class=\\\"token operator\\\">:</span> Future<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">        dataProcessor<span class=\\\"token punctuation\\\">.</span>runDataSource<span class=\\\"token punctuation\\\">(</span>source<span class=\\\"token punctuation\\\">)</span>\\n</span>\\n      complete<span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token punctuation\\\">}</span>\\n</span></code></pre>\\n      </div>\\n<p>Lastly, the <code class=\\\"language-text\\\">Main</code> object is here, which passes in the <code class=\\\"language-text\\\">DataProcessor</code> instance to the route, and <code class=\\\"language-text\\\">implicit</code>ly passes in the <code class=\\\"language-text\\\">ActorSystem</code> and <code class=\\\"language-text\\\">ActorMaterializer</code> to <code class=\\\"language-text\\\">DataProcessor</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>actor<span class=\\\"token punctuation\\\">.</span>ActorSystem\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>Http\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span>ActorMaterializer\\n\\n<span class=\\\"token keyword\\\">object</span> Main <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">def</span> main<span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Unit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> system<span class=\\\"token operator\\\">:</span> ActorSystem <span class=\\\"token operator\\\">=</span> ActorSystem<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Main\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> materializer<span class=\\\"token operator\\\">:</span> ActorMaterializer <span class=\\\"token operator\\\">=</span> ActorMaterializer<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">val</span> dataProcessor <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> DataProcessor\\n</span>    <span class=\\\"token keyword\\\">val</span> mainRoute <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> MainRoute<span class=\\\"token punctuation\\\">(</span>dataProcessor<span class=\\\"token punctuation\\\">)</span>\\n\\n    Http<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>bindAndHandle<span class=\\\"token punctuation\\\">(</span>mainRoute<span class=\\\"token punctuation\\\">.</span>route<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"localhost\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8080</span><span class=\\\"token punctuation\\\">)</span>\\n    println<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token string\\\">\\\"Server online at http://localhost:8080/\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>If you run this example, you can see that each elements on the server side is logged due to the <code class=\\\"language-text\\\">log</code> operator in the stram, as on the upper window in the below demo.</p>\\n<p><img src=\\\"/blog/demo1-bac599f31d7ea83bd75fb343274437e4.gif\\\" alt=\\\"demo1\\\"></p>\\n<p>The bottom window of the below demo is the curl command, which is below:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">curl\\n  -X POST \\\\\\n  -H &quot;Content-type: application/json&quot; \\\\\\n  -H &quot;Transfer-Encoding: chunked&quot; \\\\\\n  -d &quot;@request.json&quot; http://localhost:8080</code></pre>\\n      </div>\\n<p>where the <code class=\\\"language-text\\\">request.json</code> file is this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">[\\n  {&quot;id&quot;: 1, &quot;data&quot;: &quot;the first&quot;  },\\n  {&quot;id&quot;: 2, &quot;data&quot;: &quot;the second&quot; },\\n  {&quot;id&quot;: 3, &quot;data&quot;: &quot;the third&quot;  },\\n  {&quot;id&quot;: 4, &quot;data&quot;: &quot;the fourth&quot; },\\n  {&quot;id&quot;: 5, &quot;data&quot;: &quot;the fifth&quot;  },\\n  {&quot;id&quot;: 6, &quot;data&quot;: &quot;the sixth&quot;  }\\n]</code></pre>\\n      </div>\\n<p>Again, <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-request-streaming\\\">the full source code is available here, with instruction to run the example</a>. So if you want to see all the details, plase have a look.</p>\\n<p>Also if you liked this article, please also visit my previous <a href=\\\"../akka-http-response-streaming\\\">Akka HTTP response streaming</a> article too.</p>\",\"frontmatter\":{\"title\":\"Akka HTTP request streaming\",\"date\":\"August 01, 2018\"}}},\"pathContext\":{\"slug\":\"/akka-http-requese-streaming/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/akka-http-requese-streaming.json\n// module id = 422\n// module chunks = 266854459169014"],"sourceRoot":""}