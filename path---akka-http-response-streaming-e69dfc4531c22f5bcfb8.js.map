{"version":3,"sources":["webpack:///path---akka-http-response-streaming-e69dfc4531c22f5bcfb8.js","webpack:///./.cache/json/akka-http-response-streaming.json"],"names":["webpackJsonp","417","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,0BAAAC,OAAA,mBAA6DC,gBAAmBC,GAAA,iHAAAC,KAAA,4hqBAA8lrBC,aAA+QL,MAAA,+BAAAM,KAAA,mBAAgEC,aAAgBC,KAAA","file":"path---akka-http-response-streaming-e69dfc4531c22f5bcfb8.js","sourcesContent":["webpackJsonp([146681055074323],{\n\n/***/ 417:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/richardimaoka/blog/src/pages/akka-http-response-streaming/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>In this article, I am going to introduce HTTP response streaming, which is als described in the official Akka HTTP doc on the <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/source-streaming-support.html#source-streaming\\\">Source Streaming/JSON streaming page</a>. </p>\\n<p><img src=\\\"/blog/response-streaming-95547eed70ac7bce1dc9c5211a5fa12e.gif\\\" alt=\\\"response-streaming\\\"></p>\\n<p>There are common use cases where such HTTP response streaming is useful, for example:</p>\\n<ol>\\n<li>The client GUI application immediately processes every small chunk of data as soon as received, for quicker rendering</li>\\n<li>The HTTP server sends a huge amount of data in a back-pressured fashion so that the client is not overwhelmed</li>\\n</ol>\\n<p>For 1, <a href=\\\"http://oboejs.com/\\\">Oboe.js</a> seems to be a good example. It has nice features and also graet animation on its website illustrating its capabilities, so I would highly recommend visiting the <a href=\\\"http://oboejs.com/\\\">Oboe.js site</a> .</p>\\n<a href=\\\"http://oboejs.com/\\\">\\n  <img src=\\\"/blog/oboejs-ca61e9c607a76653e29290de563815e5.png\\\">\\n</a>\\n<h3>HTTP request without vs. with streaming</h3>\\n<p>You might wonder that HTTP response streaming is not useful, if the HTTP server can respond with a small but complete HTTP request upon each of frequent HTTP requests, which is illustrated as “HTTP response without streaming” in the below animation. </p>\\n<p><img src=\\\"/blog/response-streaming-comparison1-5133ea6984308a92d16c7dd193938912.gif\\\" alt=\\\"response-streaming-comparison1\\\"></p>\\n<p>That might work in some cases, but if the latency is large between the client and the server, you can get throughput benefit with only a single request then returning multiple chunks by HTTP response streaming, because the client doesn’t need the second and following requests before receiving more chunks. </p>\\n<h3>WebSocket vs. HTTP request streaming</h3>\\n<p>You might also think that WebSocket can do the same thing, and yes, in certain cases you can achieve the same goals using WebSocket. </p>\\n<p>However, they are just differnt things that can be used for different purposes, even if there could be some overlap in the use cases. WebSocket is bi-directional connectivity based on its own protocol, but HTTP response streaming happens within a single HTTP request/response roundtrip, and it is Akka HTTP’s implementation of HTTP Chunked Transfer Encoding <a href=\\\"https://tools.ietf.org/html/rfc7230#section-4.1\\\">RFC7230 section 4.1</a>.</p>\\n<p> <img src=\\\"/blog/response-streaming-comparison2-59ff9164aebcb155c289315208d7dcd4.gif\\\" alt=\\\"response-streaming-comparison1\\\"></p>\\n<p>WebSocket and HTTP streaming are not competing techniques nor replacement to each other in general, and you should choose the appropriate one dependent on your use case and your expected application behavior.</p>\\n<p>If the simplicity in HTTP response streaming’s prefered (i.e.) it happens inside a single HTTP request/response roundtrip, you would go with HTTP response streaming. If you need more flexible bi-directional connectoin, WebSocket might be a better fit.</p>\\n<h2>How to implement HTTP response streaming</h2>\\n<p>From here, let’s see how to implement the JSON streaming with an example as illustrated in the following demo screen recording. The complete source code can be found <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-response-streaming\\\">here</a> with instruction to run the example.</p>\\n<p>More detailed explanation can be found in <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/source-streaming-support.html#json-streaming\\\">the official doc</a>.</p>\\n<p> <img src=\\\"/blog/json-streaming-demo1-67fa6ce31196b06294a12f7c1e51ccf7.gif\\\" alt=\\\"json-streaming-demo1\\\"></p>\\n<p>Firstly make sure the following dependencies are in your <code class=\\\"language-text\\\">build.sbt</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">libraryDependencies ++= Seq(\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-http&quot;   % &quot;10.1.3&quot;,\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-stream&quot; % &quot;2.5.12&quot;\\n)</code></pre>\\n      </div>\\n<p>Then, we should define the case class modeling the chunk of JSON data in a Scala case class.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> DataChunk<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The next thing is to define <code class=\\\"language-text\\\">implicit</code> instances of necessary type classes so that “Scala case class to JSON” conversion happens automatically. (If you forget necessary <code class=\\\"language-text\\\">implicit</code> instances, the Scala compiler gives you an error.)  </p>\\n<p>So, add these to the <code class=\\\"language-text\\\">libraryDependencies</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\">libraryDependencies <span class=\\\"token operator\\\">++</span><span class=\\\"token operator\\\">=</span> Seq<span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"com.typesafe.akka\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"akka-http\\\"</span>   <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"10.1.3\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"com.typesafe.akka\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"akka-stream\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"2.5.12\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token string\\\">\\\"com.typesafe.akka\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"akka-http-spray-json\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"10.1.3\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token string\\\">\\\"io.spray\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span>  <span class=\\\"token string\\\">\\\"spray-json\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"1.3.4\\\"</span>\\n</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Here we use <a href=\\\"https://github.com/spray/spray-json\\\">spray-json</a>, as in the <a href=\\\"../akka-http-quickstart\\\">JSON to/from Scala case class conversion</a> section of my article, and the <a href=\\\"https://doc.akka.io/docs/akka-http/current/introduction.html#routing-dsl-for-http-servers\\\">Routing DSL for HTTP servers</a> section in the official doc.</p>\\n<p>We should define the following <code class=\\\"language-text\\\">implicit RootJsonFormat[DataChunk]</code> instance.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> spray<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">.</span>DefaultJsonProtocol<span class=\\\"token punctuation\\\">.</span>_\\n<span class=\\\"token keyword\\\">import</span> spray<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">.</span>RootJsonFormat\\n\\n<span class=\\\"token keyword\\\">object</span> DataChunk <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> dataChunkJsonFormat<span class=\\\"token operator\\\">:</span> RootJsonFormat<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token operator\\\">=</span> jsonFormat2<span class=\\\"token punctuation\\\">(</span>DataChunk<span class=\\\"token punctuation\\\">.</span>apply<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This <code class=\\\"language-text\\\">implicit RootJsonFormat[DataChunk]</code> will fit into the <code class=\\\"language-text\\\">implicit</code> resolution puzzle with the pieces provided by Akka HTTP and spray-json.</p>\\n<p> <img src=\\\"/blog/implicit-resolution-975fd34cc00a659545d3652da5f8b91c.png\\\" alt=\\\"implicit-resolution\\\"></p>\\n<p>We need some more <code class=\\\"language-text\\\">implicit</code> instances to import, and specifically for HTTP response streaming, an <code class=\\\"language-text\\\">implicit</code> instance of <code class=\\\"language-text\\\">EntityStreamingSupport</code> should be defined:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>common<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">{</span>EntityStreamingSupport<span class=\\\"token punctuation\\\">,</span> JsonEntityStreamingSupport<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>marshallers<span class=\\\"token punctuation\\\">.</span>sprayjson<span class=\\\"token punctuation\\\">.</span>SprayJsonSupport<span class=\\\"token punctuation\\\">.</span>_\\n</span><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>server<span class=\\\"token punctuation\\\">.</span>Directives<span class=\\\"token punctuation\\\">.</span>_\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>server<span class=\\\"token punctuation\\\">.</span>Route\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> com<span class=\\\"token punctuation\\\">.</span>example<span class=\\\"token punctuation\\\">.</span>DataChunk<span class=\\\"token punctuation\\\">.</span>_\\n</span>\\n<span class=\\\"token comment\\\">// this is needed for HTTP response streaming</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> jsonStreamingSupport<span class=\\\"token operator\\\">:</span> JsonEntityStreamingSupport\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token operator\\\">=</span> EntityStreamingSupport<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</span>\\n<span class=\\\"token keyword\\\">def</span> route<span class=\\\"token operator\\\">:</span> Route <span class=\\\"token operator\\\">=</span> get <span class=\\\"token punctuation\\\">{</span>\\n  complete<span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">.</span>source<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>where <code class=\\\"language-text\\\">DataSource.source</code> is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>NotUsed\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>Source\\n<span class=\\\"token keyword\\\">import</span> scala<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>duration<span class=\\\"token punctuation\\\">.</span>_\\n\\n<span class=\\\"token keyword\\\">object</span> DataSource <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">def</span> source<span class=\\\"token operator\\\">:</span> Source<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">,</span> NotUsed<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span>\\n    Source<span class=\\\"token punctuation\\\">(</span>List<span class=\\\"token punctuation\\\">(</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the first\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the second\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the thrid\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the fourth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the fifth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the sixth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// you need throttling for demonstration, otherwise</span>\\n      <span class=\\\"token comment\\\">// it's too fast and you don't see what's happening</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>throttle<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1.</span>second<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>The highlighted lines above will make the implicit resolution passes and compilation will go through. </p>\\n<p>Previously, <code class=\\\"language-text\\\">EntityStreamingSupport</code> was not needed as in the <a href=\\\"../akka-http-quickstart/\\\">quickstart article</a> because it just <code class=\\\"language-text\\\">complete</code>-d the HTTP response with a instant value. Now HTTP response streaming uses <code class=\\\"language-text\\\">Source</code> passed to the <code class=\\\"language-text\\\">complete</code> method, not just a simple instant value, thus the <code class=\\\"language-text\\\">implicit EntityStreamingSupport</code> instance is needed.</p>\\n<p>Now you can bring up the HTTP server from the main method,</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>actor<span class=\\\"token punctuation\\\">.</span>ActorSystem\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>Http\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span>ActorMaterializer\\n\\n<span class=\\\"token keyword\\\">object</span> Main <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">def</span> main<span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Unit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> system<span class=\\\"token operator\\\">:</span> ActorSystem <span class=\\\"token operator\\\">=</span> ActorSystem<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Main\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> materializer<span class=\\\"token operator\\\">:</span> ActorMaterializer <span class=\\\"token operator\\\">=</span> ActorMaterializer<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    Http<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>bindAndHandle<span class=\\\"token punctuation\\\">(</span>route<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"localhost\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8080</span><span class=\\\"token punctuation\\\">)</span>\\n    println<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token string\\\">\\\"Server online at http://localhost:8080/\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>and just run it.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">&gt; sbt run</code></pre>\\n      </div>\\n<p>If you access <a href=\\\"http://localhost:8080\\\">http://localhost:8080</a>, you will see the following</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">[{&quot;id&quot;: 1, &quot;data&quot;: &quot;the first&quot;},{&quot;id&quot;: 2, &quot;data&quot;: &quot;the second&quot;},{&quot;id&quot;: 3, &quot;data&quot;: &quot;the third&quot;},{&quot;id&quot;: 4, &quot;data&quot;: &quot;the fourth&quot;},{&quot;id&quot;: 5, &quot;data&quot;: &quot;the fifth&quot;},{&quot;id&quot;: 6, &quot;data&quot;: &quot;the sixth&quot;}]</code></pre>\\n      </div>\\n<p>Not that the end result is a complete JSON array, where each JSON data chunk is a JSON object, delimited by <code class=\\\"language-text\\\">,</code>. This can be compared with new-line delimited JSON streaming, as described in the following section.</p>\\n<h2>New-line delimited JSON streaming</h2>\\n<p>JSON streaming actually doesn’t have the single fixed format, but another major variant from the above comma-delimited JSON streaming is new-line delimited JSON streaming.</p>\\n<p>That is illustrated as follows, and you will notice that the end result is not a valid JSON, but only each data chunk is a valid JSON object, delimited by new-lines instead of commas.</p>\\n<p> <img src=\\\"/blog/json-streaming-demo2-2d806dc41c7f8fa9383da21f979e443a.gif\\\" alt=\\\"json-streaming-demo2\\\"></p>\\n<p> If for any reason new-line delimited JSON streaming is preferred, you can do that by changing the <code class=\\\"language-text\\\">EntityStreamingSupport</code> as follows:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> jsonStreamingSupport<span class=\\\"token operator\\\">:</span> JsonEntityStreamingSupport <span class=\\\"token operator\\\">=</span>\\n  EntityStreamingSupport\\n    <span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token comment\\\">// comment out the lines below to comma-delimited JSON streaming</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">.</span>withFramingRenderer<span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token comment\\\">// this enables new-line delimited JSON streaming</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      Flow<span class=\\\"token punctuation\\\">[</span>ByteString<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">(</span>byteString <span class=\\\"token keyword\\\">=></span> byteString <span class=\\\"token operator\\\">++</span> newline<span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"token keyword\\\">def</span> route<span class=\\\"token operator\\\">:</span> Route <span class=\\\"token operator\\\">=</span> get <span class=\\\"token punctuation\\\">{</span>\\n  complete<span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">.</span>source<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Again, if you want to see the complete source code, that can be found <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-response-streaming\\\">here</a> with instruction to run the example.</p>\",\"frontmatter\":{\"title\":\"Akka HTTP response streaming\",\"date\":\"July 29, 2018\"}}},\"pathContext\":{\"slug\":\"/akka-http-response-streaming/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---akka-http-response-streaming-e69dfc4531c22f5bcfb8.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Akka, Concurrency, etc.\",\"author\":\"Richard Imaoka\"}},\"markdownRemark\":{\"id\":\"C:/Users/richardimaoka/blog/src/pages/akka-http-response-streaming/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>In this article, I am going to introduce HTTP response streaming, which is als described in the official Akka HTTP doc on the <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/source-streaming-support.html#source-streaming\\\">Source Streaming/JSON streaming page</a>. </p>\\n<p><img src=\\\"/blog/response-streaming-95547eed70ac7bce1dc9c5211a5fa12e.gif\\\" alt=\\\"response-streaming\\\"></p>\\n<p>There are common use cases where such HTTP response streaming is useful, for example:</p>\\n<ol>\\n<li>The client GUI application immediately processes every small chunk of data as soon as received, for quicker rendering</li>\\n<li>The HTTP server sends a huge amount of data in a back-pressured fashion so that the client is not overwhelmed</li>\\n</ol>\\n<p>For 1, <a href=\\\"http://oboejs.com/\\\">Oboe.js</a> seems to be a good example. It has nice features and also graet animation on its website illustrating its capabilities, so I would highly recommend visiting the <a href=\\\"http://oboejs.com/\\\">Oboe.js site</a> .</p>\\n<a href=\\\"http://oboejs.com/\\\">\\n  <img src=\\\"/blog/oboejs-ca61e9c607a76653e29290de563815e5.png\\\">\\n</a>\\n<h3>HTTP request without vs. with streaming</h3>\\n<p>You might wonder that HTTP response streaming is not useful, if the HTTP server can respond with a small but complete HTTP request upon each of frequent HTTP requests, which is illustrated as “HTTP response without streaming” in the below animation. </p>\\n<p><img src=\\\"/blog/response-streaming-comparison1-5133ea6984308a92d16c7dd193938912.gif\\\" alt=\\\"response-streaming-comparison1\\\"></p>\\n<p>That might work in some cases, but if the latency is large between the client and the server, you can get throughput benefit with only a single request then returning multiple chunks by HTTP response streaming, because the client doesn’t need the second and following requests before receiving more chunks. </p>\\n<h3>WebSocket vs. HTTP request streaming</h3>\\n<p>You might also think that WebSocket can do the same thing, and yes, in certain cases you can achieve the same goals using WebSocket. </p>\\n<p>However, they are just differnt things that can be used for different purposes, even if there could be some overlap in the use cases. WebSocket is bi-directional connectivity based on its own protocol, but HTTP response streaming happens within a single HTTP request/response roundtrip, and it is Akka HTTP’s implementation of HTTP Chunked Transfer Encoding <a href=\\\"https://tools.ietf.org/html/rfc7230#section-4.1\\\">RFC7230 section 4.1</a>.</p>\\n<p> <img src=\\\"/blog/response-streaming-comparison2-59ff9164aebcb155c289315208d7dcd4.gif\\\" alt=\\\"response-streaming-comparison1\\\"></p>\\n<p>WebSocket and HTTP streaming are not competing techniques nor replacement to each other in general, and you should choose the appropriate one dependent on your use case and your expected application behavior.</p>\\n<p>If the simplicity in HTTP response streaming’s prefered (i.e.) it happens inside a single HTTP request/response roundtrip, you would go with HTTP response streaming. If you need more flexible bi-directional connectoin, WebSocket might be a better fit.</p>\\n<h2>How to implement HTTP response streaming</h2>\\n<p>From here, let’s see how to implement the JSON streaming with an example as illustrated in the following demo screen recording. The complete source code can be found <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-response-streaming\\\">here</a> with instruction to run the example.</p>\\n<p>More detailed explanation can be found in <a href=\\\"https://doc.akka.io/docs/akka-http/current/routing-dsl/source-streaming-support.html#json-streaming\\\">the official doc</a>.</p>\\n<p> <img src=\\\"/blog/json-streaming-demo1-67fa6ce31196b06294a12f7c1e51ccf7.gif\\\" alt=\\\"json-streaming-demo1\\\"></p>\\n<p>Firstly make sure the following dependencies are in your <code class=\\\"language-text\\\">build.sbt</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">libraryDependencies ++= Seq(\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-http&quot;   % &quot;10.1.3&quot;,\\n  &quot;com.typesafe.akka&quot; %% &quot;akka-stream&quot; % &quot;2.5.12&quot;\\n)</code></pre>\\n      </div>\\n<p>Then, we should define the case class modeling the chunk of JSON data in a Scala case class.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">case</span> <span class=\\\"token keyword\\\">class</span> DataChunk<span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Int</span><span class=\\\"token punctuation\\\">,</span> data<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>The next thing is to define <code class=\\\"language-text\\\">implicit</code> instances of necessary type classes so that “Scala case class to JSON” conversion happens automatically. (If you forget necessary <code class=\\\"language-text\\\">implicit</code> instances, the Scala compiler gives you an error.)  </p>\\n<p>So, add these to the <code class=\\\"language-text\\\">libraryDependencies</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\">libraryDependencies <span class=\\\"token operator\\\">++</span><span class=\\\"token operator\\\">=</span> Seq<span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token string\\\">\\\"com.typesafe.akka\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"akka-http\\\"</span>   <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"10.1.3\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token string\\\">\\\"com.typesafe.akka\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"akka-stream\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"2.5.12\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token string\\\">\\\"com.typesafe.akka\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"akka-http-spray-json\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"10.1.3\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token string\\\">\\\"io.spray\\\"</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">%</span>  <span class=\\\"token string\\\">\\\"spray-json\\\"</span> <span class=\\\"token operator\\\">%</span> <span class=\\\"token string\\\">\\\"1.3.4\\\"</span>\\n</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Here we use <a href=\\\"https://github.com/spray/spray-json\\\">spray-json</a>, as in the <a href=\\\"../akka-http-quickstart\\\">JSON to/from Scala case class conversion</a> section of my article, and the <a href=\\\"https://doc.akka.io/docs/akka-http/current/introduction.html#routing-dsl-for-http-servers\\\">Routing DSL for HTTP servers</a> section in the official doc.</p>\\n<p>We should define the following <code class=\\\"language-text\\\">implicit RootJsonFormat[DataChunk]</code> instance.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> spray<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">.</span>DefaultJsonProtocol<span class=\\\"token punctuation\\\">.</span>_\\n<span class=\\\"token keyword\\\">import</span> spray<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">.</span>RootJsonFormat\\n\\n<span class=\\\"token keyword\\\">object</span> DataChunk <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> dataChunkJsonFormat<span class=\\\"token operator\\\">:</span> RootJsonFormat<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">]</span>\\n    <span class=\\\"token operator\\\">=</span> jsonFormat2<span class=\\\"token punctuation\\\">(</span>DataChunk<span class=\\\"token punctuation\\\">.</span>apply<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>This <code class=\\\"language-text\\\">implicit RootJsonFormat[DataChunk]</code> will fit into the <code class=\\\"language-text\\\">implicit</code> resolution puzzle with the pieces provided by Akka HTTP and spray-json.</p>\\n<p> <img src=\\\"/blog/implicit-resolution-975fd34cc00a659545d3652da5f8b91c.png\\\" alt=\\\"implicit-resolution\\\"></p>\\n<p>We need some more <code class=\\\"language-text\\\">implicit</code> instances to import, and specifically for HTTP response streaming, an <code class=\\\"language-text\\\">implicit</code> instance of <code class=\\\"language-text\\\">EntityStreamingSupport</code> should be defined:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>common<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">{</span>EntityStreamingSupport<span class=\\\"token punctuation\\\">,</span> JsonEntityStreamingSupport<span class=\\\"token punctuation\\\">}</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>marshallers<span class=\\\"token punctuation\\\">.</span>sprayjson<span class=\\\"token punctuation\\\">.</span>SprayJsonSupport<span class=\\\"token punctuation\\\">.</span>_\\n</span><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>server<span class=\\\"token punctuation\\\">.</span>Directives<span class=\\\"token punctuation\\\">.</span>_\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>server<span class=\\\"token punctuation\\\">.</span>Route\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">import</span> com<span class=\\\"token punctuation\\\">.</span>example<span class=\\\"token punctuation\\\">.</span>DataChunk<span class=\\\"token punctuation\\\">.</span>_\\n</span>\\n<span class=\\\"token comment\\\">// this is needed for HTTP response streaming</span>\\n<span class=\\\"gatsby-highlight-code-line\\\"><span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> jsonStreamingSupport<span class=\\\"token operator\\\">:</span> JsonEntityStreamingSupport\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token operator\\\">=</span> EntityStreamingSupport<span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</span>\\n<span class=\\\"token keyword\\\">def</span> route<span class=\\\"token operator\\\">:</span> Route <span class=\\\"token operator\\\">=</span> get <span class=\\\"token punctuation\\\">{</span>\\n  complete<span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">.</span>source<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>where <code class=\\\"language-text\\\">DataSource.source</code> is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>NotUsed\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>Source\\n<span class=\\\"token keyword\\\">import</span> scala<span class=\\\"token punctuation\\\">.</span>concurrent<span class=\\\"token punctuation\\\">.</span>duration<span class=\\\"token punctuation\\\">.</span>_\\n\\n<span class=\\\"token keyword\\\">object</span> DataSource <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">def</span> source<span class=\\\"token operator\\\">:</span> Source<span class=\\\"token punctuation\\\">[</span>DataChunk<span class=\\\"token punctuation\\\">,</span> NotUsed<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span>\\n    Source<span class=\\\"token punctuation\\\">(</span>List<span class=\\\"token punctuation\\\">(</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the first\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the second\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the thrid\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the fourth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the fifth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n      DataChunk<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"the sixth\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// you need throttling for demonstration, otherwise</span>\\n      <span class=\\\"token comment\\\">// it's too fast and you don't see what's happening</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>throttle<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1.</span>second<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>The highlighted lines above will make the implicit resolution passes and compilation will go through. </p>\\n<p>Previously, <code class=\\\"language-text\\\">EntityStreamingSupport</code> was not needed as in the <a href=\\\"../akka-http-quickstart/\\\">quickstart article</a> because it just <code class=\\\"language-text\\\">complete</code>-d the HTTP response with a instant value. Now HTTP response streaming uses <code class=\\\"language-text\\\">Source</code> passed to the <code class=\\\"language-text\\\">complete</code> method, not just a simple instant value, thus the <code class=\\\"language-text\\\">implicit EntityStreamingSupport</code> instance is needed.</p>\\n<p>Now you can bring up the HTTP server from the main method,</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>actor<span class=\\\"token punctuation\\\">.</span>ActorSystem\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>http<span class=\\\"token punctuation\\\">.</span>scaladsl<span class=\\\"token punctuation\\\">.</span>Http\\n<span class=\\\"token keyword\\\">import</span> akka<span class=\\\"token punctuation\\\">.</span>stream<span class=\\\"token punctuation\\\">.</span>ActorMaterializer\\n\\n<span class=\\\"token keyword\\\">object</span> Main <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">def</span> main<span class=\\\"token punctuation\\\">(</span>args<span class=\\\"token operator\\\">:</span> Array<span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">String</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">Unit</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> system<span class=\\\"token operator\\\">:</span> ActorSystem <span class=\\\"token operator\\\">=</span> ActorSystem<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Main\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> materializer<span class=\\\"token operator\\\">:</span> ActorMaterializer <span class=\\\"token operator\\\">=</span> ActorMaterializer<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    Http<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>bindAndHandle<span class=\\\"token punctuation\\\">(</span>route<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"localhost\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8080</span><span class=\\\"token punctuation\\\">)</span>\\n    println<span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token string\\\">\\\"Server online at http://localhost:8080/\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>and just run it.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">&gt; sbt run</code></pre>\\n      </div>\\n<p>If you access <a href=\\\"http://localhost:8080\\\">http://localhost:8080</a>, you will see the following</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">[{&quot;id&quot;: 1, &quot;data&quot;: &quot;the first&quot;},{&quot;id&quot;: 2, &quot;data&quot;: &quot;the second&quot;},{&quot;id&quot;: 3, &quot;data&quot;: &quot;the third&quot;},{&quot;id&quot;: 4, &quot;data&quot;: &quot;the fourth&quot;},{&quot;id&quot;: 5, &quot;data&quot;: &quot;the fifth&quot;},{&quot;id&quot;: 6, &quot;data&quot;: &quot;the sixth&quot;}]</code></pre>\\n      </div>\\n<p>Not that the end result is a complete JSON array, where each JSON data chunk is a JSON object, delimited by <code class=\\\"language-text\\\">,</code>. This can be compared with new-line delimited JSON streaming, as described in the following section.</p>\\n<h2>New-line delimited JSON streaming</h2>\\n<p>JSON streaming actually doesn’t have the single fixed format, but another major variant from the above comma-delimited JSON streaming is new-line delimited JSON streaming.</p>\\n<p>That is illustrated as follows, and you will notice that the end result is not a valid JSON, but only each data chunk is a valid JSON object, delimited by new-lines instead of commas.</p>\\n<p> <img src=\\\"/blog/json-streaming-demo2-2d806dc41c7f8fa9383da21f979e443a.gif\\\" alt=\\\"json-streaming-demo2\\\"></p>\\n<p> If for any reason new-line delimited JSON streaming is preferred, you can do that by changing the <code class=\\\"language-text\\\">EntityStreamingSupport</code> as follows:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code class=\\\"language-scala\\\"><span class=\\\"token keyword\\\">implicit</span> <span class=\\\"token keyword\\\">val</span> jsonStreamingSupport<span class=\\\"token operator\\\">:</span> JsonEntityStreamingSupport <span class=\\\"token operator\\\">=</span>\\n  EntityStreamingSupport\\n    <span class=\\\"token punctuation\\\">.</span>json<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token comment\\\">// comment out the lines below to comma-delimited JSON streaming</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">.</span>withFramingRenderer<span class=\\\"token punctuation\\\">(</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token comment\\\">// this enables new-line delimited JSON streaming</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">      Flow<span class=\\\"token punctuation\\\">[</span>ByteString<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>map<span class=\\\"token punctuation\\\">(</span>byteString <span class=\\\"token keyword\\\">=></span> byteString <span class=\\\"token operator\\\">++</span> newline<span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token punctuation\\\">)</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">\\n</span><span class=\\\"token keyword\\\">def</span> route<span class=\\\"token operator\\\">:</span> Route <span class=\\\"token operator\\\">=</span> get <span class=\\\"token punctuation\\\">{</span>\\n  complete<span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">.</span>source<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>Again, if you want to see the complete source code, that can be found <a href=\\\"https://github.com/richardimaoka/resources/tree/master/akka-http-response-streaming\\\">here</a> with instruction to run the example.</p>\",\"frontmatter\":{\"title\":\"Akka HTTP response streaming\",\"date\":\"July 29, 2018\"}}},\"pathContext\":{\"slug\":\"/akka-http-response-streaming/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/akka-http-response-streaming.json\n// module id = 417\n// module chunks = 146681055074323"],"sourceRoot":""}