webpackJsonp([36029449993048],{419:function(e,a){e.exports={data:{site:{siteMetadata:{title:"Akka, Concurrency, etc.",author:"Richard Imaoka"}},markdownRemark:{id:"C:/Users/richardimaoka/blog/src/pages/local-minimal-sender/index.md absPath of file >>> MarkdownRemark",html:'<h2>Overview</h2>\n<p>You can find the code and instruction to run the example at <a href="https://github.com/richardimaoka/resources/tree/master/local-minimal">GitHub</a>.</p>\n<iframe width="640" height="360" src="https://www.youtube.com/embed/hQJkN4zXTyo" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>\n<p>This is about how Akka sends a message from one Actor to another <strong>locally</strong> (i.e. within the same JVM). As in the <a href="https://doc.akka.io/docs/akka/2.5/serialization.html?language=scala"><code>Serialization</code> part</a> of the official doc:</p>\n<blockquote>\n<p>The messages that Akka actors send to each other are JVM objects (e.g. instances of Scala case classes). Message passing between actors that live on the same JVM is straightforward. It is simply done via reference passing. </p>\n</blockquote>\n<p>If you are interested in the remote behavior when sending messages to remote JVM, I will write remote versions of articles soon so please refer to them.</p>\n<h2>Workflow</h2>\n<p><a href="https://github.com/richardimaoka/resources/blob/master/local-minimal/src/main/scala/example/Main.scala#L14L24"><code>MessageSender</code></a> sends messages "Hello World", "Hello Universe" and "Hello Galaxy" to the <code>messageReceiver</code> actor.</p>\n<pre><code class="language-scala">class MessageSender(messageReceiver: ActorRef)\n  extends Actor {\n  \n  override def preStart(): Unit = {\n    val messages = List(\n      "Hello World",\n      "Hello Universe",\n      "Hello Galaxy"\n    )\n\n    for(msg &#x3C;- messages) {\n      messageReceiver ! msg\n    }\n  }\n  ....\n}\n</code></pre>\n<p>The <code>preStart</code> method is a <a href="https://doc.akka.io/docs/akka/2.5/guide/tutorial_1.html?language=scala#the-actor-lifecycle">lifecycle method</a> provided by Akka Actor.</p>\n<p>The below is what\'s inside the main method, which initializes the receiver and the sender.</p>\n<pre><code class="language-scala">val system = ActorSystem("exampleSystem")\n\nval receiver = system.actorOf(\n  Props[MessageReceiver],\n  "receiver"\n)\n\n// sender\nsystem.actorOf(\n  MessageSender.props(receiver), \n  "sender"\n)\n</code></pre>\n<p>As in the <code>preStart</code> method of <code>MessageSender</code>, the first message to be sent is,</p>\n<pre><code class="language-scala">messageReceiver ! "Hello World",\n</code></pre>\n<p><img src="/blog/message-4093dc1854d0d519ddf1fc745d96b789.jpg" alt="message"></p>\n<p>where the <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorRef.scala#L400"><code>!</code> method</a> is a method of <code>LocalActorRef</code>.</p>\n<pre><code class="language-scala">override def !(message: Any)\n  (implicit sender: ActorRef = Actor.noSender): Unit =\n    actorCell.sendMessage(message, sender)\n</code></pre>\n<p>Above <code>actorCell</code> is an instance of <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L370"><code>ActorCell</code></a>, which implements <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L220"><code>Cell</code> trait</a>, and the <code>Cell</code> trait has the following <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/ActorCell.scala#L290L291"><code>sendMessage</code></a>.</p>\n<pre><code class="language-scala">final def sendMessage(\n  message: Any, \n  sender: ActorRef\n): Unit =\n  sendMessage(Envelope(message, sender, system))\n</code></pre>\n<p>Here you see an <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/AbstractDispatcher.scala#L23"><code>Envelope</code></a> which encapsulates <code>message</code> and <code>sender</code></p>\n<p><img src="/blog/envelope-91cfa7f809e99172f6902691b880c231.jpg" alt="envelope"></p>\n<pre><code class="language-scala">case class Envelope(\n  val message: Any, \n  val sender: ActorRef\n)\n</code></pre>\n<p>To illustrate the workflow so far up to the <code>sendMessage</code>:</p>\n<p><img src="/blog/sendMessage-97c0ac69e59e5122c722926a1e80a4e4.jpg" alt="sendMessage"></p>\n<p>The <code>sendMessage</code> method of the <code>Cell</code> trait (<code>ActorCell</code>) calls the <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/actor/dungeon/Dispatch.scala#L136"><code>sendMessage</code> method</a> of the <code>Dispatch</code> trait.</p>\n<pre><code class="language-scala">def sendMessage(msg: Envelope): Unit =\n  try {\n    ...\n    dispatcher.dispatch(this, msg)\n  } \n</code></pre>\n<p>(<a href="https://doc.akka.io/docs/akka/2.5/dispatchers.html?language=scala">The concept of <code>Dispatcher</code></a> might be unfamiliar to you and it is probably difficult to understand. I will write another article later to illustrate <code>Dispatcher</code> in more detail, but for now, you can assume dispatcher is, as the meaning of the word says, "sender" of messages.)</p>\n<p>There are two distinct <code>Dispatch</code> and <code>Dispatcher</code> traits in akka. The <code>Dispatch</code> trait has a reference to <code>dispatch: Dispatcher</code> and <code>Dispatcher</code>\'s <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L52L56">dispatch</a> method is as follows:</p>\n<pre><code class="language-scala">def dispatch(\n  receiver: ActorCell,\n  invocation: Envelope\n): Unit = {\n  val mbox = receiver.mailbox\n  mbox.enqueue(receiver.self, invocation)\n  registerForExecution(mbox, true, false)\n}\n</code></pre>\n<p><img src="/blog/dispatcher-ed3db186b54b5f43bbc7ddf384206e5e.jpg" alt="dispatcher"></p>\n<p><a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L85"><code>Mailbox</code></a> has the following <code>enqueue</code> method</p>\n<pre><code class="language-scala">def enqueue(receiver: ActorRef, msg: Envelope): Unit = messageQueue.enqueue(receiver, msg)\n</code></pre>\n<p><img src="/blog/enqueue-9a6b0df6f94bee8c851810e8e5a0d95a.jpg" alt="enqueue"></p>\n<p>The <code>messageQueue</code> is type of <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L614L618"><code>MessageQueue</code></a> class which is defined for <a href="https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes">each different <code>Mailbox</code> type</a>. The one for the default <code>UnboundedMailbox</code> is:</p>\n<pre><code class="language-scala">object UnboundedMailbox {\n  class MessageQueue \n    extends ConcurrentLinkedQueue[Envelope] \n    with UnboundedQueueBasedMessageQueue {\n      final def queue: Queue[Envelope] = this\n  }\n}\n</code></pre>\n<p>Coming back to the <code>dispatch</code> method of <code>Dispatcher</code>, it has <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Dispatcher.scala#L115">registerForExecution</a> as follows:</p>\n<pre><code class="language-scala">def registerForExecution(mbox: Mailbox, ...): Boolean = {\n  ...\n  executorService execute mbox\n  ...\n}\n</code></pre>\n<p>Since <a href="https://github.com/akka/akka/blob/v2.5.9/akka-actor/src/main/scala/akka/dispatch/Mailbox.scala#L56L57"><code>Mailbox</code></a> is defined as <code>ForkJoinTask</code>, the execution (i.e. processing) of <code>Mailbox</code> is run on a different <code>Thread</code>, which will be covered in <a href="../local-minimal-receiver">the next article</a></p>\n<pre><code class="language-scala">abstract class Mailbox(val messageQueue: MessageQueue)\n  extends ForkJoinTask[Unit] \n  with SystemMessageQueue \n  with Runnable {\n    ...\n}\n</code></pre>\n<p>In the next article, <a href="../local-minimal-receiver">Local Actor workflow part 2 - Receiver side</a>, I will discuss about what happens on the receiver side which is triggered as the above <code>ForkJoinTask</code>.</p>\n<h2>Instruction to run the example</h2>\n<pre><code>> git clone https://github.com/richardimaoka/resources.git\n> cd resources\n> cd local-minimal\n> sbt\n> runMain example.Main\n</code></pre>\n<h2>Output</h2>\n<p>Some <code>println</code> calls are inserted in the <a href="https://github.com/richardimaoka/resources/tree/master/local-minimal">complete example at GitHub</a> to illustrate the behavior.</p>\n<p>Thread names are shown as [exampleSystem-akka.actor.default-dispatcher-3] and [...-4].</p>\n<pre><code>[info] Running example.Main\nprovider = local\n[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello World to Actor[akka://exampleSystem/user/receiver#-846959521]\n[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Universe to Actor[akka://exampleSystem/user/receiver#-846959521]\n[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello World\n[exampleSystem-akka.actor.default-dispatcher-5] sending message Hello Galaxy to Actor[akka://exampleSystem/user/receiver#-846959521]\n[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Universe\n[exampleSystem-akka.actor.default-dispatcher-2] EchoActor: received message = Hello Galaxy\n[success] Total time: 7 s, completed Jan 30, 2018 6:16:46 AM\n</code></pre>\n<h2>References</h2>\n<ul>\n<li>Official documentation of Akka Actor at <a href="https://doc.akka.io/docs/akka/2.5/actors.html">https://doc.akka.io/docs/akka/2.5/actors.html</a></li>\n<li>Official documentation of Akka Dispatcher at <a href="https://doc.akka.io/docs/akka/2.5/dispatchers.html">https://doc.akka.io/docs/akka/2.5/dispatchers.html</a></li>\n<li>Official documentation of Akka lifecycle at <a href="https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle">https://doc.akka.io/docs/akka/current/actors.html$actor-lifecycle</a></li>\n<li>Official documentation of Akka Mailbox at <a href="https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes">https://doc.akka.io/docs/akka/2.5/mailboxes.html?language=scala#mailboxes</a>)</li>\n<li>Official documentation of Akka location transparency at <a href="https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency">https://doc.akka.io/docs/akka/current/general/remoting.html#location-transparency</a></li>\n<li>Oracle\'s documentation about Fork/Join at <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html">https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html</a></li>\n<li>ExecutorService Javadoc at <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html</a></li>\n</ul>',frontmatter:{title:"Local Actor workflow part 1 - Sender side",date:"January 29, 2018"}}},pathContext:{slug:"/local-minimal-sender/"}}}});
//# sourceMappingURL=path---local-minimal-sender-a23036f2d395d0f98d1a.js.map