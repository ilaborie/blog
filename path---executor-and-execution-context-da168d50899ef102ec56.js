webpackJsonp([0xc5efa0db10bc],{415:function(e,n){e.exports={data:{site:{siteMetadata:{title:"Akka, Concurrency, etc.",author:"Richard Imaoka"}},markdownRemark:{id:"C:/Users/richardimaoka/blog/src/pages/executor-and-execution-context/index.md absPath of file >>> MarkdownRemark",html:'<h2>Overview</h2>\n<p>You can find the code and instruction to run the example at <a href="https://github.com/richardimaoka/resources/tree/master/executor-and-execution-context">GitHub</a>.</p>\n<iframe width="640" height="360" src="https://www.youtube.com/embed/zgp2B-cuUMI" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>\n<h2>Thread in Java</h2>\n<p><img src="/blog/thread-46cd166852cb3bb57e031d8bab405132.jpg" alt="thread"></p>\n<p><code>Thread</code> and <code>Runnable</code> has been there for long as the very first generation of concurrent execution approaches in Java. The concept and usage are rather simple, where you extend <code>Runnable</code> and implement the <code>run</code> method which represents the operation you want to execute concurrently.</p>\n<p>(<code>Runnable</code> is from Java, but here I\'m defining a Scala class extending it.)</p>\n<pre><code class="language-scala">class PrintRunnable extends Runnable {\n  def run(): Unit = {\n    println(s"[${Thread.currentThread()}] - PrintRunnable run() is executed")\n  }\n}\n</code></pre>\n<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">javadoc of <code>Runnable</code></a></p>\n<p>Then you instantiate a <code>Thread</code> by passing in a <code>Runnable</code> instance, and call the <code>start()</code> method.</p>\n<pre><code class="language-scala">println(s"[${Thread.currentThread()}] - main thread")\nt = new Thread(new PrintRunnable(1))\nt.start()\n</code></pre>\n<p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html">javadoc of <code>Thread</code></a></p>\n<p>Then you will get output like this. The <code>Thread</code> names are enclosed in <code>[]</code>, which show that the main thread - (i.e.) one which did <code>t = new Thread(new PrintRunnable(1))</code> - and the thread running <code>Runnable</code> are different - (i.e.) Concurrently executed.</p>\n<pre><code>[Thread[run-main-0,5,run-main-group-0]] - main thread\n[Thread[pool-8-thread-1,5,run-main-group-0]] - PrintRunnable run() is executed\n</code></pre>\n<p>Typically after you call the <code>start()</code> method of <code>Thread</code>, you also call the <code>join()</code> method to wait until the thrad dies.</p>\n<pre><code class="language-scala">t.join()\n</code></pre>\n<h2>Executor and ExecutorService in Java</h2>\n<p><img src="/blog/interfaces-58c9ff9873a22582e5b84a6f127af378.jpg" alt="interfaces"></p>\n<p>The next generation of Java concurrency execution approach was <code>Executor</code> and <code>ExecutorService</code>.\nWhile <code>Thread</code> allowed you handle concurrent execution in a separate thread, but when it comes to the point where you handle many threads for many different purposes in the same application, it becomes unmanagable.</p>\n<p><code>Executor</code> and <code>ExecutorService</code> control <code>Thread</code> instances in the background so that you don\'t handle each single <code>Thread</code> by yourself, which is tedious, but rather you do higher level of control by handling a group of <code>Thread</code> instances (<code>ThreadPool</code>, which is not explained in this article though) via <code>ExecutorService</code>.</p>\n<p>Let\'s look at the code - firstly <code>Executor</code> is a very simple interface which only has this single <code>execute</code> method.</p>\n<pre><code class="language-java">public interface Executor {\n\n    /**\n     * Executes the given command at some time in the future.  The command\n     * may execute in a new thread, in a pooled thread, or in the calling\n     * thread, at the discretion of the {@code Executor} implementation.\n     *\n     * @param command the runnable task\n     * @throws RejectedExecutionException if this task cannot be\n     * accepted for execution\n     * @throws NullPointerException if command is null\n     */\n    void execute(Runnable command);\n}\n</code></pre>\n<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html">javadoc of <code>Executor</code></a></p>\n<p>And <code>ExecutorService</code> is also a Java <code>interface</code> which extends <code>Executor</code></p>\n<pre><code class="language-java">public interface ExecutorService extends Executor {\n  ...\n}\n</code></pre>\n<p>and define those lifecycle management methods (and some other methods).</p>\n<pre><code class="language-java">  ...\n  void shutdown();\n  List&#x3C;Runnable> shutdownNow();\n  boolean isShutdown();\n  boolean isTerminated();\n  boolean awaitTermination(long timeout, TimeUnit unit)\n    throws InterruptedException;\n  ...\n</code></pre>\n<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">javadoc of <code>ExecutorService</code></a></p>\n<p>There are factory methods available in the <code>Executors</code> class like this one, which creates a group of 5 threads in the background:</p>\n<pre><code>val executor = Executors.newFixedThreadPool(5);\nexecutor.execute(new PrintRunnable)\n</code></pre>\n<p><img src="/blog/executorService-91862e98b381bb414a432b8afa9ae502.jpg" alt="executorService"></p>\n<p><img src="/blog/executorService2-41484c3a90ad5f1e855f031beb002e89.jpg" alt="executorService2"></p>\n<p>and the <code>execute</code> call let <code>ExecutorService</code> execute <code>PrintRunnable</code> in the background threads.\nNote that you didn\'t specify which exact thread the <code>PrintRunnable</code> should be run in, but instead, you asked <code>ExecutorService</code> to decide the actual thread to run it.</p>\n<h2>ExecutionContext, and how it works with Future</h2>\n<p>Now we move onto Scala\'s <code>Future</code>. Scala\'s <code>Future</code> is used with Scala\'s <code>ExecutionContext</code>, both of which I will explain below in the article.</p>\n<p>(I\'m intentionally saying <strong>Scala\'s</strong> <code>Future</code> as there is also Java\'s <code>Future</code> and that is different from Scala\'s. I will not talk about the Java <code>Future</code> in this article.)</p>\n<p><img src="/blog/executionContext-be4b22319ed9bc62a679ef6265984d2d.jpg" alt="executionContext"></p>\n<p>You can think of <code>ExecutionContext</code> in Scala is kind of equivalent to <code>Executor</code> in Java.\nIt has the following <code>execute</code> method.</p>\n<pre><code>trait ExecutionContext {\n  def execute(runnable: Runnable): Unit\n  .. // only few other methods (two other methods as of Scala 2.12.4)\n}\n</code></pre>\n<p><img src="/blog/future-e7f56e76d0381aaa9c0f3945591632c5.jpg" alt="future"></p>\n<p>However, you don\'t call the <code>execute()</code> method of <code>ExecutionContext</code> directly, but you should  <code>implicit</code>ly declare <code>ExecutionContext</code> like below.</p>\n<pre><code>implicit val executionContext: ExecutionContext = \n  ExecutionContext.Implicits.global\n</code></pre>\n<p>(Little bit side-tracked, but in production code, you shouldn\'t use <code>ExecutionContext.Implicits.global</code>, as you will need more flexibility and careful configuration of the background thread pool, like number of threads, whether it\'s fixed thread pool or fork-join, etc)</p>\n<p>Then you call <code>Future{...}</code> which is <code>Future</code> companion object\'s <code>apply</code> method, </p>\n<pre><code>def printThreadInsideFuture(): Unit = \n  println(s"[${Thread.currentThread()}] - printThreadInsideFuture() is executed")\n\nval f = Future{ printThreadInsideFuture() }  \n</code></pre>\n<p>that takes an <code>implicit</code> parameter of <code>ExecutionContext</code>. </p>\n<pre><code class="language-scala"> def apply[T](body: =>T)\n             (implicit executor: ExecutionContext): Future[T]\n</code></pre>\n<p>By doing this, you let the <code>implicit</code>-ly passed <code>ExecutionContext</code> execute the body of <code>Future</code> you passed in, in one of the background threads.</p>\n<p><img src="/blog/onComplete-385cb92e7c1a00a9b73343a2e2150e71.jpg" alt="onComplete"></p>\n<p>Scala\'s <code>Future</code> also has <code>onComplete</code> method which lets you execute a callback function taking the return value from the <code>Future</code> body you earlier passed.</p>\n<p>The callback should have <code>case Success()</code> and <code>case Future</code> because a <code>Future</code> can fail without completing the passed-in <code>Future</code> body for whatever reasons.</p>\n<pre><code class="language-scala">def printThreadInsideCallback(): Unit = \n  println(s"[${Thread.currentThread()}] - printThreadInsideCallback() is executed")\n\n// The callback passed to onComplete is either be \n// applied immediately or be scheduled asynchronously.\nf1.onComplete{\n  case Success(_) => \n    printThreadInsideCallback()\n  case Failure(_) =>\n    println("Future failed!!")\n}\n</code></pre>\n<p>In <a href="https://www.scala-lang.org/api/2.12.4/scala/concurrent/Future.html">Scaladoc</a>, <code>Future</code>\'s <code>onComplete</code> has the following comment, explaining its behavior.</p>\n<pre><code>When this future is completed, either through an exception, or a value,\napply the provided function.\n\nIf the future has already been completed,\nthis will either be applied immediately or be scheduled asynchronously.\n\nNote that the returned value of `f` will be discarded.\n</code></pre>\n<p>Details of <code>onComplete</code> can be found in <a href="https://docs.scala-lang.org/overviews/core/futures.html">the official <code>Future</code> doc</a></p>\n<h2>Inter-operabilities between Executor/ExecutorService and ExecutionContext</h2>\n<p>You might get into a situation where you have a Scala application dependent on some Java libraries, which only expects <code>Executor</code> or <code>ExecutionContext</code>, not knowing Scala <code>ExecutionContext</code> at all.</p>\n<p>To deal with such a situation, Scala provides the following two traits bridging the gap between <code>Executor</code>/<code>ExecutorService</code> and <code>ExecutionContext</code>. You\'ll create an instance of eitehr <code>ExecutionContextExecutor</code> or <code>ExecutionContextExecutorService</code>, then that can be passed as <code>Executor</code>/<code>ExecutorService</code> to Java libraries, as well as <code>ExecutionContext</code> to Scala libraries.</p>\n<pre><code>/**\n * An ExecutionContext that is also a\n * Java Executor.\n */\ntrait ExecutionContextExecutor \n  extends ExecutionContext \n  with Executor\n</code></pre>\n<pre><code class="language-scala">/**\n * An ExecutionContext that is also a\n * Java ExecutorService.\n */\ntrait ExecutionContextExecutorService \n  extends ExecutionContextExecutor \n  with ExecutorService\n</code></pre>\n<p>(Indeed for example, Akka\'s <code>Dispatcher</code> extends <code>ExecutionContextExecutor</code> so that it works as <code>ExecutionContext</code> to run <code>Future</code> bodies, and <code>Executor</code> to work in Java libraries)</p>\n<h2>Instruction to run the example, and output</h2>\n<pre><code>> git clone https://github.com/richardimaoka/resources.git\n> cd resources\n> cd executor-and-execution-context\n> sbt\n</code></pre>\n<p>There are multiple <code>object Main</code> defined under separate packages.\nSo, to run the thread example under the <code>example.thread</code> package:</p>\n<pre><code>> runMain example.thread.Main\n</code></pre>\n<pre><code>[info] Running example.thread.Main\n[Thread[run-main-1,5,run-main-group-1]] - main thread\n[Thread[Thread-4,5,run-main-group-1]] - PrintRunnable(2) run() is executed\n[Thread[Thread-3,5,run-main-group-1]] - PrintRunnable(1) run() is executed\n[Thread[Thread-6,5,run-main-group-1]] - PrintRunnable(4) run() is executed\n[Thread[Thread-8,5,run-main-group-1]] - PrintRunnable(6) run() is executed\n[Thread[Thread-5,5,run-main-group-1]] - PrintRunnable(3) run() is executed\n[Thread[Thread-9,5,run-main-group-1]] - PrintRunnable(7) run() is executed\n[Thread[Thread-12,5,run-main-group-1]] - PrintRunnable(10) run() is executed\n[Thread[Thread-7,5,run-main-group-1]] - PrintRunnable(5) run() is executed\n[Thread[Thread-11,5,run-main-group-1]] - PrintRunnable(9) run() is executed\n[Thread[Thread-13,5,run-main-group-1]] - PrintRunnable(11) run() is executed\n[Thread[Thread-10,5,run-main-group-1]] - PrintRunnable(8) run() is executed\n[Thread[Thread-14,5,run-main-group-1]] - PrintRunnable(12) run() is executed\n[success] Total time: 1 s, completed Feb 4, 2018 5:01:20 PM\n</code></pre>\n<p>For the Executor/ExecutorService example:</p>\n<pre><code>> runMain example.executor.Main\n</code></pre>\n<pre><code>[info] Running example.executor.Main\n[Thread[run-main-0,5,run-main-group-0]] - main thread\n[Thread[pool-8-thread-1,5,run-main-group-0]] - PrintRunnable(1) run() is executed\n[Thread[pool-8-thread-2,5,run-main-group-0]] - PrintRunnable(2) run() is executed\n[Thread[pool-8-thread-3,5,run-main-group-0]] - PrintRunnable(3) run() is executed\n[Thread[pool-8-thread-1,5,run-main-group-0]] - PrintRunnable(6) run() is executed\n[Thread[pool-8-thread-4,5,run-main-group-0]] - PrintRunnable(4) run() is executed\n[Thread[pool-8-thread-2,5,run-main-group-0]] - PrintRunnable(7) run() is executed\n[Thread[pool-8-thread-3,5,run-main-group-0]] - PrintRunnable(8) run() is executed\n[Thread[pool-8-thread-5,5,run-main-group-0]] - PrintRunnable(5) run() is executed\n[Thread[pool-8-thread-2,5,run-main-group-0]] - PrintRunnable(11) run() is executed\n[Thread[pool-8-thread-4,5,run-main-group-0]] - PrintRunnable(10) run() is executed\n[Thread[pool-8-thread-1,5,run-main-group-0]] - PrintRunnable(9) run() is executed\n[Thread[pool-8-thread-3,5,run-main-group-0]] - PrintRunnable(12) run() is executed\n[success] Total time: 15 s, completed Feb 4, 2018 3:26:02 PM\n</code></pre>\n<p>Then the Future example</p>\n<pre><code>> runMain example.future.Main\n</code></pre>\n<pre><code>[info] Running example.future.Main\n[Thread[run-main-3,5,run-main-group-3]] - main thread\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(1) is executed\n[Thread[scala-execution-context-global-199,5,main]] - printThreadName(2) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(3) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(4) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(5) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(6) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(7) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(8) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(9) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(10) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(11) is executed\n[Thread[scala-execution-context-global-200,5,main]] - printThreadName(12) is executed\n[success] Total time: 3 s, completed Feb 4, 2018 4:40:30 PM\n</code></pre>\n<h2>References</h2>\n<ul>\n<li>Oracle official doc for Thread at - <a href="https://docs.oracle.com/javase/tutorial/essential/concurrency/threads.html">https://docs.oracle.com/javase/tutorial/essential/concurrency/threads.html</a></li>\n<li>Javadoc of <code>java.lang.Thraed</code> at - <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html">https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html</a></li>\n<li>Javadoc of <code>java.lang.Runnable</code> at - <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html</a></li>\n<li>Javadoc of <code>java.util.concurrent.Executor</code> at - <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html</a></li>\n<li>Javadoc of <code>java.util.concurrent.ExecutorService</code> at - <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html</a></li>\n<li>Scala official documentation of <code>Future</code> at - <a href="https://docs.scala-lang.org/overviews/core/futures.html">https://docs.scala-lang.org/overviews/core/futures.html</a></li>\n<li>Scaladoc of <code>scala.concurrent.Future</code> at - <a href="https://www.scala-lang.org/api/2.12.4/scala/concurrent/Future.html">https://www.scala-lang.org/api/2.12.4/scala/concurrent/Future.html</a></li>\n<li>Scaladoc of <code>scala.concurrent.Future</code> at - <a href="https://www.scala-lang.org/api/2.12.4/scala/concurrent/ExecutionContext.html">https://www.scala-lang.org/api/2.12.4/scala/concurrent/ExecutionContext.html</a></li>\n</ul>',frontmatter:{title:"Executor/ExecutorService in Java, and ExecutionContext behind Future in Scala",date:"February 07, 2018"}}},pathContext:{slug:"/executor-and-execution-context/"}}}});
//# sourceMappingURL=path---executor-and-execution-context-da168d50899ef102ec56.js.map